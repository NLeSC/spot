(window.webpackJsonp=window.webpackJsonp||[]).push([["npm.csv-generate"],{"81bb":function(module,exports,__webpack_require__){eval("// Generated by CoffeeScript 1.12.7\nvar Generator, stream, util,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nstream = __webpack_require__(/*! stream */ \"92a1\");\n\nutil = __webpack_require__(/*! util */ \"f895\");\n\nmodule.exports = function() {\n  var callback, data, generator, options;\n  if (arguments.length === 2) {\n    options = arguments[0];\n    callback = arguments[1];\n  } else if (arguments.length === 1) {\n    if (typeof arguments[0] === 'function') {\n      options = {};\n      callback = arguments[0];\n    } else {\n      options = arguments[0];\n    }\n  } else if (arguments.length === 0) {\n    options = {};\n  }\n  generator = new Generator(options);\n  if (callback) {\n    data = [];\n    generator.on('readable', function() {\n      var d, results;\n      results = [];\n      while (d = generator.read()) {\n        results.push(data.push(options.objectMode ? d : d.toString()));\n      }\n      return results;\n    });\n    generator.on('error', callback);\n    generator.on('end', function() {\n      return callback(null, options.objectMode ? data : data.join(''));\n    });\n  }\n  return generator;\n};\n\nGenerator = function(options1) {\n  var accepted_header_types, base, base1, base2, base3, base4, base5, base6, i, j, len, ref, v;\n  this.options = options1 != null ? options1 : {};\n  stream.Readable.call(this, this.options);\n  if ((base = this.options).columns == null) {\n    base.columns = 8;\n  }\n  if ((base1 = this.options).max_word_length == null) {\n    base1.max_word_length = 16;\n  }\n  if ((base2 = this.options).fixed_size == null) {\n    base2.fixed_size = false;\n  }\n  if ((base3 = this.options).end == null) {\n    base3.end = null;\n  }\n  if ((base4 = this.options).seed == null) {\n    base4.seed = false;\n  }\n  if ((base5 = this.options).length == null) {\n    base5.length = -1;\n  }\n  if ((base6 = this.options).delimiter == null) {\n    base6.delimiter = ',';\n  }\n  this._ = {\n    fixed_size_buffer: '',\n    count_written: 0,\n    count_created: 0\n  };\n  if (typeof this.options.columns === 'number') {\n    this.options.columns = new Array(this.options.columns);\n  }\n  accepted_header_types = Object.keys(Generator).filter(function(t) {\n    return t !== 'super_';\n  });\n  ref = this.options.columns;\n  for (i = j = 0, len = ref.length; j < len; i = ++j) {\n    v = ref[i];\n    if (v == null) {\n      v = 'ascii';\n    }\n    if (typeof v === 'string') {\n      if (indexOf.call(accepted_header_types, v) < 0) {\n        throw Error(\"Invalid column type: got \\\"\" + v + \"\\\", default values are \" + (JSON.stringify(accepted_header_types)));\n      }\n      this.options.columns[i] = Generator[v];\n    }\n  }\n  return this;\n};\n\nutil.inherits(Generator, stream.Readable);\n\nmodule.exports.Generator = Generator;\n\nGenerator.prototype.random = function() {\n  if (this.options.seed) {\n    return this.options.seed = this.options.seed * Math.PI * 100 % 100 / 100;\n  } else {\n    return Math.random();\n  }\n};\n\nGenerator.prototype.end = function() {\n  return this.push(null);\n};\n\nGenerator.prototype._read = function(size) {\n  var column, data, header, j, k, l, len, len1, len2, len3, length, line, lineLength, m, ref;\n  data = [];\n  length = this._.fixed_size_buffer.length;\n  if (length) {\n    data.push(this._.fixed_size_buffer);\n  }\n  while (true) {\n    if ((this._.count_created === this.options.length) || (this.options.end && Date.now() > this.options.end)) {\n      if (data.length) {\n        if (this.options.objectMode) {\n          for (j = 0, len = data.length; j < len; j++) {\n            line = data[j];\n            this._.count_written++;\n            this.push(line);\n          }\n        } else {\n          this._.count_written++;\n          this.push(data.join(''));\n        }\n      }\n      return this.push(null);\n    }\n    line = [];\n    ref = this.options.columns;\n    for (k = 0, len1 = ref.length; k < len1; k++) {\n      header = ref[k];\n      line.push(\"\" + (header(this)));\n    }\n    if (this.options.objectMode) {\n      lineLength = 0;\n      for (l = 0, len2 = line.length; l < len2; l++) {\n        column = line[l];\n        lineLength += column.length;\n      }\n    } else {\n      line = \"\" + (this._.count_created === 0 ? '' : '\\n') + (line.join(this.options.delimiter));\n      lineLength = line.length;\n    }\n    this._.count_created++;\n    if (length + lineLength > size) {\n      if (this.options.objectMode) {\n        data.push(line);\n        for (m = 0, len3 = data.length; m < len3; m++) {\n          line = data[m];\n          this._.count_written++;\n          this.push(line);\n        }\n      } else {\n        if (this.options.fixed_size) {\n          this._.fixed_size_buffer = line.substr(size - length);\n          data.push(line.substr(0, size - length));\n        } else {\n          data.push(line);\n        }\n        this._.count_written++;\n        this.push(data.join(''));\n      }\n      break;\n    }\n    length += lineLength;\n    data.push(line);\n  }\n};\n\nGenerator.ascii = function(gen) {\n  var char, column, j, nb_chars, ref;\n  column = [];\n  for (nb_chars = j = 0, ref = Math.ceil(gen.random() * gen.options.max_word_length); 0 <= ref ? j < ref : j > ref; nb_chars = 0 <= ref ? ++j : --j) {\n    char = Math.floor(gen.random() * 32);\n    column.push(String.fromCharCode(char + (char < 16 ? 65 : 97 - 16)));\n  }\n  return column.join('');\n};\n\nGenerator.int = function(gen) {\n  return Math.floor(gen.random() * Math.pow(2, 52));\n};\n\nGenerator.bool = function(gen) {\n  return Math.floor(gen.random() * 2);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81bb\n")}}]);