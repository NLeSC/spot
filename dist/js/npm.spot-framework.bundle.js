(window.webpackJsonp=window.webpackJsonp||[]).push([["npm.spot-framework"],{"0056":function(module,exports,__webpack_require__){eval("var Collection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\nvar Group = __webpack_require__(/*! ./group */ \"9083\");\n\nfunction setOrdering (groups, ordering) {\n  if (ordering === 'count') {\n    groups.comparator = function (a, b) {\n      if (a.count === b.count) {\n        return a.value < b.value ? -1 : 1;\n      } else {\n        return b.count - a.count;\n      }\n    };\n  } else if (ordering === 'value') {\n    groups.comparator = 'value';\n  } else {\n    console.error('Ordering not implemented for partition: ', ordering);\n  }\n  groups.sort();\n}\n\nmodule.exports = Collection.extend({\n  indexes: ['value', 'label', 'group', 'groupIndex'],\n  model: Group,\n  comparator: 'label',\n  initialize: function (models, options) {\n    var groups = this;\n    var partition = options.parent;\n\n    // update group index on resort\n    this.on('sort', function () {\n      this.forEach(function (group, i) {\n        group.groupIndex = i;\n      });\n    }, this);\n\n    // this.parent := partition\n    if (partition) {\n      setOrdering(groups, partition.ordering);\n\n      partition.on('change ordering', function () {\n        setOrdering(groups, partition.ordering);\n      });\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMDA1Ni5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvcGFydGl0aW9uL2dyb3VwLWNvbGxlY3Rpb24uanM/OGM1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ2FtcGVyc2FuZC1jb2xsZWN0aW9uJyk7XG52YXIgR3JvdXAgPSByZXF1aXJlKCcuL2dyb3VwJyk7XG5cbmZ1bmN0aW9uIHNldE9yZGVyaW5nIChncm91cHMsIG9yZGVyaW5nKSB7XG4gIGlmIChvcmRlcmluZyA9PT0gJ2NvdW50Jykge1xuICAgIGdyb3Vwcy5jb21wYXJhdG9yID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhLmNvdW50ID09PSBiLmNvdW50KSB7XG4gICAgICAgIHJldHVybiBhLnZhbHVlIDwgYi52YWx1ZSA/IC0xIDogMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiLmNvdW50IC0gYS5jb3VudDtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKG9yZGVyaW5nID09PSAndmFsdWUnKSB7XG4gICAgZ3JvdXBzLmNvbXBhcmF0b3IgPSAndmFsdWUnO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ09yZGVyaW5nIG5vdCBpbXBsZW1lbnRlZCBmb3IgcGFydGl0aW9uOiAnLCBvcmRlcmluZyk7XG4gIH1cbiAgZ3JvdXBzLnNvcnQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uLmV4dGVuZCh7XG4gIGluZGV4ZXM6IFsndmFsdWUnLCAnbGFiZWwnLCAnZ3JvdXAnLCAnZ3JvdXBJbmRleCddLFxuICBtb2RlbDogR3JvdXAsXG4gIGNvbXBhcmF0b3I6ICdsYWJlbCcsXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uIChtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICB2YXIgZ3JvdXBzID0gdGhpcztcbiAgICB2YXIgcGFydGl0aW9uID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICAvLyB1cGRhdGUgZ3JvdXAgaW5kZXggb24gcmVzb3J0XG4gICAgdGhpcy5vbignc29ydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXAsIGkpIHtcbiAgICAgICAgZ3JvdXAuZ3JvdXBJbmRleCA9IGk7XG4gICAgICB9KTtcbiAgICB9LCB0aGlzKTtcblxuICAgIC8vIHRoaXMucGFyZW50IDo9IHBhcnRpdGlvblxuICAgIGlmIChwYXJ0aXRpb24pIHtcbiAgICAgIHNldE9yZGVyaW5nKGdyb3VwcywgcGFydGl0aW9uLm9yZGVyaW5nKTtcblxuICAgICAgcGFydGl0aW9uLm9uKCdjaGFuZ2Ugb3JkZXJpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldE9yZGVyaW5nKGdyb3VwcywgcGFydGl0aW9uLm9yZGVyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0056\n")},"0112":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Module dependencies.\n */\n\nvar transports = __webpack_require__(/*! ./transports/index */ \"834b\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"ee5b\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('engine.io-client:socket');\nvar index = __webpack_require__(/*! indexof */ \"3294\");\nvar parser = __webpack_require__(/*! engine.io-parser */ \"aa6c\");\nvar parseuri = __webpack_require__(/*! parseuri */ \"64a0\");\nvar parsejson = __webpack_require__(/*! parsejson */ \"185c\");\nvar parseqs = __webpack_require__(/*! parseqs */ \"914f\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket (uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure\n    : (global.location && 'https:' === location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port\n      ? location.port\n      : (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode;\n\n  // other options for Node.js client\n  var freeGlobal = typeof global === 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  }\n\n  // set on handshake\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null;\n\n  // set on heartbeat\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = __webpack_require__(/*! ./transport */ \"0d97\");\nSocket.transports = __webpack_require__(/*! ./transports/index */ \"834b\");\nSocket.parser = __webpack_require__(/*! engine.io-parser */ \"aa6c\");\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    agent: this.agent,\n    hostname: this.hostname,\n    port: this.port,\n    secure: this.secure,\n    path: this.path,\n    query: query,\n    forceJSONP: this.forceJSONP,\n    jsonp: this.jsonp,\n    forceBase64: this.forceBase64,\n    enablesXDR: this.enablesXDR,\n    timestampRequests: this.timestampRequests,\n    timestampParam: this.timestampParam,\n    policyPort: this.policyPort,\n    socket: this,\n    pfx: this.pfx,\n    key: this.key,\n    passphrase: this.passphrase,\n    cert: this.cert,\n    ca: this.ca,\n    ciphers: this.ciphers,\n    rejectUnauthorized: this.rejectUnauthorized,\n    perMessageDeflate: this.perMessageDeflate,\n    extraHeaders: this.extraHeaders,\n    forceNode: this.forceNode,\n    localAddress: this.localAddress\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function () {\n    self.onDrain();\n  })\n  .on('packet', function (packet) {\n    self.onPacket(packet);\n  })\n  .on('error', function (e) {\n    self.onError(e);\n  })\n  .on('close', function () {\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, { probe: 1 });\n  var failed = false;\n  var self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen () {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport () {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  // Handle any error that happens while probing\n  function onerror (err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose () {\n    onerror('transport closed');\n  }\n\n  // When the socket is closed while we're probing\n  function onclose () {\n    onerror('socket closed');\n  }\n\n  // When the socket is upgraded while we're probing\n  function onupgrade (to) {\n    if (transport && to.name !== transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  // Remove all listeners on the transport and on self\n  function cleanup () {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState ||\n      'closing' === this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if ('closed' === this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close () {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose () {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade () {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0112\n")},"02ef":function(module,exports,__webpack_require__){"use strict";eval('\n\nvar crossfilter_identity = __webpack_require__(/*! ./identity */ "55a3");\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nmodule.exports = bisect_by(crossfilter_identity);\nmodule.exports.by = bisect_by; // assign the raw function to the export as well\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMDJlZi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9iaXNlY3QuanM/MDgyZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjcm9zc2ZpbHRlcl9pZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuZnVuY3Rpb24gYmlzZWN0X2J5KGYpIHtcblxuICAvLyBMb2NhdGUgdGhlIGluc2VydGlvbiBwb2ludCBmb3IgeCBpbiBhIHRvIG1haW50YWluIHNvcnRlZCBvcmRlci4gVGhlXG4gIC8vIGFyZ3VtZW50cyBsbyBhbmQgaGkgbWF5IGJlIHVzZWQgdG8gc3BlY2lmeSBhIHN1YnNldCBvZiB0aGUgYXJyYXkgd2hpY2hcbiAgLy8gc2hvdWxkIGJlIGNvbnNpZGVyZWQ7IGJ5IGRlZmF1bHQgdGhlIGVudGlyZSBhcnJheSBpcyB1c2VkLiBJZiB4IGlzIGFscmVhZHlcbiAgLy8gcHJlc2VudCBpbiBhLCB0aGUgaW5zZXJ0aW9uIHBvaW50IHdpbGwgYmUgYmVmb3JlICh0byB0aGUgbGVmdCBvZikgYW55XG4gIC8vIGV4aXN0aW5nIGVudHJpZXMuIFRoZSByZXR1cm4gdmFsdWUgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgZmlyc3RcbiAgLy8gYXJndW1lbnQgdG8gYGFycmF5LnNwbGljZWAgYXNzdW1pbmcgdGhhdCBhIGlzIGFscmVhZHkgc29ydGVkLlxuICAvL1xuICAvLyBUaGUgcmV0dXJuZWQgaW5zZXJ0aW9uIHBvaW50IGkgcGFydGl0aW9ucyB0aGUgYXJyYXkgYSBpbnRvIHR3byBoYWx2ZXMgc29cbiAgLy8gdGhhdCBhbGwgdiA8IHggZm9yIHYgaW4gYVtsbzppXSBmb3IgdGhlIGxlZnQgc2lkZSBhbmQgYWxsIHYgPj0geCBmb3IgdiBpblxuICAvLyBhW2k6aGldIGZvciB0aGUgcmlnaHQgc2lkZS5cbiAgZnVuY3Rpb24gYmlzZWN0TGVmdChhLCB4LCBsbywgaGkpIHtcbiAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICBpZiAoZihhW21pZF0pIDwgeCkgbG8gPSBtaWQgKyAxO1xuICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvO1xuICB9XG5cbiAgLy8gU2ltaWxhciB0byBiaXNlY3RMZWZ0LCBidXQgcmV0dXJucyBhbiBpbnNlcnRpb24gcG9pbnQgd2hpY2ggY29tZXMgYWZ0ZXIgKHRvXG4gIC8vIHRoZSByaWdodCBvZikgYW55IGV4aXN0aW5nIGVudHJpZXMgb2YgeCBpbiBhLlxuICAvL1xuICAvLyBUaGUgcmV0dXJuZWQgaW5zZXJ0aW9uIHBvaW50IGkgcGFydGl0aW9ucyB0aGUgYXJyYXkgaW50byB0d28gaGFsdmVzIHNvIHRoYXRcbiAgLy8gYWxsIHYgPD0geCBmb3IgdiBpbiBhW2xvOmldIGZvciB0aGUgbGVmdCBzaWRlIGFuZCBhbGwgdiA+IHggZm9yIHYgaW5cbiAgLy8gYVtpOmhpXSBmb3IgdGhlIHJpZ2h0IHNpZGUuXG4gIGZ1bmN0aW9uIGJpc2VjdFJpZ2h0KGEsIHgsIGxvLCBoaSkge1xuICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgIGlmICh4IDwgZihhW21pZF0pKSBoaSA9IG1pZDtcbiAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBiaXNlY3RSaWdodC5yaWdodCA9IGJpc2VjdFJpZ2h0O1xuICBiaXNlY3RSaWdodC5sZWZ0ID0gYmlzZWN0TGVmdDtcbiAgcmV0dXJuIGJpc2VjdFJpZ2h0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJpc2VjdF9ieShjcm9zc2ZpbHRlcl9pZGVudGl0eSk7XG5tb2R1bGUuZXhwb3J0cy5ieSA9IGJpc2VjdF9ieTsgLy8gYXNzaWduIHRoZSByYXcgZnVuY3Rpb24gdG8gdGhlIGV4cG9ydCBhcyB3ZWxsXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///02ef\n')},"072d":function(module,exports){eval("/**\n * Server side filtering\n *\n * Implementation of a dataset backed by a server, which in turn uses fi. postgreSQL\n * Fully asynchronous, based on socketIO.\n *\n * Most methods below result in a message with the methodName and a data object, containing:\n *  * `datasets` and `dataview`, or `dataset`\n *  * `filterId` or `facetId`\n *\n * Data can be requested using the dataview.getData() method\n * responds with a `newData` message containing `filterId` and `data`.\n *\n * @module driver/server\n */\n\n/**\n * Autoconfigure a dataset\n *\n * @param {Dataset} dataset\n */\nfunction scan (dataset) {\n  // Dataset -> Datasets -> Spot\n  var spot = dataset.collection.parent;\n\n  if (spot.isLockedDown) {\n    // spot-server will not respond so no use requesting a scan\n    return;\n  }\n\n  spot.socket.emit('scanData', {\n    dataset: dataset.toJSON()\n  });\n}\n\n/**\n * setMinMax sets the range of a continuous or time facet\n *\n * @param {Dataset} dataset\n * @param {Facet} facet\n */\nfunction setMinMax (dataset, facet) {\n  // Dataset -> Datasets -> Spot\n  var spot = dataset.collection.parent;\n\n  if (spot.isLockedDown) {\n    spot.socket.emit('setMinMax', {\n      datasetId: dataset.getId(),\n      facetId: facet.getId()\n    });\n  } else {\n    spot.socket.emit('setMinMax', {\n      datasetId: dataset.getId(),\n      dataset: dataset.toJSON(),\n      facetId: facet.getId()\n    });\n  }\n}\n\n/**\n * setCategories finds finds all values on an ordinal (categorial) axis\n * Updates the categorialTransform of the facet\n *\n * @param {Dataset} dataset\n * @param {Facet} facet\n */\nfunction setCategories (dataset, facet) {\n  // Dataset -> Datasets -> Spot\n  var spot = dataset.collection.parent;\n\n  facet.categorialTransform.rules.reset();\n  if (spot.isLockedDown) {\n    spot.socket.emit('setCategories', {\n      datasetId: dataset.getId(),\n      facetId: facet.getId()\n    });\n  } else {\n    spot.socket.emit('setCategories', {\n      datasetId: dataset.getId(),\n      dataset: dataset.toJSON(),\n      facetId: facet.getId()\n    });\n  }\n}\n\n/**\n * Calculate 100 percentiles (ie. 1,2,3,4 etc.), and initialize the `facet.continuousTransform`\n *\n * @param {Dataset} dataset\n * @param {Facet} facet\n */\nfunction setPercentiles (dataset, facet) {\n  // Dataset -> Datasets -> Spot\n  var spot = dataset.collection.parent;\n\n  if (spot.isLockedDown) {\n    spot.socket.emit('setPercentiles', {\n      datasetId: dataset.getId(),\n      facetId: facet.getId()\n    });\n  } else {\n    spot.socket.emit('setPercentiles', {\n      datasetId: dataset.getId(),\n      dataset: dataset.toJSON(),\n      facetId: facet.getId()\n    });\n  }\n}\n\n/**\n * Initialize the data filter, and construct the getData callback function on the filter.\n * @param {Dataview} dataview\n * @param {Filter} filter\n */\nfunction initDataFilter (dataview, filter) {\n  // as the SQL server implementation is stateless, nothing to do here\n}\n\n/**\n * The opposite or initDataFilter, it should remove the filter and deallocate other configuration\n * related to the filter.\n * @param {Filter} filter\n */\nfunction releaseDataFilter (filter) {\n  // as the SQL server implementation is stateless, nothing to do here\n}\n\n/**\n * Change the filter parameters for an initialized filter\n * @param {Filter} filter\n */\nfunction updateDataFilter (filter) {\n  // as the SQL server implementation is stateless, nothing to do here\n}\n\n/**\n * Get data for every filter, and trigger a 'newData' event\n *\n * Returns a Promise that resolves to the dataview when all data and metadata has been updated\n *\n * @param {Dataview} dataview\n * @returns {Promise}\n */\nfunction getData (dataview) {\n  var spot = dataview.parent;\n\n  return new Promise(function (resolve, reject) {\n    if (spot.isLockedDown) {\n      spot.socket.emit('getData', {\n        dataview: dataview.toJSON()\n      });\n    } else {\n      spot.socket.emit('getData', {\n        datasets: spot.cachedDatasets,\n        dataview: dataview.toJSON()\n      });\n    }\n\n    dataview.once('newMetaData', function () {\n      resolve(dataview);\n    });\n  });\n}\n\nmodule.exports = {\n  driverType: 'server',\n  scan: scan,\n  setMinMax: setMinMax,\n  setCategories: setCategories,\n  setPercentiles: setPercentiles,\n  initDataFilter: initDataFilter,\n  releaseDataFilter: releaseDataFilter,\n  updateDataFilter: updateDataFilter,\n  getData: getData\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMDcyZC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZHJpdmVyL3NlcnZlci5qcz9lMzc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2VydmVyIHNpZGUgZmlsdGVyaW5nXG4gKlxuICogSW1wbGVtZW50YXRpb24gb2YgYSBkYXRhc2V0IGJhY2tlZCBieSBhIHNlcnZlciwgd2hpY2ggaW4gdHVybiB1c2VzIGZpLiBwb3N0Z3JlU1FMXG4gKiBGdWxseSBhc3luY2hyb25vdXMsIGJhc2VkIG9uIHNvY2tldElPLlxuICpcbiAqIE1vc3QgbWV0aG9kcyBiZWxvdyByZXN1bHQgaW4gYSBtZXNzYWdlIHdpdGggdGhlIG1ldGhvZE5hbWUgYW5kIGEgZGF0YSBvYmplY3QsIGNvbnRhaW5pbmc6XG4gKiAgKiBgZGF0YXNldHNgIGFuZCBgZGF0YXZpZXdgLCBvciBgZGF0YXNldGBcbiAqICAqIGBmaWx0ZXJJZGAgb3IgYGZhY2V0SWRgXG4gKlxuICogRGF0YSBjYW4gYmUgcmVxdWVzdGVkIHVzaW5nIHRoZSBkYXRhdmlldy5nZXREYXRhKCkgbWV0aG9kXG4gKiByZXNwb25kcyB3aXRoIGEgYG5ld0RhdGFgIG1lc3NhZ2UgY29udGFpbmluZyBgZmlsdGVySWRgIGFuZCBgZGF0YWAuXG4gKlxuICogQG1vZHVsZSBkcml2ZXIvc2VydmVyXG4gKi9cblxuLyoqXG4gKiBBdXRvY29uZmlndXJlIGEgZGF0YXNldFxuICpcbiAqIEBwYXJhbSB7RGF0YXNldH0gZGF0YXNldFxuICovXG5mdW5jdGlvbiBzY2FuIChkYXRhc2V0KSB7XG4gIC8vIERhdGFzZXQgLT4gRGF0YXNldHMgLT4gU3BvdFxuICB2YXIgc3BvdCA9IGRhdGFzZXQuY29sbGVjdGlvbi5wYXJlbnQ7XG5cbiAgaWYgKHNwb3QuaXNMb2NrZWREb3duKSB7XG4gICAgLy8gc3BvdC1zZXJ2ZXIgd2lsbCBub3QgcmVzcG9uZCBzbyBubyB1c2UgcmVxdWVzdGluZyBhIHNjYW5cbiAgICByZXR1cm47XG4gIH1cblxuICBzcG90LnNvY2tldC5lbWl0KCdzY2FuRGF0YScsIHtcbiAgICBkYXRhc2V0OiBkYXRhc2V0LnRvSlNPTigpXG4gIH0pO1xufVxuXG4vKipcbiAqIHNldE1pbk1heCBzZXRzIHRoZSByYW5nZSBvZiBhIGNvbnRpbnVvdXMgb3IgdGltZSBmYWNldFxuICpcbiAqIEBwYXJhbSB7RGF0YXNldH0gZGF0YXNldFxuICogQHBhcmFtIHtGYWNldH0gZmFjZXRcbiAqL1xuZnVuY3Rpb24gc2V0TWluTWF4IChkYXRhc2V0LCBmYWNldCkge1xuICAvLyBEYXRhc2V0IC0+IERhdGFzZXRzIC0+IFNwb3RcbiAgdmFyIHNwb3QgPSBkYXRhc2V0LmNvbGxlY3Rpb24ucGFyZW50O1xuXG4gIGlmIChzcG90LmlzTG9ja2VkRG93bikge1xuICAgIHNwb3Quc29ja2V0LmVtaXQoJ3NldE1pbk1heCcsIHtcbiAgICAgIGRhdGFzZXRJZDogZGF0YXNldC5nZXRJZCgpLFxuICAgICAgZmFjZXRJZDogZmFjZXQuZ2V0SWQoKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNwb3Quc29ja2V0LmVtaXQoJ3NldE1pbk1heCcsIHtcbiAgICAgIGRhdGFzZXRJZDogZGF0YXNldC5nZXRJZCgpLFxuICAgICAgZGF0YXNldDogZGF0YXNldC50b0pTT04oKSxcbiAgICAgIGZhY2V0SWQ6IGZhY2V0LmdldElkKClcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIHNldENhdGVnb3JpZXMgZmluZHMgZmluZHMgYWxsIHZhbHVlcyBvbiBhbiBvcmRpbmFsIChjYXRlZ29yaWFsKSBheGlzXG4gKiBVcGRhdGVzIHRoZSBjYXRlZ29yaWFsVHJhbnNmb3JtIG9mIHRoZSBmYWNldFxuICpcbiAqIEBwYXJhbSB7RGF0YXNldH0gZGF0YXNldFxuICogQHBhcmFtIHtGYWNldH0gZmFjZXRcbiAqL1xuZnVuY3Rpb24gc2V0Q2F0ZWdvcmllcyAoZGF0YXNldCwgZmFjZXQpIHtcbiAgLy8gRGF0YXNldCAtPiBEYXRhc2V0cyAtPiBTcG90XG4gIHZhciBzcG90ID0gZGF0YXNldC5jb2xsZWN0aW9uLnBhcmVudDtcblxuICBmYWNldC5jYXRlZ29yaWFsVHJhbnNmb3JtLnJ1bGVzLnJlc2V0KCk7XG4gIGlmIChzcG90LmlzTG9ja2VkRG93bikge1xuICAgIHNwb3Quc29ja2V0LmVtaXQoJ3NldENhdGVnb3JpZXMnLCB7XG4gICAgICBkYXRhc2V0SWQ6IGRhdGFzZXQuZ2V0SWQoKSxcbiAgICAgIGZhY2V0SWQ6IGZhY2V0LmdldElkKClcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzcG90LnNvY2tldC5lbWl0KCdzZXRDYXRlZ29yaWVzJywge1xuICAgICAgZGF0YXNldElkOiBkYXRhc2V0LmdldElkKCksXG4gICAgICBkYXRhc2V0OiBkYXRhc2V0LnRvSlNPTigpLFxuICAgICAgZmFjZXRJZDogZmFjZXQuZ2V0SWQoKVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIDEwMCBwZXJjZW50aWxlcyAoaWUuIDEsMiwzLDQgZXRjLiksIGFuZCBpbml0aWFsaXplIHRoZSBgZmFjZXQuY29udGludW91c1RyYW5zZm9ybWBcbiAqXG4gKiBAcGFyYW0ge0RhdGFzZXR9IGRhdGFzZXRcbiAqIEBwYXJhbSB7RmFjZXR9IGZhY2V0XG4gKi9cbmZ1bmN0aW9uIHNldFBlcmNlbnRpbGVzIChkYXRhc2V0LCBmYWNldCkge1xuICAvLyBEYXRhc2V0IC0+IERhdGFzZXRzIC0+IFNwb3RcbiAgdmFyIHNwb3QgPSBkYXRhc2V0LmNvbGxlY3Rpb24ucGFyZW50O1xuXG4gIGlmIChzcG90LmlzTG9ja2VkRG93bikge1xuICAgIHNwb3Quc29ja2V0LmVtaXQoJ3NldFBlcmNlbnRpbGVzJywge1xuICAgICAgZGF0YXNldElkOiBkYXRhc2V0LmdldElkKCksXG4gICAgICBmYWNldElkOiBmYWNldC5nZXRJZCgpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc3BvdC5zb2NrZXQuZW1pdCgnc2V0UGVyY2VudGlsZXMnLCB7XG4gICAgICBkYXRhc2V0SWQ6IGRhdGFzZXQuZ2V0SWQoKSxcbiAgICAgIGRhdGFzZXQ6IGRhdGFzZXQudG9KU09OKCksXG4gICAgICBmYWNldElkOiBmYWNldC5nZXRJZCgpXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBkYXRhIGZpbHRlciwgYW5kIGNvbnN0cnVjdCB0aGUgZ2V0RGF0YSBjYWxsYmFjayBmdW5jdGlvbiBvbiB0aGUgZmlsdGVyLlxuICogQHBhcmFtIHtEYXRhdmlld30gZGF0YXZpZXdcbiAqIEBwYXJhbSB7RmlsdGVyfSBmaWx0ZXJcbiAqL1xuZnVuY3Rpb24gaW5pdERhdGFGaWx0ZXIgKGRhdGF2aWV3LCBmaWx0ZXIpIHtcbiAgLy8gYXMgdGhlIFNRTCBzZXJ2ZXIgaW1wbGVtZW50YXRpb24gaXMgc3RhdGVsZXNzLCBub3RoaW5nIHRvIGRvIGhlcmVcbn1cblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb3IgaW5pdERhdGFGaWx0ZXIsIGl0IHNob3VsZCByZW1vdmUgdGhlIGZpbHRlciBhbmQgZGVhbGxvY2F0ZSBvdGhlciBjb25maWd1cmF0aW9uXG4gKiByZWxhdGVkIHRvIHRoZSBmaWx0ZXIuXG4gKiBAcGFyYW0ge0ZpbHRlcn0gZmlsdGVyXG4gKi9cbmZ1bmN0aW9uIHJlbGVhc2VEYXRhRmlsdGVyIChmaWx0ZXIpIHtcbiAgLy8gYXMgdGhlIFNRTCBzZXJ2ZXIgaW1wbGVtZW50YXRpb24gaXMgc3RhdGVsZXNzLCBub3RoaW5nIHRvIGRvIGhlcmVcbn1cblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGZpbHRlciBwYXJhbWV0ZXJzIGZvciBhbiBpbml0aWFsaXplZCBmaWx0ZXJcbiAqIEBwYXJhbSB7RmlsdGVyfSBmaWx0ZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlRGF0YUZpbHRlciAoZmlsdGVyKSB7XG4gIC8vIGFzIHRoZSBTUUwgc2VydmVyIGltcGxlbWVudGF0aW9uIGlzIHN0YXRlbGVzcywgbm90aGluZyB0byBkbyBoZXJlXG59XG5cbi8qKlxuICogR2V0IGRhdGEgZm9yIGV2ZXJ5IGZpbHRlciwgYW5kIHRyaWdnZXIgYSAnbmV3RGF0YScgZXZlbnRcbiAqXG4gKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBkYXRhdmlldyB3aGVuIGFsbCBkYXRhIGFuZCBtZXRhZGF0YSBoYXMgYmVlbiB1cGRhdGVkXG4gKlxuICogQHBhcmFtIHtEYXRhdmlld30gZGF0YXZpZXdcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhdmlldykge1xuICB2YXIgc3BvdCA9IGRhdGF2aWV3LnBhcmVudDtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmIChzcG90LmlzTG9ja2VkRG93bikge1xuICAgICAgc3BvdC5zb2NrZXQuZW1pdCgnZ2V0RGF0YScsIHtcbiAgICAgICAgZGF0YXZpZXc6IGRhdGF2aWV3LnRvSlNPTigpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BvdC5zb2NrZXQuZW1pdCgnZ2V0RGF0YScsIHtcbiAgICAgICAgZGF0YXNldHM6IHNwb3QuY2FjaGVkRGF0YXNldHMsXG4gICAgICAgIGRhdGF2aWV3OiBkYXRhdmlldy50b0pTT04oKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGF0YXZpZXcub25jZSgnbmV3TWV0YURhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXNvbHZlKGRhdGF2aWV3KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkcml2ZXJUeXBlOiAnc2VydmVyJyxcbiAgc2Nhbjogc2NhbixcbiAgc2V0TWluTWF4OiBzZXRNaW5NYXgsXG4gIHNldENhdGVnb3JpZXM6IHNldENhdGVnb3JpZXMsXG4gIHNldFBlcmNlbnRpbGVzOiBzZXRQZXJjZW50aWxlcyxcbiAgaW5pdERhdGFGaWx0ZXI6IGluaXREYXRhRmlsdGVyLFxuICByZWxlYXNlRGF0YUZpbHRlcjogcmVsZWFzZURhdGFGaWx0ZXIsXG4gIHVwZGF0ZURhdGFGaWx0ZXI6IHVwZGF0ZURhdGFGaWx0ZXIsXG4gIGdldERhdGE6IGdldERhdGFcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///072d\n")},"09c5":function(module,exports,__webpack_require__){eval("/**\n * A single control point for a continuous transform\n *\n * @class ControlPoint\n */\nvar BaseModel = __webpack_require__(/*! ../util/base */ \"3902\");\n\n// Data structure for mapping categorial (and textual) data on groups\nmodule.exports = BaseModel.extend({\n  props: {\n    /**\n     * Value\n     * @type {number}\n     * @memberof! ContinuousRule\n     */\n    x: 'number',\n\n    /**\n     * Transformed value\n     * @type {number}\n     * @memberof! ContinuousRule\n     */\n    fx: 'number'\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMDljNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZmFjZXQvY29udHJvbC1wb2ludC5qcz82OTJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBzaW5nbGUgY29udHJvbCBwb2ludCBmb3IgYSBjb250aW51b3VzIHRyYW5zZm9ybVxuICpcbiAqIEBjbGFzcyBDb250cm9sUG9pbnRcbiAqL1xudmFyIEJhc2VNb2RlbCA9IHJlcXVpcmUoJy4uL3V0aWwvYmFzZScpO1xuXG4vLyBEYXRhIHN0cnVjdHVyZSBmb3IgbWFwcGluZyBjYXRlZ29yaWFsIChhbmQgdGV4dHVhbCkgZGF0YSBvbiBncm91cHNcbm1vZHVsZS5leHBvcnRzID0gQmFzZU1vZGVsLmV4dGVuZCh7XG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICogVmFsdWVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiEgQ29udGludW91c1J1bGVcbiAgICAgKi9cbiAgICB4OiAnbnVtYmVyJyxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybWVkIHZhbHVlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YhIENvbnRpbnVvdXNSdWxlXG4gICAgICovXG4gICAgZng6ICdudW1iZXInXG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///09c5\n")},"0b10":function(module,exports){eval("/**\n * Helpers.\n */\n\nvar s = 1000\nvar m = s * 60\nvar h = m * 60\nvar d = h * 24\nvar y = d * 365.25\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {}\n  var type = typeof val\n  if (type === 'string' && val.length > 0) {\n    return parse(val)\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ?\n\t\t\tfmtLong(val) :\n\t\t\tfmtShort(val)\n  }\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))\n}\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str)\n  if (str.length > 10000) {\n    return\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)\n  if (!match) {\n    return\n  }\n  var n = parseFloat(match[1])\n  var type = (match[2] || 'ms').toLowerCase()\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n\n    default:\n      return undefined\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd'\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h'\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm'\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's'\n  }\n  return ms + 'ms'\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms'\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMGIxMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/YjZlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwXG52YXIgbSA9IHMgKiA2MFxudmFyIGggPSBtICogNjBcbnZhciBkID0gaCAqIDI0XG52YXIgeSA9IGQgKiAzNjUuMjVcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWxcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbClcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgP1xuXHRcdFx0Zm10TG9uZyh2YWwpIDpcblx0XHRcdGZtdFNob3J0KHZhbClcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArIEpTT04uc3RyaW5naWZ5KHZhbCkpXG59XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKVxuICBpZiAoc3RyLmxlbmd0aCA+IDEwMDAwKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhzdHIpXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pXG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKClcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZFxuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaFxuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbVxuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogc1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCdcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCdcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSdcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncydcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnXG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnXG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWVcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0b10\n")},"0d97":function(module,exports,__webpack_require__){eval("/**\n * Module dependencies.\n */\n\nvar parser = __webpack_require__(/*! engine.io-parser */ \"aa6c\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"ee5b\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = Transport;\n\n/**\n * Transport abstract constructor.\n *\n * @param {Object} options.\n * @api private\n */\n\nfunction Transport (opts) {\n  this.path = opts.path;\n  this.hostname = opts.hostname;\n  this.port = opts.port;\n  this.secure = opts.secure;\n  this.query = opts.query;\n  this.timestampParam = opts.timestampParam;\n  this.timestampRequests = opts.timestampRequests;\n  this.readyState = '';\n  this.agent = opts.agent || false;\n  this.socket = opts.socket;\n  this.enablesXDR = opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n  this.forceNode = opts.forceNode;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n  this.localAddress = opts.localAddress;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Transport.prototype);\n\n/**\n * Emits an error.\n *\n * @param {String} str\n * @return {Transport} for chaining\n * @api public\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  var err = new Error(msg);\n  err.type = 'TransportError';\n  err.description = desc;\n  this.emit('error', err);\n  return this;\n};\n\n/**\n * Opens the transport.\n *\n * @api public\n */\n\nTransport.prototype.open = function () {\n  if ('closed' === this.readyState || '' === this.readyState) {\n    this.readyState = 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n\n/**\n * Sends multiple packets.\n *\n * @param {Array} packets\n * @api private\n */\n\nTransport.prototype.send = function (packets) {\n  if ('open' === this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n\n/**\n * Called upon open\n *\n * @api private\n */\n\nTransport.prototype.onOpen = function () {\n  this.readyState = 'open';\n  this.writable = true;\n  this.emit('open');\n};\n\n/**\n * Called with data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function (data) {\n  var packet = parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n\n/**\n * Called with a decoded packet.\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMGQ5Ny5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzPzMxMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gIHRoaXMubG9jYWxBZGRyZXNzID0gb3B0cy5sb2NhbEFkZHJlc3M7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFRyYW5zcG9ydC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIEVtaXRzIGFuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChtc2csIGRlc2MpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIudHlwZSA9ICdUcmFuc3BvcnRFcnJvcic7XG4gIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3BlbnMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcbiAgICB0aGlzLmRvT3BlbigpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMuZG9DbG9zZSgpO1xuICAgIHRoaXMub25DbG9zZSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIG11bHRpcGxlIHBhY2tldHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy53cml0ZShwYWNrZXRzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBub3Qgb3BlbicpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIG9wZW5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHBhY2tldCA9IHBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7XG4gIHRoaXMub25QYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggYSBkZWNvZGVkIHBhY2tldC5cbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0d97\n")},"0fc4":function(module,exports){eval('if (typeof Uint8Array !== "undefined") {\n  var crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  var crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  var crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  var crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  var crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error("invalid array width!");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error("invalid array width!");\n  return array;\n}\n\n// An arbitrarily-wide array of bitmasks\nfunction crossfilter_bitarray(n) {\n  this.length = n;\n  this.subarrays = 1;\n  this.width = 8;\n  this.masks = {\n    0: 0\n  }\n\n  this[0] = crossfilter_array8(n);\n}\n\ncrossfilter_bitarray.prototype.lengthen = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i] = crossfilter_arrayLengthen(this[i], n);\n  }\n  this.length = n;\n};\n\n// Reserve a new bit index in the array, returns {offset, one}\ncrossfilter_bitarray.prototype.add = function() {\n  var m, w, one, i, len;\n\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    m = this.masks[i];\n    w = this.width - (32 * i);\n    one = ~m & -~m;\n\n    if (w >= 32 && !one) {\n      continue;\n    }\n\n    if (w < 32 && (one & (1 << w))) {\n      // widen this subarray\n      this[i] = crossfilter_arrayWiden(this[i], w <<= 1);\n      this.width = 32 * i + w;\n    }\n\n    this.masks[i] |= one;\n\n    return {\n      offset: i,\n      one: one\n    };\n  }\n\n  // add a new subarray\n  this[this.subarrays] = crossfilter_array8(this.length);\n  this.masks[this.subarrays] = 1;\n  this.width += 8;\n  return {\n    offset: this.subarrays++,\n    one: 1\n  };\n};\n\n// Copy record from index src to index dest\ncrossfilter_bitarray.prototype.copy = function(dest, src) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    this[i][dest] = this[i][src];\n  }\n};\n\n// Truncate the array to the given length\ncrossfilter_bitarray.prototype.truncate = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    for (var j = this.length - 1; j >= n; j--) {\n      this[i][j] = 0;\n    }\n    this[i].length = n;\n  }\n  this.length = n;\n};\n\n// Checks that all bits for the given index are 0\ncrossfilter_bitarray.prototype.zero = function(n) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given index are 0 except for possibly one\ncrossfilter_bitarray.prototype.zeroExcept = function(n, offset, zero) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (i === offset ? this[i][n] & zero : this[i][n]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that all bits for the given indez are 0 except for the specified mask.\n// The mask should be an array of the same size as the filter subarrays width.\ncrossfilter_bitarray.prototype.zeroExceptMask = function(n, mask) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] & mask[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks that only the specified bit is set for the given index\ncrossfilter_bitarray.prototype.only = function(n, offset, one) {\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    if (this[i][n] != (i === offset ? one : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Checks that only the specified bit is set for the given index except for possibly one other\ncrossfilter_bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {\n  var mask;\n  var i, len;\n  for (i = 0, len = this.subarrays; i < len; ++i) {\n    mask = this[i][n];\n    if (i === offset)\n      mask &= zero;\n    if (mask != (i === onlyOffset ? onlyOne : 0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  array8: crossfilter_arrayUntyped,\n  array16: crossfilter_arrayUntyped,\n  array32: crossfilter_arrayUntyped,\n  arrayLengthen: crossfilter_arrayLengthenUntyped,\n  arrayWiden: crossfilter_arrayWidenUntyped,\n  bitarray: crossfilter_bitarray\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0fc4\n')},"108d":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ \"86e3\");\nvar Polling = __webpack_require__(/*! ./polling */ \"181d\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"ee5b\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"42bf\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('engine.io-client:polling-xhr');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty () {}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR (opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = opts.hostname !== global.location.hostname ||\n      port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  } else {\n    this.extraHeaders = opts.extraHeaders;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout;\n\n  // other options for Node.js client\n  opts.extraHeaders = this.extraHeaders;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function () {\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request (opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.requestTimeout = opts.requestTimeout;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck(true);\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n    if (this.supportsBinary) {\n      // This has to be done after open because Firefox is stupid\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n      xhr.responseType = 'arraybuffer';\n    }\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {}\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function () {\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n    } catch (e) {}\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      if (!this.supportsBinary) {\n        data = this.xhr.responseText;\n      } else {\n        try {\n          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\n        } catch (e) {\n          var ui8Arr = new Uint8Array(this.xhr.response);\n          var dataArray = [];\n          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\n            dataArray.push(ui8Arr[idx]);\n          }\n\n          data = String.fromCharCode.apply(null, dataArray);\n        }\n      }\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function () {\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (global.document) {\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler () {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///108d\n")},1278:function(module,exports,__webpack_require__){eval("/**\n * Selection\n * @module client/util-selection\n */\nvar misval = __webpack_require__(/*! ./misval */ \"bff6\");\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\n\n/*\n * Set a categorial 1D filter function\n * @param {Partition} partition\n */\nfunction filterFunctionCategorial1D (partition) {\n  var haystack = {};\n\n  if (!partition.selected || !partition.selected.length) {\n    partition.groups.forEach(function (group) {\n      haystack[group.value] = true;\n    });\n  } else {\n    partition.selected.forEach(function (h) {\n      haystack[h] = true;\n    });\n  }\n\n  return function (d) {\n    var needle = d;\n    if (!(needle instanceof Array)) {\n      needle = [d];\n    }\n\n    var selected = false;\n    needle.forEach(function (s) {\n      selected = selected | haystack[s];\n    });\n    return !!selected;\n  };\n}\n\n/*\n * Set a text filter function\n * @param {Partition} partition\n */\nfunction filterFunctionText (partition) {\n  var haystack = {};\n\n  // nothing selected, so all selected\n  if (partition.selected.length === 0) {\n    return function () {\n      return true;\n    };\n  }\n\n  partition.selected.forEach(function (h) {\n    haystack[h] = true;\n  });\n\n  return function (d) {\n    var needle = d;\n    if (!(needle instanceof Array)) {\n      needle = [d];\n    }\n\n    var selected = false;\n    needle.forEach(function (s) {\n      selected = selected | haystack[s];\n    });\n    return !!selected;\n  };\n}\n\n/*\n * Set a continuous 1D filter function\n * @param {Partition} partition\n */\nfunction filterFunctionContinuous1D (partition) {\n  var edge = partition.maxval;\n  var min;\n  var max;\n\n  if (!partition.selected || !partition.selected.length) {\n    min = partition.minval;\n    max = partition.maxval;\n    return function (d) {\n      return ((d >= min && d <= max) && (d !== misval));\n    };\n  } else {\n    min = partition.selected[0];\n    max = partition.selected[1];\n    return function (d) {\n      return ((d >= min && d < max) || ((d === edge) && (max === edge))) && (d !== misval);\n    };\n  }\n}\n\n/*\n * Set a continuous 1D filter function on a datetime dimension\n * @param {Partition} partition\n */\nfunction filterFunctionDatetime1D (partition) {\n  var edge = moment(partition.maxval);\n  var min;\n  var max;\n\n  if (!partition.selected || !partition.selected.length) {\n    min = moment(partition.minval);\n    max = moment(partition.maxval);\n\n    return function (d) {\n      var m = moment(d);\n      return (m !== misval) && !m.isBefore(min) && !m.isAfter(max);\n    };\n  } else {\n    min = moment(partition.selected[0]);\n    max = moment(partition.selected[1]);\n    return function (d) {\n      var m = moment(d);\n      return (m !== misval) && !min.isAfter(m) && (m.isBefore(max) || (max.isSame(edge) && max.isSame(m)));\n    };\n  }\n}\n\n/*\n * Set a continuous 1D filter function on a duration dimension\n * @param {Partition} partition\n */\nfunction filterFunctionDuration1D (partition) {\n  var edge = partition.maxval;\n  var min;\n  var max;\n\n  if (!partition.selected || !partition.selected.length) {\n    min = partition.minval;\n    max = partition.maxval;\n\n    return function (d) {\n      if (d === misval) {\n        return false;\n      }\n      var m = moment.duration(d);\n      return moment.isDuration(m) && m >= min && m <= max;\n    };\n  } else {\n    min = moment.duration(partition.selected[0]);\n    max = moment.duration(partition.selected[1]);\n    return function (d) {\n      if (d === misval) {\n        return false;\n      }\n      var m = moment.duration(d);\n      return moment.isDuration(m) && m >= min && (m < max || (m <= max && max >= edge));\n    };\n  }\n}\n\n/**\n * A filter function based for a single partition\n * @function\n * @returns {boolean} selected True if the datapoint is currently selected\n * @param {Partition} partition\n * @param {Object} datapoint\n * @memberof! Selection\n */\nfunction filterFunction (partition) {\n  if (partition.isCategorial || partition.isConstant) {\n    return filterFunctionCategorial1D(partition);\n  } else if (partition.isContinuous) {\n    return filterFunctionContinuous1D(partition);\n  } else if (partition.isDatetime) {\n    return filterFunctionDatetime1D(partition);\n  } else if (partition.isDuration) {\n    return filterFunctionDuration1D(partition);\n  } else if (partition.isText) {\n    return filterFunctionText(partition);\n  } else {\n    console.error('Cannot make filterfunction for partition', partition);\n  }\n}\n\n/*\n * @param {Group} group - The group to add or remove from the filter\n */\nfunction updateCategorial1D (partition, group) {\n  var selected = partition.selected;\n\n  if (selected.length === 0) {\n    // 1. none selected:\n    selected.push(group.value);\n  } else if (selected.length === 1) {\n    if (selected[0] === group.value) {\n      // 2. one selected and the group is the same:\n      selected.splice(0, selected.length);\n      partition.groups.forEach(function (g) {\n        if (g.value !== group.value) {\n          selected.push(g.value);\n        }\n      });\n    } else {\n      // 3. one selected and the group is different:\n      selected.push(group.value);\n    }\n  } else {\n    var i;\n    i = selected.indexOf(group.value);\n    if (i > -1) {\n      // 4. more than one selected and the group is in the selection:\n      selected.splice(i, 1);\n    } else {\n      // 5. more than one selected and the group is not in the selection:\n      selected.push(group.value);\n    }\n  }\n\n  // after add: if filters == groups, reset and dont filter\n  if (selected.length === partition.groups.length) {\n    selected.splice(0, selected.length);\n  }\n}\n\n/*\n * @param {Group} group - The group to add or remove from the filter\n */\nfunction updateText (partition, group) {\n  var selected = partition.selected;\n\n  var i;\n  i = selected.indexOf(group.value);\n  if (i > -1) {\n    // 1. in the selection, remove it\n    selected.splice(i, 1);\n  } else {\n    // 2. not in the selection, add it\n    selected.push(group.value);\n  }\n}\n\n/*\n * @param {Group} group - The group to add or remove from the filter\n */\nfunction updateContinuous1D (partition, group) {\n  var selected = partition.selected;\n\n  if (selected.length === 0) {\n    // nothing selected, start a range\n    selected[0] = group.min;\n    selected[1] = group.max;\n  } else if (group.min >= selected[1]) {\n    // clicked outside to the rigth of selection\n    selected[1] = group.max;\n  } else if (group.max <= selected[0]) {\n    // clicked outside to the left of selection\n    selected[0] = group.min;\n  } else {\n    // clicked inside selection\n    var d1, d2;\n    if (partition.groupLog) {\n      d1 = Math.abs(Math.log(selected[0]) - Math.log(group.min));\n      d2 = Math.abs(Math.log(selected[1]) - Math.log(group.max));\n    } else {\n      d1 = Math.abs(selected[0] - group.min);\n      d2 = Math.abs(selected[1] - group.max);\n    }\n    if (d1 < d2) {\n      selected[0] = group.min;\n    } else {\n      selected[1] = group.max;\n    }\n  }\n}\n\n/*\n * @param {Group} group - The group to add or remove from the filter\n */\nfunction updateDatetime1D (partition, group) {\n  var selected = partition.selected;\n\n  if (!selected || selected.length === 0) {\n    // nothing selected, start a range\n    selected[0] = group.min.toISOString();\n    selected[1] = group.max.toISOString();\n    return;\n  }\n\n  var selectionStart = moment(selected[0]);\n  var selectionEnd = moment(selected[1]);\n\n  if (!group.min.isBefore(selectionEnd)) {\n    // clicked outside to the rigth of selection\n    selected[1] = group.max.toISOString();\n  } else if (!group.max.isAfter(selectionStart)) {\n    // clicked outside to the left of selection\n    selected[0] = group.min.toISOString();\n  } else {\n    // clicked inside selection\n    var d1, d2;\n    d1 = Math.abs(selectionStart.diff(group.min));\n    d2 = Math.abs(selectionEnd.diff(group.max));\n\n    if (d1 < d2) {\n      selected[0] = group.max.toISOString();\n    } else {\n      selected[1] = group.min.toISOString();\n    }\n  }\n}\n\n/*\n * @param {Group} group - The group to add or remove from the filter\n */\nfunction updateDuration1D (partition, group) {\n  var selected = partition.selected;\n\n  if (selected.length === 0) {\n    // nothing selected, start a range\n    selected[0] = group.min.toISOString();\n    selected[1] = group.max.toISOString();\n    return;\n  }\n\n  var selectionStart = moment.duration(selected[0]);\n  var selectionEnd = moment.duration(selected[1]);\n\n  if (group.min >= selectionEnd) {\n    // clicked outside to the rigth of selection\n    selected[1] = group.max.toISOString();\n  } else if (group.max <= selectionStart) {\n    // clicked outside to the left of selection\n    selected[0] = group.min.toISOString();\n  } else {\n    // clicked inside selection\n    var d1, d2;\n    d1 = Math.abs(selectionStart - group.min);\n    d2 = Math.abs(selectionEnd - group.max);\n\n    if (d1 < d2) {\n      selected[0] = group.max.toISOString();\n    } else {\n      selected[1] = group.min.toISOString();\n    }\n  }\n}\n\n/**\n * Update the selection with a given group or interval\n * or, if no group is given, clear the selection.\n *\n * For categorial selections the following rules are used:\n * 1. none selected:\n *    add the group to the selection\n * 2. one selected and the group is the same:\n *    invert the selection\n * 3. one selected and the group is different:\n *    add the group to the selection\n * 4. more than one selected and the group is in the selection:\n *    remove the group from the selection\n * 5. more than one selected and the group is not in the selection:\n *    add the group to the selection\n *\n * For continuous selections the following rules are used:\n * 1. no range selected\n *    set the range equal to that of the group\n * 2. a range selected and the group is outside the selection:\n *    extend the selection to include the group\n * 3. a range selected and the group is inside the selection:\n *    set the endpoint closest to the group to that of the group\n *\n * @function\n * @param {Partition} Partition to update\n * @param {(string|number[])} Group or interval\n */\nfunction updateSelection (partition, group) {\n  if (!group) {\n    // Clear the selection (ie. all points are selected)\n    partition.selected.splice(0, partition.selected.length);\n  } else {\n    // Update the selection\n    if (partition.type === 'categorial' || partition.type === 'constant') {\n      updateCategorial1D(partition, group);\n    } else if (partition.type === 'continuous') {\n      updateContinuous1D(partition, group);\n    } else if (partition.type === 'datetime') {\n      updateDatetime1D(partition, group);\n    } else if (partition.type === 'duration') {\n      updateDuration1D(partition, group);\n    } else if (partition.type === 'text') {\n      updateText(partition, group);\n    } else {\n      console.error('Cannot update selection', partition.type);\n    }\n  }\n}\n\nmodule.exports = {\n  filterFunction: filterFunction,\n  updateSelection: updateSelection\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1278\n")},"181d":function(module,exports,__webpack_require__){eval("/**\n * Module dependencies.\n */\n\nvar Transport = __webpack_require__(/*! ../transport */ \"0d97\");\nvar parseqs = __webpack_require__(/*! parseqs */ \"914f\");\nvar parser = __webpack_require__(/*! engine.io-parser */ \"aa6c\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"42bf\");\nvar yeast = __webpack_require__(/*! yeast */ \"c16d\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function () {\n  var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ \"86e3\");\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause () {\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function () {\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function () {\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' === self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' === packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !== this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' === this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n\n  function close () {\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' === this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\n     ('http' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///181d\n")},"1e1f":function(module,exports,__webpack_require__){eval("\n/**\n * Module dependencies.\n */\n\nvar eio = __webpack_require__(/*! engine.io-client */ \"c59b\");\nvar Socket = __webpack_require__(/*! ./socket */ \"4c13\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"ee5b\");\nvar parser = __webpack_require__(/*! socket.io-parser */ \"6fba\");\nvar on = __webpack_require__(/*! ./on */ \"faaa\");\nvar bind = __webpack_require__(/*! component-bind */ \"b6f6\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('socket.io-client:manager');\nvar indexOf = __webpack_require__(/*! indexof */ \"3294\");\nvar Backoff = __webpack_require__(/*! backo2 */ \"f942\");\n\n/**\n * IE6+ hasOwnProperty\n */\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Module exports\n */\n\nmodule.exports = Manager;\n\n/**\n * `Manager` constructor.\n *\n * @param {String} engine instance or engine uri/opts\n * @param {Object} options\n * @api public\n */\n\nfunction Manager (uri, opts) {\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\n  if (uri && ('object' === typeof uri)) {\n    opts = uri;\n    uri = undefined;\n  }\n  opts = opts || {};\n\n  opts.path = opts.path || '/socket.io';\n  this.nsps = {};\n  this.subs = [];\n  this.opts = opts;\n  this.reconnection(opts.reconnection !== false);\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\n  this.backoff = new Backoff({\n    min: this.reconnectionDelay(),\n    max: this.reconnectionDelayMax(),\n    jitter: this.randomizationFactor()\n  });\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n  this.readyState = 'closed';\n  this.uri = uri;\n  this.connecting = [];\n  this.lastPing = null;\n  this.encoding = false;\n  this.packetBuffer = [];\n  this.encoder = new parser.Encoder();\n  this.decoder = new parser.Decoder();\n  this.autoConnect = opts.autoConnect !== false;\n  if (this.autoConnect) this.open();\n}\n\n/**\n * Propagate given event to sockets and emit on `this`\n *\n * @api private\n */\n\nManager.prototype.emitAll = function () {\n  this.emit.apply(this, arguments);\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n    }\n  }\n};\n\n/**\n * Update `socket.id` of all sockets\n *\n * @api private\n */\n\nManager.prototype.updateSocketIds = function () {\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].id = this.engine.id;\n    }\n  }\n};\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Manager.prototype);\n\n/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnection = function (v) {\n  if (!arguments.length) return this._reconnection;\n  this._reconnection = !!v;\n  return this;\n};\n\n/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} max reconnection attempts before giving up\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionAttempts = function (v) {\n  if (!arguments.length) return this._reconnectionAttempts;\n  this._reconnectionAttempts = v;\n  return this;\n};\n\n/**\n * Sets the delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelay = function (v) {\n  if (!arguments.length) return this._reconnectionDelay;\n  this._reconnectionDelay = v;\n  this.backoff && this.backoff.setMin(v);\n  return this;\n};\n\nManager.prototype.randomizationFactor = function (v) {\n  if (!arguments.length) return this._randomizationFactor;\n  this._randomizationFactor = v;\n  this.backoff && this.backoff.setJitter(v);\n  return this;\n};\n\n/**\n * Sets the maximum delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelayMax = function (v) {\n  if (!arguments.length) return this._reconnectionDelayMax;\n  this._reconnectionDelayMax = v;\n  this.backoff && this.backoff.setMax(v);\n  return this;\n};\n\n/**\n * Sets the connection timeout. `false` to disable\n *\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.timeout = function (v) {\n  if (!arguments.length) return this._timeout;\n  this._timeout = v;\n  return this;\n};\n\n/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @api private\n */\n\nManager.prototype.maybeReconnectOnOpen = function () {\n  // Only try to reconnect if it's the first time we're connecting\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\n    // keeps reconnection from firing twice for the same reconnection loop\n    this.reconnect();\n  }\n};\n\n/**\n * Sets the current transport `socket`.\n *\n * @param {Function} optional, callback\n * @return {Manager} self\n * @api public\n */\n\nManager.prototype.open =\nManager.prototype.connect = function (fn, opts) {\n  debug('readyState %s', this.readyState);\n  if (~this.readyState.indexOf('open')) return this;\n\n  debug('opening %s', this.uri);\n  this.engine = eio(this.uri, this.opts);\n  var socket = this.engine;\n  var self = this;\n  this.readyState = 'opening';\n  this.skipReconnect = false;\n\n  // emit `open`\n  var openSub = on(socket, 'open', function () {\n    self.onopen();\n    fn && fn();\n  });\n\n  // emit `connect_error`\n  var errorSub = on(socket, 'error', function (data) {\n    debug('connect_error');\n    self.cleanup();\n    self.readyState = 'closed';\n    self.emitAll('connect_error', data);\n    if (fn) {\n      var err = new Error('Connection error');\n      err.data = data;\n      fn(err);\n    } else {\n      // Only do this if there is no fn to handle the error\n      self.maybeReconnectOnOpen();\n    }\n  });\n\n  // emit `connect_timeout`\n  if (false !== this._timeout) {\n    var timeout = this._timeout;\n    debug('connect attempt will timeout after %d', timeout);\n\n    // set timer\n    var timer = setTimeout(function () {\n      debug('connect attempt timed out after %d', timeout);\n      openSub.destroy();\n      socket.close();\n      socket.emit('error', 'timeout');\n      self.emitAll('connect_timeout', timeout);\n    }, timeout);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n\n  this.subs.push(openSub);\n  this.subs.push(errorSub);\n\n  return this;\n};\n\n/**\n * Called upon transport open.\n *\n * @api private\n */\n\nManager.prototype.onopen = function () {\n  debug('open');\n\n  // clear old subs\n  this.cleanup();\n\n  // mark as open\n  this.readyState = 'open';\n  this.emit('open');\n\n  // add new subs\n  var socket = this.engine;\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n};\n\n/**\n * Called upon a ping.\n *\n * @api private\n */\n\nManager.prototype.onping = function () {\n  this.lastPing = new Date();\n  this.emitAll('ping');\n};\n\n/**\n * Called upon a packet.\n *\n * @api private\n */\n\nManager.prototype.onpong = function () {\n  this.emitAll('pong', new Date() - this.lastPing);\n};\n\n/**\n * Called with data.\n *\n * @api private\n */\n\nManager.prototype.ondata = function (data) {\n  this.decoder.add(data);\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nManager.prototype.ondecoded = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon socket error.\n *\n * @api private\n */\n\nManager.prototype.onerror = function (err) {\n  debug('error', err);\n  this.emitAll('error', err);\n};\n\n/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @api public\n */\n\nManager.prototype.socket = function (nsp, opts) {\n  var socket = this.nsps[nsp];\n  if (!socket) {\n    socket = new Socket(this, nsp, opts);\n    this.nsps[nsp] = socket;\n    var self = this;\n    socket.on('connecting', onConnecting);\n    socket.on('connect', function () {\n      socket.id = self.engine.id;\n    });\n\n    if (this.autoConnect) {\n      // manually call here since connecting evnet is fired before listening\n      onConnecting();\n    }\n  }\n\n  function onConnecting () {\n    if (!~indexOf(self.connecting, socket)) {\n      self.connecting.push(socket);\n    }\n  }\n\n  return socket;\n};\n\n/**\n * Called upon a socket close.\n *\n * @param {Socket} socket\n */\n\nManager.prototype.destroy = function (socket) {\n  var index = indexOf(this.connecting, socket);\n  if (~index) this.connecting.splice(index, 1);\n  if (this.connecting.length) return;\n\n  this.close();\n};\n\n/**\n * Writes a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nManager.prototype.packet = function (packet) {\n  debug('writing packet %j', packet);\n  var self = this;\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\n\n  if (!self.encoding) {\n    // encode, then write to engine with result\n    self.encoding = true;\n    this.encoder.encode(packet, function (encodedPackets) {\n      for (var i = 0; i < encodedPackets.length; i++) {\n        self.engine.write(encodedPackets[i], packet.options);\n      }\n      self.encoding = false;\n      self.processPacketQueue();\n    });\n  } else { // add packet to the queue\n    self.packetBuffer.push(packet);\n  }\n};\n\n/**\n * If packet buffer is non-empty, begins encoding the\n * next packet in line.\n *\n * @api private\n */\n\nManager.prototype.processPacketQueue = function () {\n  if (this.packetBuffer.length > 0 && !this.encoding) {\n    var pack = this.packetBuffer.shift();\n    this.packet(pack);\n  }\n};\n\n/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @api private\n */\n\nManager.prototype.cleanup = function () {\n  debug('cleanup');\n\n  var subsLength = this.subs.length;\n  for (var i = 0; i < subsLength; i++) {\n    var sub = this.subs.shift();\n    sub.destroy();\n  }\n\n  this.packetBuffer = [];\n  this.encoding = false;\n  this.lastPing = null;\n\n  this.decoder.destroy();\n};\n\n/**\n * Close the current socket.\n *\n * @api private\n */\n\nManager.prototype.close =\nManager.prototype.disconnect = function () {\n  debug('disconnect');\n  this.skipReconnect = true;\n  this.reconnecting = false;\n  if ('opening' === this.readyState) {\n    // `onclose` will not fire because\n    // an open event never happened\n    this.cleanup();\n  }\n  this.backoff.reset();\n  this.readyState = 'closed';\n  if (this.engine) this.engine.close();\n};\n\n/**\n * Called upon engine close.\n *\n * @api private\n */\n\nManager.prototype.onclose = function (reason) {\n  debug('onclose');\n\n  this.cleanup();\n  this.backoff.reset();\n  this.readyState = 'closed';\n  this.emit('close', reason);\n\n  if (this._reconnection && !this.skipReconnect) {\n    this.reconnect();\n  }\n};\n\n/**\n * Attempt a reconnection.\n *\n * @api private\n */\n\nManager.prototype.reconnect = function () {\n  if (this.reconnecting || this.skipReconnect) return this;\n\n  var self = this;\n\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\n    debug('reconnect failed');\n    this.backoff.reset();\n    this.emitAll('reconnect_failed');\n    this.reconnecting = false;\n  } else {\n    var delay = this.backoff.duration();\n    debug('will wait %dms before reconnect attempt', delay);\n\n    this.reconnecting = true;\n    var timer = setTimeout(function () {\n      if (self.skipReconnect) return;\n\n      debug('attempting reconnect');\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\n      self.emitAll('reconnecting', self.backoff.attempts);\n\n      // check again for the case socket closed in above events\n      if (self.skipReconnect) return;\n\n      self.open(function (err) {\n        if (err) {\n          debug('reconnect attempt error');\n          self.reconnecting = false;\n          self.reconnect();\n          self.emitAll('reconnect_error', err.data);\n        } else {\n          debug('reconnect success');\n          self.onreconnect();\n        }\n      });\n    }, delay);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n};\n\n/**\n * Called upon successful reconnect.\n *\n * @api private\n */\n\nManager.prototype.onreconnect = function () {\n  var attempt = this.backoff.attempts;\n  this.reconnecting = false;\n  this.backoff.reset();\n  this.updateSocketIds();\n  this.emitAll('reconnect', attempt);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1e1f\n")},"1ed2":function(module,exports){eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = '' + str;\n  if (str.length > 10000) return;\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMWVkMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/NDg1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKXtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgdmFsKSByZXR1cm4gcGFyc2UodmFsKTtcbiAgcmV0dXJuIG9wdGlvbnMubG9uZ1xuICAgID8gbG9uZyh2YWwpXG4gICAgOiBzaG9ydCh2YWwpO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9ICcnICsgc3RyO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMDAwKSByZXR1cm47XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoc3RyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuO1xuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgaWYgKG1zID49IGgpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIGlmIChtcyA+PSBtKSByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICBpZiAobXMgPj0gcykgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpXG4gICAgfHwgcGx1cmFsKG1zLCBoLCAnaG91cicpXG4gICAgfHwgcGx1cmFsKG1zLCBtLCAnbWludXRlJylcbiAgICB8fCBwbHVyYWwobXMsIHMsICdzZWNvbmQnKVxuICAgIHx8IG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHJldHVybjtcbiAgaWYgKG1zIDwgbiAqIDEuNSkgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1ed2\n")},"23b1":function(module,exports,__webpack_require__){eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug.debug = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"0b10\");\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting\n    args = exports.formatArgs.apply(self, args);\n\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/[\\\\^$+?.()|[\\]{}]/g, '\\\\$&').replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjNiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZGVidWcvZGVidWcuanM/NjMxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZGVidWcuZGVidWcgPSBkZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXJjYXNlZCBsZXR0ZXIsIGkuZS4gXCJuXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXNseSBhc3NpZ25lZCBjb2xvci5cbiAqL1xuXG52YXIgcHJldkNvbG9yID0gMDtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcigpIHtcbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW3ByZXZDb2xvcisrICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVidWcobmFtZXNwYWNlKSB7XG5cbiAgLy8gZGVmaW5lIHRoZSBgZGlzYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG4gIH1cbiAgZGlzYWJsZWQuZW5hYmxlZCA9IGZhbHNlO1xuXG4gIC8vIGRlZmluZSB0aGUgYGVuYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZW5hYmxlZCgpIHtcblxuICAgIHZhciBzZWxmID0gZW5hYmxlZDtcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gYWRkIHRoZSBgY29sb3JgIGlmIG5vdCBzZXRcbiAgICBpZiAobnVsbCA9PSBzZWxmLnVzZUNvbG9ycykgc2VsZi51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICAgIGlmIChudWxsID09IHNlbGYuY29sb3IgJiYgc2VsZi51c2VDb2xvcnMpIHNlbGYuY29sb3IgPSBzZWxlY3RDb2xvcigpO1xuXG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVvXG4gICAgICBhcmdzID0gWyclbyddLmNvbmNhdChhcmdzKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16JV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmdcbiAgICBhcmdzID0gZXhwb3J0cy5mb3JtYXRBcmdzLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZW5hYmxlZC5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuICBlbmFibGVkLmVuYWJsZWQgPSB0cnVlO1xuXG4gIHZhciBmbiA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpID8gZW5hYmxlZCA6IGRpc2FibGVkO1xuXG4gIGZuLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblxuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgdmFyIHNwbGl0ID0gKG5hbWVzcGFjZXMgfHwgJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9bXFxcXF4kKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJykucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23b1\n")},"2dce":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Module requirements.\n */\n\nvar Polling = __webpack_require__(/*! ./polling */ \"181d\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"42bf\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline = /\\n/g;\nvar rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query = this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    if (!global.___eio) global.___eio = [];\n    callbacks = global.___eio;\n  }\n\n  // callback identifier\n  this.index = callbacks.length;\n\n  // add callback to jsonp global\n  var self = this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j = this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (global.document && global.addEventListener) {\n    global.addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror = empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary = false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose = function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form = null;\n    this.iframe = null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll = function () {\n  var self = this;\n  var script = document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  script.async = true;\n  script.src = this.uri();\n  script.onerror = function (e) {\n    self.onError('jsonp poll error', e);\n  };\n\n  var insertAt = document.getElementsByTagName('script')[0];\n  if (insertAt) {\n    insertAt.parentNode.insertBefore(script, insertAt);\n  } else {\n    (document.head || document.body).appendChild(script);\n  }\n  this.script = script;\n\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite = function (data, fn) {\n  var self = this;\n\n  if (!this.form) {\n    var form = document.createElement('form');\n    var area = document.createElement('textarea');\n    var id = this.iframeId = 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className = 'socketio';\n    form.style.position = 'absolute';\n    form.style.top = '-1000px';\n    form.style.left = '-1000px';\n    form.target = id;\n    form.method = 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name = 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form = form;\n    this.area = area;\n  }\n\n  this.form.action = this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n      var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n      iframe = document.createElement(html);\n    } catch (e) {\n      iframe = document.createElement('iframe');\n      iframe.name = self.iframeId;\n      iframe.src = 'javascript:0';\n    }\n\n    iframe.id = self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe = iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data = data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value = data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch (e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange = function () {\n      if (self.iframe.readyState === 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload = complete;\n  }\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2dce\n")},3902:function(module,exports,__webpack_require__){eval("/**\n * Base class\n *\n * Implements unique ID per instance. It is set once, and can not be updated.\n * An ID is generated during initialization; however it is included in the (de-)serializing of the object.\n * @class Base\n */\nvar AmpersandModel = __webpack_require__(/*! ampersand-model */ \"3bfc\");\n\n// see discussion here: https://gist.github.com/gordonbrander/2230317\nfunction uniqueID () {\n  function chr4 () {\n    return Math.random().toString(16).slice(-4);\n  }\n  return chr4() + chr4() +\n    '-' + chr4() +\n    '-' + chr4() +\n    '-' + chr4() +\n    '-' + chr4() + chr4() + chr4();\n}\n\nmodule.exports = AmpersandModel.extend({\n  props: {\n    /**\n     * Unique ID for this class\n     * @memberof! Base\n     * @readonly\n     * @type {ID}\n     */\n    id: {\n      type: 'string',\n      default: function () {\n        return uniqueID();\n      },\n      setonce: true\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkwMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvdXRpbC9iYXNlLmpzP2NlYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNlIGNsYXNzXG4gKlxuICogSW1wbGVtZW50cyB1bmlxdWUgSUQgcGVyIGluc3RhbmNlLiBJdCBpcyBzZXQgb25jZSwgYW5kIGNhbiBub3QgYmUgdXBkYXRlZC5cbiAqIEFuIElEIGlzIGdlbmVyYXRlZCBkdXJpbmcgaW5pdGlhbGl6YXRpb247IGhvd2V2ZXIgaXQgaXMgaW5jbHVkZWQgaW4gdGhlIChkZS0pc2VyaWFsaXppbmcgb2YgdGhlIG9iamVjdC5cbiAqIEBjbGFzcyBCYXNlXG4gKi9cbnZhciBBbXBlcnNhbmRNb2RlbCA9IHJlcXVpcmUoJ2FtcGVyc2FuZC1tb2RlbCcpO1xuXG4vLyBzZWUgZGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nb3Jkb25icmFuZGVyLzIyMzAzMTdcbmZ1bmN0aW9uIHVuaXF1ZUlEICgpIHtcbiAgZnVuY3Rpb24gY2hyNCAoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnNsaWNlKC00KTtcbiAgfVxuICByZXR1cm4gY2hyNCgpICsgY2hyNCgpICtcbiAgICAnLScgKyBjaHI0KCkgK1xuICAgICctJyArIGNocjQoKSArXG4gICAgJy0nICsgY2hyNCgpICtcbiAgICAnLScgKyBjaHI0KCkgKyBjaHI0KCkgKyBjaHI0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW1wZXJzYW5kTW9kZWwuZXh0ZW5kKHtcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiBVbmlxdWUgSUQgZm9yIHRoaXMgY2xhc3NcbiAgICAgKiBAbWVtYmVyb2YhIEJhc2VcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAdHlwZSB7SUR9XG4gICAgICovXG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdW5pcXVlSUQoKTtcbiAgICAgIH0sXG4gICAgICBzZXRvbmNlOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3902\n")},"3b07":function(module,exports,__webpack_require__){eval("/**\n * Main spot object.\n *\n * @class Spot\n */\nvar BaseModel = __webpack_require__(/*! ./util/base */ \"3902\");\nvar Dataview = __webpack_require__(/*! ./dataview */ \"5066\");\nvar Datasets = __webpack_require__(/*! ./dataset/collection */ \"544d\");\nvar driverClient = __webpack_require__(/*! ./driver/client */ \"720c\");\nvar driverServer = __webpack_require__(/*! ./driver/server */ \"072d\");\nvar utildx = __webpack_require__(/*! ./util/crossfilter */ \"adfa\");\nvar timeUtil = __webpack_require__(/*! ./util/time */ \"d45b\");\nvar io = __webpack_require__(/*! socket.io-client */ \"b452\");\n\n/**\n * Connect to the spot-server using a websocket and setup callbacks\n *\n * @function\n * @param {address} Optional. IP address and port number to connect to. fi.  'http://localhost:3000'\n *\n * @memberof! Spot\n */\nfunction connectToServer (address) {\n  var me = this;\n  var socket;\n\n  if (address) {\n    // connect to specified address\n    // necessary for when window.location is not availble (node.js)\n    socket = io.connect(address);\n  } else {\n    // Use socket.io fallback to autodetect address\n    // ie. when a website wants to connect, use the window.location\n    socket = io.connect();\n  }\n\n  socket.on('connect', function () {\n    me.isConnected = true;\n    console.log('Connected to server');\n  });\n\n  socket.on('disconnect', function () {\n    me.isConnected = false;\n  });\n\n  socket.on('syncDatasets', function (req) {\n    // do an incremental update, as we typically start without datasets\n    me.datasets.add(req.data, { merge: true });\n  });\n\n  socket.on('syncDataview', function (req) {\n    me.dataview.reset(req.data);\n  });\n\n  socket.on('syncFacets', function (req) {\n    // do an incremental update, as we typically update only a few properties of a facet\n    // Also, a full reset will orphan the view.model objects in spot-app (ie. crashes)\n    var dataset = me.datasets.get(req.datasetId);\n    dataset.facets.add(req.data, { merge: true });\n\n    me.resetDataview(); // NOTE: the cached (serialized) datasets need to be updated, too\n\n    dataset.trigger('syncFacets');\n  });\n\n  socket.on('newData', function (req) {\n    var filter = me.dataview.filters.get(req.filterId);\n    if (req.data) {\n      filter.data = req.data;\n\n      // for text filters, rebuild partition and count\n      filter.partitions.forEach(function (partition, p) {\n        var columnToName = {1: 'a', 2: 'b', 3: 'c', 4: 'd'};\n\n        if (partition.isText) {\n          partition.groups.reset(null, {silent: true});\n          filter.data.forEach(function (d) {\n            var count = (parseFloat(d.aa) || parseInt(d.count)) || 0;\n\n            if (count) {\n              partition.groups.add({\n                min: 0,\n                max: 100,\n                count: count,\n                label: d[columnToName[(p + 1)]],\n                value: d[columnToName[(p + 1)]]\n              }, {silent: true});\n            }\n          });\n          partition.groups.sort();\n        }\n      });\n      filter.trigger('newData');\n    }\n  });\n\n  socket.on('newMetaData', function (req) {\n    me.dataview.dataTotal = parseInt(req.dataTotal);\n    me.dataview.dataSelected = parseInt(req.dataSelected);\n    console.timeEnd('Get data');\n    me.dataview.trigger('newMetaData');\n  });\n\n  socket.connect();\n  me.socket = socket;\n}\n\n/**\n * Disconnect from the spot-server\n *\n * @function\n * @memberof! Spot\n */\nfunction disconnectFromServer () {\n  this.socket.disconnect();\n}\n\n/**\n * Request a list of available datasets from the server\n *\n * Depending on the driver, this can be an asyncrhonous function.\n * It returns a Promise that resolves to the dataset collection\n *\n * @function\n * @returns {Promise}\n *\n * @memberof! Spot\n */\nfunction getDatasets () {\n  var me = this;\n\n  return new Promise(function (resolve, reject) {\n    me.socket.emit('getDatasets');\n\n    me.datasets.once('reset', function () {\n      resolve(me.datasets);\n    });\n  });\n}\n\n/**\n * Reset min, max, and categories for all facets in the dataview\n *\n * @param {Spot} me Main spot instance\n *\n * @memberof! Spot\n */\nfunction resetDataview () {\n  var toSerialize = [];\n\n  // Update list of active datasets, and serialize the datasets parts we need to send on getData requests\n  this.dataview.datasetIds = [];\n  this.datasets.forEach(function (dataset) {\n    if (dataset.isActive) {\n      // BUGFIX: the list of datasetIds can get out of sync when using spot-server. Just recreate it always.\n      this.dataview.datasetIds.push(dataset.getId());\n      toSerialize.push(dataset.toJSON()); // TODO: only serialize used facets?\n    }\n  }, this);\n  this.cachedDatasets = JSON.stringify(toSerialize);\n\n  // rescan min/max values and categories for the newly added facets\n  this.dataview.facets.forEach(function (facet) {\n    var newFacet = this.dataview.facets.get(facet.name, 'name');\n\n    if (newFacet.isContinuous || newFacet.isDatetime || newFacet.isDuration) {\n      this.setFacetMinMax(facet);\n    } else if (newFacet.isCategorial) {\n      this.setFacetCategories(facet);\n    }\n  }, this);\n}\n\n/*\n * Add or remove facets from a dataset to the global (merged) dataset\n *\n * @memberof! Spot\n * @param {Spot} me Main spot instance\n * @param {Dataset} dataset Dataset set add or remove\n */\nfunction toggleDatasetFacets (me, dataset) {\n  if (dataset.isActive) {\n    // remove active facets in dataset from the global dataset...\n    dataset.facets.forEach(function (facet) {\n      if (!facet.isActive) {\n        return;\n      }\n\n      // ...but only when no other active dataset contains it\n      var facetIsUnique = true;\n      me.datasets.forEach(function (otherDataset) {\n        if (!otherDataset.isActive || otherDataset === dataset) {\n          return;\n        }\n        if (otherDataset.facets.get(facet.name, 'name')) {\n          facetIsUnique = false;\n        }\n      });\n      if (facetIsUnique) {\n        var toRemove = me.dataview.facets.get(facet.name, 'name');\n        me.dataview.facets.remove(toRemove);\n      }\n    });\n  } else if (!dataset.isActive) {\n    // copy facets\n    dataset.facets.forEach(function (facet) {\n      // do nothing if facet is not active\n      if (!facet.isActive) {\n        return;\n      }\n\n      // default options for all facet types\n      var options = {\n        name: facet.name,\n        accessor: facet.name,\n        description: facet.description,\n        type: facet.transform.transformedType,\n        units: facet.units, // TODO: transformed units?\n        isActive: true\n      };\n\n      // do not add if a similar facet already exists\n      if (!me.dataview.facets.get(facet.name, 'name')) {\n        me.dataview.facets.add(options);\n      }\n    });\n  }\n}\n\n/*\n * Add or remove data from a dataset to the global (merged) dataset\n *\n * @memberof! Spot\n * @param {Spot} me Main spot instance\n * @param {Dataset} dataset Dataset set add or remove\n */\nfunction toggleDatasetData (me, dataset) {\n  if (dataset.isActive) {\n    // if dataset is active, remove it:\n    // ...clear all crossfilter filters\n    me.dataview.filters.forEach(function (filter) {\n      // BUGFIX: when loading sessions, the dataset is not initialized properly\n      // so check for it to be sure\n      if (filter.dimension) {\n        filter.dimension.filterAll();\n      }\n    });\n\n    // ...filter all data, originating from the dataset from the dataset\n    var dimension = me.dataview.crossfilter.dimension(function (d) {\n      return d._OriginalDatasetId;\n    });\n    dimension.filter(dataset.getId());\n\n    // ...remove matching data\n    me.dataview.crossfilter.remove();\n\n    // ...restore original filters\n    dimension.filterAll();\n    dimension.dispose();\n    me.dataview.filters.forEach(function (filter) {\n      filter.updateDataFilter();\n    });\n  } else if (!dataset.isActive) {\n    // if dataset is not active, add it\n    // ...find facets to copy\n    var dataTransforms = [];\n    dataset.facets.forEach(function (facet) {\n      // do nothing if facet is not active\n      if (!facet.isActive) {\n        return;\n      }\n      dataTransforms.push({\n        key: facet.name,\n        fn: utildx.valueFn(facet)\n      });\n    });\n\n    // ...transform data\n    var data = dataset.data;\n    var transformedData = [];\n\n    data.forEach(function (datum) {\n      var transformedDatum = {};\n      dataTransforms.forEach(function (transform) {\n        transformedDatum[transform.key] = transform.fn(datum);\n      });\n      transformedDatum._OriginalDatasetId = dataset.getId();\n      transformedData.push(transformedDatum);\n    });\n\n    // ...add to merged dataset\n    me.dataview.crossfilter.add(transformedData);\n  }\n\n  // update counts\n  me.dataview.dataTotal = me.dataview.crossfilter.size();\n  me.dataview.dataSelected = me.dataview.countGroup.value();\n}\n\n/**\n * Add or remove a dataset from the dataview\n * @param {Dataset} dataset Dataset set add or remove\n *\n * @function\n * @memberof! Spot\n */\nfunction toggleDataset (dataset) {\n  if (this.sessionType === 'server') {\n    toggleDatasetFacets(this, dataset);\n  } else if (this.sessionType === 'client') {\n    // release all filters\n    this.dataview.filters.forEach(function (filter) {\n      filter.releaseDataFilter();\n    });\n\n    // manually merge the datasets\n    toggleDatasetFacets(this, dataset);\n    toggleDatasetData(this, dataset);\n  }\n\n  dataset.isActive = !dataset.isActive;\n\n  this.resetDataview();\n}\n\nfunction setFacetMinMax (facet) {\n  // This should work for all kinds of facets:\n  // numbers, durations, and datatimes all implement the relevant operations\n  var datasets = this.datasets;\n\n  var first = true;\n  datasets.forEach(function (dataset) {\n    if (dataset.isActive) {\n      var subFacet = dataset.facets.get(facet.name, 'name');\n      if (first) {\n        facet.minvalAsText = subFacet.transform.transformedMinAsText;\n        facet.maxvalAsText = subFacet.transform.transformedMaxAsText;\n        first = false;\n      } else {\n        if (subFacet.minval < facet.minval) {\n          facet.minvalAsText = subFacet.transform.transformedMinAsText;\n        }\n        if (subFacet.maxval > facet.maxval) {\n          facet.maxvalAsText = subFacet.transform.transformedMaxAsText;\n        }\n      }\n    }\n  });\n}\n\nfunction setFacetCategories (facet) {\n  var datasets = this.datasets;\n\n  facet.categorialTransform.reset();\n\n  // get categories by combining the sets for the separate datasets\n  datasets.forEach(function (dataset) {\n    if (dataset.isActive) {\n      var subFacet = dataset.facets.get(facet.name, 'name');\n\n      if (subFacet.isCategorial) {\n        // merge rules from subFacet into those of Facet\n        subFacet.categorialTransform.rules.forEach(function (rule) {\n          var newRule = facet.categorialTransform.rules.get(rule.expression, 'expression');\n          if (newRule) {\n            newRule.count += rule.count;\n          } else {\n            facet.categorialTransform.rules.add(rule.toJSON());\n          }\n        });\n      } else if (subFacet.isDatetime) {\n        var expressions = timeUtil.timeParts.get(subFacet.datetimeTransform.transformedFormat, 'description').groups;\n        expressions.forEach(function (expression) {\n          var newRule = facet.categorialTransform.rules.get(expression, 'expression');\n          if (newRule) {\n            // no-op: category exist and we don't have a proper count\n          } else {\n            facet.categorialTransform.rules.add({\n              expression: expression,\n              count: 0,\n              group: expression\n            });\n          }\n        });\n      }\n    }\n  });\n}\n\nmodule.exports = BaseModel.extend({\n  type: 'user',\n  props: {\n    /**\n     * Is there a connection with a spot sever?\n     * @memberof! Spot\n     * @type {boolean}\n     */\n    isConnected: ['boolean', true, false],\n    /**\n     * When the app in locked down, facets and datasets cannot be edited\n     * @memberof! Spot\n     * @type {boolean}\n     */\n    isLockedDown: ['boolean', true, false],\n    /**\n     * Type of spot session. Must be 'client' or 'server'\n     * @memberof! Spot\n     * @type {string}\n     */\n    sessionType: {\n      type: 'string',\n      required: true,\n      default: 'client',\n      values: ['client', 'server'],\n      setOnce: true\n    }\n  },\n  children: {\n    /**\n     * A union of all active datasets\n     * @memberof! Spot\n     * @type {Dataview}\n     */\n    dataview: Dataview\n  },\n  collections: {\n    /**\n     * Collection of all datasets\n     * @memberof! Spot\n     * @type {Dataset[]}\n     */\n    datasets: Datasets\n  },\n  initialize: function () {\n    // first do parent class initialization\n    BaseModel.prototype.initialize.apply(this, arguments);\n\n    // default to client side (crossfilter) sessions\n    this.driver = driverClient;\n\n    // assign backend driver\n    if (arguments && arguments[0] && arguments[0].sessionType) {\n      if (arguments[0].sessionType === 'client') {\n        this.driver = driverClient;\n      } else if (arguments[0].sessionType === 'server') {\n        this.driver = driverServer;\n      } else {\n        console.error('No driver for type', arguments[0].sessionType);\n      }\n    }\n  },\n  resetDataview: resetDataview,\n  connectToServer: connectToServer,\n  disconnectFromServer: disconnectFromServer,\n  getDatasets: getDatasets,\n  setFacetMinMax: setFacetMinMax,\n  setFacetCategories: setFacetCategories,\n  toggleDataset: toggleDataset\n});\n\nmodule.exports.util = {\n  dx: utildx,\n  misval: __webpack_require__(/*! ./util/misval */ \"bff6\"),\n  time: timeUtil\n};\n\nmodule.exports.transforms = {\n  categorial: __webpack_require__(/*! ./facet/categorial-transform */ \"9b75\"),\n  continuous: __webpack_require__(/*! ./facet/continuous-transform */ \"5a80\"),\n  datetime: __webpack_require__(/*! ./facet/datetime-transform */ \"a0ca\"),\n  duration: __webpack_require__(/*! ./facet/duration-transform */ \"b123\")\n};\n\nmodule.exports.constructors = {\n  Dataview: Dataview,\n  Dataset: __webpack_require__(/*! ./dataset */ \"545a\"),\n  Datasets: Datasets\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3b07\n")},"419b":function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {\nmodule.exports = isBuf;\n\n/**\n * Returns true if obj is a buffer or an arraybuffer.\n *\n * @api private\n */\n\nfunction isBuf(obj) {\n  return (global.Buffer && global.Buffer.isBuffer(obj)) ||\n         (global.ArrayBuffer && obj instanceof ArrayBuffer);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "698d")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE5Yi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanM/MGJlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0gaXNCdWY7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuIChnbG9iYWwuQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgIChnbG9iYWwuQXJyYXlCdWZmZXIgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///419b\n')},"433b":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(/*! ./debug */ \"23b1\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    return exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (typeof process !== 'undefined' && 'env' in process) {\n    return process.env.DEBUG;\n  }\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"26d5\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMzYi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZGVidWcvYnJvd3Nlci5qcz82NDdhIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmICdXZWJraXRBcHBlYXJhbmNlJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh3aW5kb3cuY29uc29sZSAmJiAoY29uc29sZS5maXJlYnVnIHx8IChjb25zb2xlLmV4Y2VwdGlvbiAmJiBjb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKCkge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuIGFyZ3M7XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzID0gW2FyZ3NbMF0sIGMsICdjb2xvcjogaW5oZXJpdCddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EteiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG4gIHJldHVybiBhcmdzO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHJldHVybiBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///433b\n")},4573:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar xfilterArray = __webpack_require__(/*! ./array */ "0fc4");\nvar xfilterFilter = __webpack_require__(/*! ./filter */ "a376");\nvar crossfilter_identity = __webpack_require__(/*! ./identity */ "55a3");\nvar crossfilter_null = __webpack_require__(/*! ./null */ "de3f");\nvar crossfilter_zero = __webpack_require__(/*! ./zero */ "b730");\nvar xfilterHeapselect = __webpack_require__(/*! ./heapselect */ "e95e");\nvar xfilterHeap = __webpack_require__(/*! ./heap */ "a74f");\nvar bisect = __webpack_require__(/*! ./bisect */ "02ef");\nvar insertionsort = __webpack_require__(/*! ./insertionsort */ "753f");\nvar permute = __webpack_require__(/*! ./permute */ "5677");\nvar quicksort = __webpack_require__(/*! ./quicksort */ "b28e");\nvar xfilterReduce = __webpack_require__(/*! ./reduce */ "55c1");\nvar packageJson = __webpack_require__(/*! ./../package.json */ "a8db"); // require own package.json for the version field\nvar result = __webpack_require__(/*! lodash.result */ "d101");\n\n// constants\nvar REMOVED_INDEX = -1;\n\n// expose API exports\nexports.crossfilter = crossfilter;\nexports.crossfilter.heap = xfilterHeap;\nexports.crossfilter.heapselect = xfilterHeapselect;\nexports.crossfilter.bisect = bisect;\nexports.crossfilter.insertionsort = insertionsort;\nexports.crossfilter.permute = permute;\nexports.crossfilter.quicksort = quicksort;\nexports.crossfilter.version = packageJson.version; // please note use of "package-json-versionify" transform\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size,\n    all: all,\n    allFiltered: allFiltered,\n    onChange: onChange,\n    isElementFiltered: isElementFiltered\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      filters, // 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = [], // when data is removed\n      callbacks = [];\n\n  filters = new xfilterArray.bitarray(0);\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there\'s actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters.lengthen(n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n      triggerOnChange(\'dataAdded\');\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters, or if a predicate function is passed,\n  // removes all records matching the predicate (ignoring filters).\n  function removeData(predicate) {\n    var // Mapping from old record indexes to new indexes (after records removed)\n        newIndex = crossfilter_index(n, n),\n        removed = [],\n        usePred = typeof predicate === \'function\',\n        shouldRemove = function (i) {\n          return usePred ? predicate(data[i], i) : filters.zero(i)\n        };\n\n    for (var index1 = 0, index2 = 0; index1 < n; ++index1) {\n      if ( shouldRemove(index1) ) {\n        removed.push(index1);\n        newIndex[index1] = REMOVED_INDEX;\n      } else {\n        newIndex[index1] = index2++;\n      }\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var index3 = 0, index4 = 0; index3 < n; ++index3) {\n      if ( newIndex[index3] !== REMOVED_INDEX ) {\n        if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];\n        ++index4;\n      }\n    }\n\n    data.length = n = index4;\n    filters.truncate(index4);\n    triggerOnChange(\'dataRemoved\');\n  }\n\n  function maskForDimensions(dimensions) {\n    var n,\n        d,\n        len,\n        id,\n        mask = Array(filters.subarrays);\n    for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }\n    for (d = 0, len = dimensions.length; d < len; d++) {\n      // The top bits of the ID are the subarray offset and the lower bits are the bit\n      // offset of the "one" mask.\n      id = dimensions[d].id();\n      mask[id >> 7] &= ~(0x1 << (id & 0x3f));\n    }\n    return mask;\n  }\n\n  // Return true if the data element at index i is filtered IN.\n  // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.\n  function isElementFiltered(i, ignore_dimensions) {\n    var mask = maskForDimensions(ignore_dimensions || []);\n    return filters.zeroExceptMask(i,mask);\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value, iterable) {\n\n    if (typeof value === \'string\') {\n      var accessorPath = value;\n      value = function(d) { return result(d, accessorPath); };\n    }\n\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      currentFilter: currentFilter,\n      hasCurrentFilter: hasCurrentFilter,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose, // for backwards-compatibility\n      accessor: value,\n      id: function() { return id; }\n    };\n\n    var one, // lowest unset bit as mask, e.g., 00001000\n        zero, // inverted one, e.g., 11110111\n        offset, // offset into the filters arrays\n        id, // unique ID for this dimension (reused when dimensions are disposed)\n        values, // sorted, cached array\n        index, // maps sorted value index -> record index (in data)\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        iterablesIndexCount,\n        newIterablesIndexCount,\n        iterablesIndexFilterStatus,\n        newIterablesIndexFilterStatus,\n        iterablesEmptyRows = [],\n        sort = quicksort.by(function(i) { return newValues[i]; }),\n        refilter = xfilterFilter.filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        filterValue, // the value used for filtering (value, array, function or undefined)\n        filterValuePresent, // true if filterValue contains something\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0,\n        t = 0,\n        k;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Add a new dimension in the filter bitmap and store the offset and bitmask.\n    var tmp = filters.add();\n    offset = tmp.offset;\n    one = tmp.one;\n    zero = ~one;\n\n    // Create a unique ID for the dimension\n    // IDs will be re-used if dimensions are disposed.\n    // For internal use the ID is the subarray offset shifted left 7 bits or\'d with the\n    // bit offset of the set bit in the dimension\'s "one" mask.\n    id = (offset << 7) | (Math.log(one) / Math.log(2));\n\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      if (iterable){\n        // Count all the values\n        t = 0;\n        j = 0;\n        k = [];\n\n        for (var i0 = 0; i0 < newData.length; i0++) {\n          for(j = 0, k = value(newData[i0]); j < k.length; j++) {\n            t++;\n          }\n        }\n\n        newValues = [];\n        newIterablesIndexCount = crossfilter_range(newData.length);\n        newIterablesIndexFilterStatus = crossfilter_index(t,1);\n        var unsortedIndex = crossfilter_range(t);\n\n        for (var l = 0, index1 = 0; index1 < newData.length; index1++) {\n          k = value(newData[index1])\n          //\n          if(!k.length){\n            newIterablesIndexCount[index1] = 0;\n            iterablesEmptyRows.push(index1 + n0);\n            continue;\n          }\n          newIterablesIndexCount[index1] = k.length\n          for (j = 0; j < k.length; j++) {\n            newValues.push(k[j]);\n            unsortedIndex[l] = index1;\n            l++;\n          }\n        }\n\n        // Create the Sort map used to sort both the values and the valueToData indices\n        var sortMap = sort(crossfilter_range(t), 0, t);\n\n        // Use the sortMap to sort the newValues\n        newValues = permute(newValues, sortMap);\n\n\n        // Use the sortMap to sort the unsortedIndex map\n        // newIndex should be a map of sortedValue -> crossfilterData\n        newIndex = permute(unsortedIndex, sortMap)\n\n      } else{\n        // Permute new values into natural order using a standard sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n      }\n\n      if(iterable) {\n        n1 = t;\n      }\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];\n      if (refilterFunction) {\n        for (var index2 = 0; index2 < n1; ++index2) {\n          if (!refilterFunction(newValues[index2], index2)) {\n            filters[offset][newIndex[index2] + n0] |= one;\n            if(iterable) newIterablesIndexFilterStatus[index2] = 1;\n          }\n        }\n      } else {\n        for (var index3 = 0; index3 < lo1; ++index3) {\n          filters[offset][newIndex[index3] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index3] = 1;\n        }\n        for (var index4 = hi1; index4 < n1; ++index4) {\n          filters[offset][newIndex[index4] + n0] |= one;\n          if(iterable) newIterablesIndexFilterStatus[index4] = 1;\n        }\n      }\n\n      // If this dimension previously had no data, then we don\'t need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        iterablesIndexCount = newIterablesIndexCount;\n        iterablesIndexFilterStatus = newIterablesIndexFilterStatus;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n\n\n      var oldValues = values,\n        oldIndex = index,\n        oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,\n        old_n0,\n        i1 = 0;\n\n      i0 = 0;\n\n      if(iterable){\n        old_n0 = n0\n        n0 = oldValues.length;\n        n1 = t\n      }\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = iterable ? new Array(n0 + n1) : new Array(n);\n      index = iterable ? new Array(n0 + n1) : crossfilter_index(n, n);\n      if(iterable) iterablesIndexFilterStatus = crossfilter_index(n0 + n1, 1);\n\n      // Concatenate the newIterablesIndexCount onto the old one.\n      if(iterable) {\n        var oldiiclength = iterablesIndexCount.length;\n        iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);\n        for(var j=0; j+oldiiclength < n; j++) {\n          iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];\n        }\n      }\n\n      // Merge the old and new sorted values, and old and new index.\n      var index5 = 0;\n      for (; i0 < n0 && i1 < n1; ++index5) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[index5] = oldValues[i0];\n          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n          index[index5] = oldIndex[i0++];\n        } else {\n          values[index5] = newValues[i1];\n          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n          index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++index5) {\n        values[index5] = oldValues[i0];\n        if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];\n        index[index5] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++index5) {\n        values[index5] = newValues[i1];\n        if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];\n        index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      if (iterable) {\n        for (var i0 = 0, i1 = 0; i0 < iterablesEmptyRows.length; i0++) {\n          if (reIndex[iterablesEmptyRows[i0]] !== REMOVED_INDEX) {\n            iterablesEmptyRows[i1] = reIndex[iterablesEmptyRows[i0]];\n            i1++;\n          }\n        }\n        iterablesEmptyRows.length = i1;\n        for (i0 = 0, i1 = 0; i0 < n; i0++) {\n          if (reIndex[i0] !== REMOVED_INDEX) {\n            if (i1 !== i0) iterablesIndexCount[i1] = iterablesIndexCount[i0];\n            i1++;\n          }\n        }\n        iterablesIndexCount.length = i1;\n      }\n      // Rewrite our index, overwriting removed values\n      var n0 = values.length;\n      for (var i = 0, j = 0, oldDataIndex; i < n0; ++i) {\n        oldDataIndex = index[i];\n        if (reIndex[oldDataIndex] !== REMOVED_INDEX) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[oldDataIndex];\n          if (iterable) {\n            iterablesIndexFilterStatus[j] = iterablesIndexFilterStatus[i];\n          }\n          ++j;\n        }\n      }\n      values.length = j;\n      if (iterable) iterablesIndexFilterStatus.length = j;\n      while (j < n0) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === values.length);\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [];\n\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          added.push(index[i]);\n          valueIndexAdded.push(i);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          removed.push(index[i]);\n          valueIndexRemoved.push(i);\n        }\n      }\n\n      if(!iterable) {\n        // Flip filters normally.\n\n        for(i=0; i<added.length; i++) {\n          filters[offset][added[i]] ^= one;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          filters[offset][removed[i]] ^= one;\n        }\n\n      } else {\n        // For iterables, we need to figure out if the row has been completely removed vs partially included\n        // Only count a row as added if it is not already being aggregated. Only count a row\n        // as removed if the last element being aggregated is removed.\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          iterablesIndexCount[added[i]]++\n          iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n          if(iterablesIndexCount[added[i]] === 1) {\n            filters[offset][added[i]] ^= one;\n            newAdded.push(added[i]);\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          iterablesIndexCount[removed[i]]--\n          iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n          if(iterablesIndexCount[removed[i]] === 0) {\n            filters[offset][removed[i]] ^= one;\n            newRemoved.push(removed[i]);\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(bounds[0] === 0 && bounds[1] === values.length) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange(\'filtered\');\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === "function"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      filterValue = value;\n      filterValuePresent = true;\n      return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      filterValue = range;\n      filterValuePresent = true;\n      return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      filterValue = undefined;\n      filterValuePresent = false;\n      return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      filterValue = f;\n      filterValuePresent = true;\n      \n      refilterFunction = f;\n      refilter = xfilterFilter.filterAll;\n\n      filterIndexFunction(f, false);\n\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f, filterAll) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [],\n          valueIndexAdded = [],\n          valueIndexRemoved = [],\n          indexLength = values.length;\n\n      if(!iterable) {\n        for (i = 0; i < indexLength; ++i) {\n          if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) added.push(k);\n            else removed.push(k);\n          }\n        }\n      }\n\n      if(iterable) {\n        for(i=0; i < indexLength; ++i) {\n          if(f(values[i], i)) {\n            added.push(index[i]);\n            valueIndexAdded.push(i);\n          } else {\n            removed.push(index[i]);\n            valueIndexRemoved.push(i);\n          }\n        }\n      }\n\n      if(!iterable) {\n        for(i=0; i<added.length; i++) {\n          if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;\n        }\n\n        for(i=0; i<removed.length; i++) {\n          if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;\n        }\n      } else {\n\n        var newAdded = [];\n        var newRemoved = [];\n        for (i = 0; i < added.length; i++) {\n          // First check this particular value needs to be added\n          if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {\n            iterablesIndexCount[added[i]]++\n            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;\n            if(iterablesIndexCount[added[i]] === 1) {\n              filters[offset][added[i]] ^= one;\n              newAdded.push(added[i]);\n            }\n          }\n        }\n        for (i = 0; i < removed.length; i++) {\n          // First check this particular value needs to be removed\n          if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {\n            iterablesIndexCount[removed[i]]--\n            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;\n            if(iterablesIndexCount[removed[i]] === 0) {\n              filters[offset][removed[i]] ^= one;\n              newRemoved.push(removed[i]);\n            }\n          }\n        }\n\n        added = newAdded;\n        removed = newRemoved;\n\n        // Now handle empty rows.\n        if(filterAll) {\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if((filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was not in the filter, so set the filter and add\n              filters[offset][k] ^= one;\n              added.push(k);\n            }\n          }\n        } else {\n          // filter in place - remove empty rows if necessary\n          for(i = 0; i < iterablesEmptyRows.length; i++) {\n            if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {\n              // Was in the filter, so set the filter and remove\n              filters[offset][k] ^= one;\n              removed.push(k);\n            }\n          }\n        }\n      }\n\n      filterListeners.forEach(function(l) { l(one, offset, added, removed); });\n      triggerOnChange(\'filtered\');\n    }\n    \n    function currentFilter() {\n      return filterValue;\n    }\n    \n    function hasCurrentFilter() {\n      return filterValuePresent;\n    }\n\n    // Returns the top K selected records based on this dimension\'s order.\n    // Note: observes this dimension\'s filter, unlike group and groupAll.\n    function top(k, top_offset) {\n      var array = [],\n          i = hi0,\n          j,\n          toSkip = 0;\n\n      if(top_offset && top_offset > 0) toSkip = top_offset;\n\n      while (--i >= lo0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n      }\n\n      if(iterable){\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          // Add row with empty iterable column at the end\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension\'s order.\n    // Note: observes this dimension\'s filter, unlike group and groupAll.\n    function bottom(k, bottom_offset) {\n      var array = [],\n          i,\n          j,\n          toSkip = 0;\n\n      if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;\n\n      if(iterable) {\n        // Add row with empty iterable column at the top\n        for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {\n          if(filters.zero(j = iterablesEmptyRows[i])) {\n            if(toSkip > 0) {\n              //skip matching row\n              --toSkip;\n            } else {\n              array.push(data[j]);\n              --k;\n            }\n          }\n        }\n      }\n\n      i = lo0;\n\n      while (i < hi0 && k > 0) {\n        if (filters.zero(j = index[i])) {\n          if(toSkip > 0) {\n            //skip matching row\n            --toSkip;\n          } else {\n            array.push(data[j]);\n            --k;\n          }\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null,\n          n0old;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n\n        if(iterable) {\n          n0old = n0\n          n0 = values.length - newValues.length\n          n1 = newValues.length;\n        }\n\n        var oldGroups = groups,\n            reIndex = iterable ? [] : crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            remove = reduceRemove,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don\'t need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n        if (resetNeeded) remove = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        if(iterable){\n          groupIndex = k0 ? groupIndex : [];\n        }\n        else{\n          groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n        }\n\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            g0 = oldGroups[++i0];\n            if (g0) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n\n          while (x1 <= x) {\n            j = newIndex[i1] + (iterable ? n0old : n0)\n\n\n            if(iterable){\n              if(groupIndex[j]){\n                groupIndex[j].push(k)\n              }\n              else{\n                groupIndex[j] = [k]\n              }\n            }\n            else{\n              groupIndex[j] = k;\n            }\n\n            // Always add new values to groups. Only remove when not in filter.\n            // This gives groups full information on data life-cycle.\n            g.value = add(g.value, data[j], true);\n            if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater th1an all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n\n        // Fill in gaps with empty arrays where there may have been rows with empty iterables\n        if(iterable){\n          for (var index1 = 0; index1 < n; index1++) {\n            if(!groupIndex[index1]){\n              groupIndex[index1] = [];\n            }\n          }\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if(k > i0){\n          if(iterable){\n            for (i0 = 0; i0 < n0old; ++i0) {\n              for (index1 = 0; index1 < groupIndex[i0].length; index1++) {\n                groupIndex[i0][index1] = reIndex[groupIndex[i0][index1]];\n              }\n            }\n          }\n          else{\n            for (i0 = 0; i0 < n0; ++i0) {\n              groupIndex[i0] = reIndex[groupIndex[i0]];\n            }\n          }\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1 || iterable) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if(iterable){\n            k++\n            return\n          }\n          if (++k === groupCapacity) {\n            reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData(reIndex) {\n        if (k > 1 || iterable) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK),\n              i,\n              i0,\n              j;\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          if (!iterable) {\n            for (i = 0, j = 0; i < n; ++i) {\n              if (reIndex[i] !== REMOVED_INDEX) {\n                seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n                ++j;\n              }\n            }\n          } else {\n            for (i = 0, j = 0; i < n; ++i) {\n              if (reIndex[i] !== REMOVED_INDEX) {\n                groupIndex[j] = groupIndex[i];\n                for (i0 = 0; i0 < groupIndex[j].length; i0++) {\n                  seenGroups[groupIndex[j][i0]] = 1;\n                }\n                ++j;\n              }\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1 || iterable) {\n            // Reindex the group index using seenGroups to find the new index.\n            if (!iterable) {\n              for (i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n            } else {\n              for (i = 0; i < j; ++i) {\n                for (i0 = 0; i0 < groupIndex[i].length; ++i0) {\n                  groupIndex[i][i0] = seenGroups[groupIndex[i][i0]];\n                }\n              }\n            }\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1 || iterable\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var index3 = 0; index3 < n; ++index3) if (reIndex[index3] !== REMOVED_INDEX) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateMany(filterOne, filterOffset, added, removed, notFilter) {\n\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            j,\n            k,\n            n,\n            g;\n\n        if(iterable){\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (filters.zeroExcept(k = added[i], offset, zero)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceAdd(g.value, data[k], false, j);\n              }\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n              for (j = 0; j < groupIndex[k].length; j++) {\n                g = groups[groupIndex[k][j]];\n                g.value = reduceRemove(g.value, data[k], notFilter, j);\n              }\n            }\n          }\n          return;\n        }\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      // notFilter indicates a crossfilter.add/remove operation.\n      function updateOne(filterOne, filterOffset, added, removed, notFilter) {\n        if ((filterOne === one && filterOffset === offset) || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (filters.zeroExcept(k = added[i], offset, zero)) {\n            g.value = reduceAdd(g.value, data[k], false);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {\n            g.value = reduceRemove(g.value, data[k], notFilter);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            j,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an \'unfiltered\' view even if there are already filters in\n        // place on other dimensions.\n        if(iterable){\n          for (i = 0; i < n; ++i) {\n            for (j = 0; j < groupIndex[i].length; j++) {\n              g = groups[groupIndex[i][j]];\n              g.value = reduceAdd(g.value, data[i], true, j);\n            }\n          }\n          for (i = 0; i < n; ++i) {\n            if (!filters.zeroExcept(i, offset, zero)) {\n              for (j = 0; j < groupIndex[i].length; j++) {\n                g = groups[groupIndex[i][j]];\n                g.value = reduceRemove(g.value, data[i], false, j);\n              }\n            }\n          }\n          return;\n        }\n\n        for (i = 0; i < n; ++i) {\n          g = groups[groupIndex[i]];\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // We add all records and then remove filtered records so that reducers\n        // can build an \'unfiltered\' view even if there are already filters in\n        // place on other dimensions.\n        for (i = 0; i < n; ++i) {\n          g.value = reduceAdd(g.value, data[i], true);\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!filters.zeroExcept(i, offset, zero)) {\n            g.value = reduceRemove(g.value, data[i], false);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension\'s natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = xfilterHeapselect.by(valueOf);\n        heap = xfilterHeap.by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        i = dimensionGroups.indexOf(group);\n        if (i >= 0) dimensionGroups.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      filters.masks[offset] &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Cycle through all the values.\n      for (i = n0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, filterOffset, added, removed, notFilter) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (filters.zero(k = added[i])) {\n          reduceValue = reduceAdd(reduceValue, data[k], notFilter);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters.only(k = removed[i], filterOffset, filterOne)) {\n          reduceValue = reduceRemove(reduceValue, data[k], notFilter);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      // Cycle through all the values.\n      for (i = 0; i < n; ++i) {\n\n        // Add all values all the time.\n        reduceValue = reduceAdd(reduceValue, data[i], true);\n\n        // Remove the value if it is filtered.\n        if (!filters.zero(i)) {\n          reduceValue = reduceRemove(reduceValue, data[i], false);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i, 1);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i, 1);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  // Returns the raw row data contained in this crossfilter\n  function all(){\n    return data;\n  }\n\n  // Returns row data with all dimension filters applied, except for filters in ignore_dimensions\n  function allFiltered(ignore_dimensions) {\n    var array = [],\n        i = 0,\n        mask = maskForDimensions(ignore_dimensions || []);\n\n      for (i = 0; i < n; i++) {\n        if (filters.zeroExceptMask(i, mask)) {\n          array.push(data[i]);\n        }\n      }\n\n      return array;\n  }\n\n  function onChange(cb){\n    if(typeof cb !== \'function\'){\n      /* eslint no-console: 0 */\n      console.warn(\'onChange callback parameter must be a function!\');\n      return;\n    }\n    callbacks.push(cb);\n    return function(){\n      callbacks.splice(callbacks.indexOf(cb), 1);\n    };\n  }\n\n  function triggerOnChange(eventName){\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](eventName);\n    }\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? xfilterArray.array8 : m < 0x10001\n      ? xfilterArray.array16\n      : xfilterArray.array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4573\n')},"4c13":function(module,exports,__webpack_require__){eval("\n/**\n * Module dependencies.\n */\n\nvar parser = __webpack_require__(/*! socket.io-parser */ \"6fba\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"ee5b\");\nvar toArray = __webpack_require__(/*! to-array */ \"7de3\");\nvar on = __webpack_require__(/*! ./on */ \"faaa\");\nvar bind = __webpack_require__(/*! component-bind */ \"b6f6\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('socket.io-client:socket');\nvar hasBin = __webpack_require__(/*! has-binary */ \"d304\");\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = Socket;\n\n/**\n * Internal events (blacklisted).\n * These events can't be emitted by the user.\n *\n * @api private\n */\n\nvar events = {\n  connect: 1,\n  connect_error: 1,\n  connect_timeout: 1,\n  connecting: 1,\n  disconnect: 1,\n  error: 1,\n  reconnect: 1,\n  reconnect_attempt: 1,\n  reconnect_failed: 1,\n  reconnect_error: 1,\n  reconnecting: 1,\n  ping: 1,\n  pong: 1\n};\n\n/**\n * Shortcut to `Emitter#emit`.\n */\n\nvar emit = Emitter.prototype.emit;\n\n/**\n * `Socket` constructor.\n *\n * @api public\n */\n\nfunction Socket (io, nsp, opts) {\n  this.io = io;\n  this.nsp = nsp;\n  this.json = this; // compat\n  this.ids = 0;\n  this.acks = {};\n  this.receiveBuffer = [];\n  this.sendBuffer = [];\n  this.connected = false;\n  this.disconnected = true;\n  if (opts && opts.query) {\n    this.query = opts.query;\n  }\n  if (this.io.autoConnect) this.open();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Subscribe to open, close and packet events\n *\n * @api private\n */\n\nSocket.prototype.subEvents = function () {\n  if (this.subs) return;\n\n  var io = this.io;\n  this.subs = [\n    on(io, 'open', bind(this, 'onopen')),\n    on(io, 'packet', bind(this, 'onpacket')),\n    on(io, 'close', bind(this, 'onclose'))\n  ];\n};\n\n/**\n * \"Opens\" the socket.\n *\n * @api public\n */\n\nSocket.prototype.open =\nSocket.prototype.connect = function () {\n  if (this.connected) return this;\n\n  this.subEvents();\n  this.io.open(); // ensure open\n  if ('open' === this.io.readyState) this.onopen();\n  this.emit('connecting');\n  return this;\n};\n\n/**\n * Sends a `message` event.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.send = function () {\n  var args = toArray(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n\n/**\n * Override `emit`.\n * If the event is in `events`, it's emitted normally.\n *\n * @param {String} event name\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.emit = function (ev) {\n  if (events.hasOwnProperty(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  }\n\n  var args = toArray(arguments);\n  var parserType = parser.EVENT; // default\n  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary\n  var packet = { type: parserType, data: args };\n\n  packet.options = {};\n  packet.options.compress = !this.flags || false !== this.flags.compress;\n\n  // event ack callback\n  if ('function' === typeof args[args.length - 1]) {\n    debug('emitting packet with ack id %d', this.ids);\n    this.acks[this.ids] = args.pop();\n    packet.id = this.ids++;\n  }\n\n  if (this.connected) {\n    this.packet(packet);\n  } else {\n    this.sendBuffer.push(packet);\n  }\n\n  delete this.flags;\n\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.packet = function (packet) {\n  packet.nsp = this.nsp;\n  this.io.packet(packet);\n};\n\n/**\n * Called upon engine `open`.\n *\n * @api private\n */\n\nSocket.prototype.onopen = function () {\n  debug('transport is open - connecting');\n\n  // write connect packet if necessary\n  if ('/' !== this.nsp) {\n    if (this.query) {\n      this.packet({type: parser.CONNECT, query: this.query});\n    } else {\n      this.packet({type: parser.CONNECT});\n    }\n  }\n};\n\n/**\n * Called upon engine `close`.\n *\n * @param {String} reason\n * @api private\n */\n\nSocket.prototype.onclose = function (reason) {\n  debug('close (%s)', reason);\n  this.connected = false;\n  this.disconnected = true;\n  delete this.id;\n  this.emit('disconnect', reason);\n};\n\n/**\n * Called with socket packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onpacket = function (packet) {\n  if (packet.nsp !== this.nsp) return;\n\n  switch (packet.type) {\n    case parser.CONNECT:\n      this.onconnect();\n      break;\n\n    case parser.EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.BINARY_EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.ACK:\n      this.onack(packet);\n      break;\n\n    case parser.BINARY_ACK:\n      this.onack(packet);\n      break;\n\n    case parser.DISCONNECT:\n      this.ondisconnect();\n      break;\n\n    case parser.ERROR:\n      this.emit('error', packet.data);\n      break;\n  }\n};\n\n/**\n * Called upon a server event.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onevent = function (packet) {\n  var args = packet.data || [];\n  debug('emitting event %j', args);\n\n  if (null != packet.id) {\n    debug('attaching ack callback to event');\n    args.push(this.ack(packet.id));\n  }\n\n  if (this.connected) {\n    emit.apply(this, args);\n  } else {\n    this.receiveBuffer.push(args);\n  }\n};\n\n/**\n * Produces an ack callback to emit with an event.\n *\n * @api private\n */\n\nSocket.prototype.ack = function (id) {\n  var self = this;\n  var sent = false;\n  return function () {\n    // prevent double callbacks\n    if (sent) return;\n    sent = true;\n    var args = toArray(arguments);\n    debug('sending ack %j', args);\n\n    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;\n    self.packet({\n      type: type,\n      id: id,\n      data: args\n    });\n  };\n};\n\n/**\n * Called upon a server acknowlegement.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onack = function (packet) {\n  var ack = this.acks[packet.id];\n  if ('function' === typeof ack) {\n    debug('calling ack %s with %j', packet.id, packet.data);\n    ack.apply(this, packet.data);\n    delete this.acks[packet.id];\n  } else {\n    debug('bad ack %s', packet.id);\n  }\n};\n\n/**\n * Called upon server connect.\n *\n * @api private\n */\n\nSocket.prototype.onconnect = function () {\n  this.connected = true;\n  this.disconnected = false;\n  this.emit('connect');\n  this.emitBuffered();\n};\n\n/**\n * Emit buffered events (received and emitted).\n *\n * @api private\n */\n\nSocket.prototype.emitBuffered = function () {\n  var i;\n  for (i = 0; i < this.receiveBuffer.length; i++) {\n    emit.apply(this, this.receiveBuffer[i]);\n  }\n  this.receiveBuffer = [];\n\n  for (i = 0; i < this.sendBuffer.length; i++) {\n    this.packet(this.sendBuffer[i]);\n  }\n  this.sendBuffer = [];\n};\n\n/**\n * Called upon server disconnect.\n *\n * @api private\n */\n\nSocket.prototype.ondisconnect = function () {\n  debug('server disconnect (%s)', this.nsp);\n  this.destroy();\n  this.onclose('io server disconnect');\n};\n\n/**\n * Called upon forced client/server side disconnections,\n * this method ensures the manager stops tracking us and\n * that reconnections don't get triggered for this.\n *\n * @api private.\n */\n\nSocket.prototype.destroy = function () {\n  if (this.subs) {\n    // clean subscriptions to avoid reconnections\n    for (var i = 0; i < this.subs.length; i++) {\n      this.subs[i].destroy();\n    }\n    this.subs = null;\n  }\n\n  this.io.destroy(this);\n};\n\n/**\n * Disconnects the socket manually.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.close =\nSocket.prototype.disconnect = function () {\n  if (this.connected) {\n    debug('performing disconnect (%s)', this.nsp);\n    this.packet({ type: parser.DISCONNECT });\n  }\n\n  // remove socket from pool\n  this.destroy();\n\n  if (this.connected) {\n    // fire events\n    this.onclose('io client disconnect');\n  }\n  return this;\n};\n\n/**\n * Sets the compress flag.\n *\n * @param {Boolean} if `true`, compresses the sending data\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.compress = function (compress) {\n  this.flags = this.flags || {};\n  this.flags.compress = compress;\n  return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4c13\n")},"4d50":function(module,exports,__webpack_require__){eval("/**\n * Facets are the main abstraction over the data.\n *\n * A `Dataset` is a collection of (similar) items, with each item having a certain set of properties, ie. `Facet`s.\n * The `Facet` class defines the property: It can be a continuous value, a set of labels or tags,\n * or it can be result of some transformation or equation.\n *\n * @class Facet\n * @extends Base\n */\nvar BaseModel = __webpack_require__(/*! ./util/base */ \"3902\");\nvar CategorialTransform = __webpack_require__(/*! ./facet/categorial-transform */ \"9b75\");\nvar ContinuousTransform = __webpack_require__(/*! ./facet/continuous-transform */ \"5a80\");\nvar datetimeTransform = __webpack_require__(/*! ./facet/datetime-transform */ \"a0ca\");\nvar durationTransform = __webpack_require__(/*! ./facet/duration-transform */ \"b123\");\nvar textTransform = __webpack_require__(/*! ./facet/text-transform */ \"e810\");\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\n\nmodule.exports = BaseModel.extend({\n  initialize: function () {\n    this.on('change:type', function (facet, newval) {\n      // reset transformations on type change\n      this.continuousTransform.reset();\n      this.categorialTransform.reset();\n      this.datetimeTransform.reset();\n      this.durationTransform.reset();\n    });\n  },\n  props: {\n    /**\n     * Show in facet lists (used for interactive searching on Facets page)\n     * @memberof! Facet\n     * @type {boolean}\n     */\n    show: ['boolean', false, true],\n\n    /**\n     * Show facet bar (on Analyze page)\n     * @memberof! Facet\n     * @type {boolean}\n     */\n    isActive: ['boolean', false, false],\n\n    // general facet properties\n    /**\n     * Description of this facet, for displaying purposes\n     * @memberof! Facet\n     * @type {string}\n     */\n    description: ['string', true, ''],\n\n    /**\n     * For continuous facets, its units for displaying purposes\n     * @memberof! Facet\n     * @type {string}\n     */\n    units: ['string', true, ''],\n\n    /**\n     * Short name (human readable) for this facet, must be unique.\n     * @memberof! Facet\n     * @type {string}\n     */\n    name: ['string', true, ''],\n\n    /**\n     * Type of this facet:\n     *  * `constant`        A constant value of \"1\" for all data items\n     *  * `continuous`      The facet takes on real numbers\n     *  * `categorial`      The facet is a string, or an array of strings (for a well defined set of labels and tags)\n     *  * `datetime`        The facet is a datetime (using momentjs.tz)\n     *  * `duration`        The facet is a duration (using momentjs.duration)\n     *  * `text`            Freeform text.\n     * Check for facet type using isConstant, isContinuous, isCategorial, isDatetime, isDuration, or isText  properties.\n     * @memberof! Facet\n     * @type {string}\n     */\n    type: {\n      type: 'string',\n      required: true,\n      default: 'categorial',\n      values: ['constant', 'continuous', 'categorial', 'datetime', 'duration', 'text']\n    },\n\n    /**\n     * The accessor for this facet.\n     * For nested properties use dot notation: For a dataset `[ {name: {first: \"Santa\", last: \"Claus\"}}, ...]`\n     * you can use `name.first` and `name.last` to get Santa and Claus, respectively.\n     *\n     * @memberof! Facet\n     * @type {string}\n     */\n    accessor: ['string', false, null],\n\n    /**\n     * Missing or invalid data indicator; for multiple values, use a comma separated, quoted list\n     * Numbers, strings, booleans, and the special value null are allowed.\n     * Use single or double quotes for strings \"missing\".\n     * The parsed values are available in the misval property.\n     *\n     * @memberof! Facet\n     * @type {string}\n     */\n    misvalAsText: 'string',\n\n    /**\n     * For continuous or datetime Facets, the minimum value as text.\n     * Parsed value available in the `minval` property\n     * @memberof! Facet\n     * @type {string}\n     */\n    minvalAsText: 'string',\n\n    /**\n     * For continuous or datetime Facets, the maximum value as text.\n     * Parsed value available in the `maxval` property\n     * @memberof! Facet\n     * @type {string}\n     */\n    maxvalAsText: 'string'\n  },\n  children: {\n    /**\n     * A categorial transformation to apply to the data\n     * @memberof! Facet\n     * @type {CategorialTransform}\n     */\n    categorialTransform: CategorialTransform,\n    /**\n     * A datetime transformation to apply to the data\n     * @memberof! Facet\n     * @type {dateimeTransform}\n     */\n    datetimeTransform: datetimeTransform,\n    /**\n     * A duration transformation to apply to the data\n     * @memberof! Facet\n     * @type {dateimeTransform}\n     */\n    durationTransform: durationTransform,\n    /**\n     * A continuous transformation to apply to the data\n     * @memberof! Facet\n     * @type {ContinuousTransform}\n     */\n    continuousTransform: ContinuousTransform,\n    /**\n     * A text transform\n     * @memberof! Facet\n     * @type {TextTransform}\n     */\n    textTransform: textTransform\n  },\n\n  derived: {\n    // properties for: type\n    isConstant: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'constant';\n      }\n    },\n    isContinuous: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'continuous';\n      }\n    },\n    isCategorial: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'categorial';\n      }\n    },\n    isDatetime: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'datetime';\n      }\n    },\n    isDuration: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'duration';\n      }\n    },\n    isText: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'text';\n      }\n    },\n\n    /**\n     * Array of missing data indicators\n     * @memberof! Facet\n     * @type {Object[]}\n     * @readonly\n     */\n    misval: {\n      deps: ['misvalAsText'],\n      fn: function () {\n        // Parse the text content as a JSON array:\n        //  - strings should be quoted\n        //  - numbers unquoated\n        //  - special numbers not allowed: NaN, Infinity\n        try {\n          if (this.misvalAsText !== null) {\n            return JSON.parse('[' + this.misvalAsText + ']');\n          } else {\n            return [];\n          }\n        } catch (e) {\n          return [];\n        }\n      },\n      cache: false\n    },\n\n    /**\n     * For continuous or datetime Facets, the minimum value.\n     * @memberof! Facet\n     * @type {number|datetime}\n     * @readonly\n     */\n    minval: {\n      deps: ['minvalAsText', 'type'],\n      fn: function () {\n        var min;\n        if (this.isContinuous) {\n          min = parseFloat(this.minvalAsText);\n          if (isNaN(min)) {\n            min = 0;\n          }\n        } else if (this.isDatetime) {\n          min = moment(this.minvalAsText, moment.ISO_8601);\n          if (!min.isValid()) {\n            min = moment('2010-01-01 00:00', moment.ISO_8601);\n          }\n        } else if (this.isDuration) {\n          min = moment.duration(this.minvalAsText);\n          if (!moment.isDuration(min)) {\n            min = moment.duration(1, 'seconds');\n          }\n        }\n        return min;\n      },\n      cache: false\n    },\n    /**\n     * For continuous or datetime Facets, the maximum value.\n     * @memberof! Facet\n     * @type {number|datetime}\n     * @readonly\n     */\n    maxval: {\n      deps: ['maxvalAsText', 'type'],\n      fn: function () {\n        var max;\n        if (this.isContinuous) {\n          max = parseFloat(this.maxvalAsText);\n          if (isNaN(max)) {\n            max = 100;\n          }\n        } else if (this.isDatetime) {\n          max = moment(this.maxvalAsText, moment.ISO_8601);\n          if (!max.isValid()) {\n            max = moment('2020-01-01 00:00', moment.ISO_8601);\n          }\n        } else if (this.isDuration) {\n          max = moment.duration(this.maxvalAsText);\n          if (!moment.isDuration(max)) {\n            max = moment.duration(100, 'seconds');\n          }\n        }\n        return max;\n      },\n      cache: false\n    },\n    transform: {\n      deps: ['type'],\n      fn: function () {\n        if (this.isContinuous) {\n          return this.continuousTransform;\n        } else if (this.isCategorial) {\n          return this.categorialTransform;\n        } else if (this.isDatetime) {\n          return this.datetimeTransform;\n        } else if (this.isDuration) {\n          return this.durationTransform;\n        } else if (this.isText) {\n          return this.textTransform;\n        }\n        console.error('Invalid facet');\n      },\n      cache: false\n    }\n  },\n  /**\n   * setMinMax sets the range of a continuous or time facet\n   * For facets in a dataview, the minimum is just the minimum of the facet over all active datasets,\n   * and the same for the maximum.\n   * For facets in a datset, the actual implementation is in the dataset driver.\n   *\n   * @memberof! Facet\n   */\n  setMinMax: function () {\n    var Dataset = __webpack_require__(/*! ./dataset */ \"545a\");\n    var Dataview = __webpack_require__(/*! ./dataview */ \"5066\");\n\n    var ancestor = this.collection.parent;\n    var spot;\n\n    if (ancestor instanceof Dataview) {\n      // Facet -> Facets -> Dataview -> Spot\n      spot = this.collection.parent.parent;\n      spot.setFacetMinMax(this);\n    } else if (ancestor instanceof Dataset) {\n      // Dataset -> Datasets -> Spot\n      spot = ancestor.collection.parent;\n      spot.driver.setMinMax(ancestor, this);\n    }\n  },\n  /**\n   * setCategories finds finds all values on an ordinal (categorial) axis\n   * Updates the categorialTransform of the facet\n   * For facets in a dataview, this is the union of the categories of facet over all active datasets.\n   * For facets in a dataset, the actual implementation is in the dataset driver.\n   *\n   * @memberof! Facet\n   */\n  setCategories: function () {\n    var Dataset = __webpack_require__(/*! ./dataset */ \"545a\");\n    var Dataview = __webpack_require__(/*! ./dataview */ \"5066\");\n\n    var ancestor = this.collection.parent;\n    var spot;\n\n    if (ancestor instanceof Dataview) {\n      // Facet -> Facets -> Dataview -> Spot\n      spot = this.collection.parent.parent;\n      spot.setFacetCategories(this);\n    } else if (ancestor instanceof Dataset) {\n      // Facet -> Facets -> Dataset -> Datasets -> Spot\n      spot = ancestor.collection.parent;\n      spot.driver.setCategories(ancestor, this);\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4d50\n")},5066:function(module,exports,__webpack_require__){eval("/**\n * A Dataview is a join of Datasets\n *\n * @class Dataview\n * @extends Base\n */\nvar Crossfilter = __webpack_require__(/*! crossfilter2 */ \"9263\"); // TODO: only for client side datasets\nvar BaseModel = __webpack_require__(/*! ./util/base */ \"3902\");\nvar Filters = __webpack_require__(/*! ./filter/collection */ \"7fa4\");\nvar Facets = __webpack_require__(/*! ./facet/collection */ \"51fb\");\n\nfunction getData () {\n  if (this.isPaused) {\n    return;\n  }\n  console.time('Get data');\n\n  var spot = this.parent;\n\n  return spot.driver.getData(this);\n}\n\nmodule.exports = BaseModel.extend({\n  initialize: function () {\n    // first do parent class initialization\n    BaseModel.prototype.initialize.apply(this, arguments);\n\n    /**\n     * Crossfilter instance, see [here](http://square.github.io/crossfilter/)\n     * used for client side data handling.\n     *\n     * @memberof! Dataset\n     */\n    this.crossfilter = new Crossfilter([]);\n    this.countGroup = this.crossfilter.groupAll().reduceCount();\n  },\n  props: {\n    /**\n     * Total number of datapoints in the current dataview\n     *\n     * @memberof! Dataview\n     * @readonly\n     * @type {number}\n     */\n    dataTotal: ['number', true, 0],\n    /**\n     * Number of datapoints that are currently selected\n     *\n     * @memberof! Dataview\n     * @readonly\n     * @type {number}\n     */\n    dataSelected: ['number', true, 0],\n    /**\n     * DatasetId's of active datasets\n     *\n     * @memberof! Dataview\n     * @type {String[]}\n     */\n    datasetIds: {\n      type: 'array',\n      default: function () {\n        return [];\n      }\n    }\n  },\n  session: {\n    /**\n     * isPaused when true, calls to getAllData are ignored.\n     * This is useful to suppres calls to getData\n     * when adding and removing a number of filters at once.\n     * @memberof! Dataview\n     * @type {boolean}\n     */\n    isPaused: ['boolean', true, false]\n  },\n  collections: {\n    /**\n     * A Facet collection holding pre defined facets\n     *\n     * @memberof! Dataview\n     * @type {Facet[]}\n     */\n    facets: Facets,\n    /**\n     * A Filter collection holding all active filters on the dataview\n     *\n     * @memberof! Dataview\n     * @type {Filter[]}\n     */\n    filters: Filters\n  },\n  /**\n   * Pause the dataview. This means calls to getData are blocked.\n   * Useful when updating a lot of filters and you are not interested in the intermediate state.\n   *\n   * @memberof! Dataview\n   */\n  pause: function () {\n    this.isPaused = true;\n  },\n  /**\n   * Unpause the dataview.\n   *\n   * @memberof! Dataview\n   */\n  play: function () {\n    this.isPaused = false;\n  },\n\n  /**\n   * Get data for all filters linked to this dataview.\n   * When data has become available for a filter, a `newData` event is triggered on that filter.\n   *\n   * @memberof! Dataview\n   * @function\n   */\n  getData: getData\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA2Ni5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZGF0YXZpZXcuanM/NGQ0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgRGF0YXZpZXcgaXMgYSBqb2luIG9mIERhdGFzZXRzXG4gKlxuICogQGNsYXNzIERhdGF2aWV3XG4gKiBAZXh0ZW5kcyBCYXNlXG4gKi9cbnZhciBDcm9zc2ZpbHRlciA9IHJlcXVpcmUoJ2Nyb3NzZmlsdGVyMicpOyAvLyBUT0RPOiBvbmx5IGZvciBjbGllbnQgc2lkZSBkYXRhc2V0c1xudmFyIEJhc2VNb2RlbCA9IHJlcXVpcmUoJy4vdXRpbC9iYXNlJyk7XG52YXIgRmlsdGVycyA9IHJlcXVpcmUoJy4vZmlsdGVyL2NvbGxlY3Rpb24nKTtcbnZhciBGYWNldHMgPSByZXF1aXJlKCcuL2ZhY2V0L2NvbGxlY3Rpb24nKTtcblxuZnVuY3Rpb24gZ2V0RGF0YSAoKSB7XG4gIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUudGltZSgnR2V0IGRhdGEnKTtcblxuICB2YXIgc3BvdCA9IHRoaXMucGFyZW50O1xuXG4gIHJldHVybiBzcG90LmRyaXZlci5nZXREYXRhKHRoaXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VNb2RlbC5leHRlbmQoe1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gZmlyc3QgZG8gcGFyZW50IGNsYXNzIGluaXRpYWxpemF0aW9uXG4gICAgQmFzZU1vZGVsLnByb3RvdHlwZS5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcm9zc2ZpbHRlciBpbnN0YW5jZSwgc2VlIFtoZXJlXShodHRwOi8vc3F1YXJlLmdpdGh1Yi5pby9jcm9zc2ZpbHRlci8pXG4gICAgICogdXNlZCBmb3IgY2xpZW50IHNpZGUgZGF0YSBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiEgRGF0YXNldFxuICAgICAqL1xuICAgIHRoaXMuY3Jvc3NmaWx0ZXIgPSBuZXcgQ3Jvc3NmaWx0ZXIoW10pO1xuICAgIHRoaXMuY291bnRHcm91cCA9IHRoaXMuY3Jvc3NmaWx0ZXIuZ3JvdXBBbGwoKS5yZWR1Y2VDb3VudCgpO1xuICB9LFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIFRvdGFsIG51bWJlciBvZiBkYXRhcG9pbnRzIGluIHRoZSBjdXJyZW50IGRhdGF2aWV3XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YhIERhdGF2aWV3XG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBkYXRhVG90YWw6IFsnbnVtYmVyJywgdHJ1ZSwgMF0sXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIGRhdGFwb2ludHMgdGhhdCBhcmUgY3VycmVudGx5IHNlbGVjdGVkXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YhIERhdGF2aWV3XG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBkYXRhU2VsZWN0ZWQ6IFsnbnVtYmVyJywgdHJ1ZSwgMF0sXG4gICAgLyoqXG4gICAgICogRGF0YXNldElkJ3Mgb2YgYWN0aXZlIGRhdGFzZXRzXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YhIERhdGF2aWV3XG4gICAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgICAqL1xuICAgIGRhdGFzZXRJZHM6IHtcbiAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNlc3Npb246IHtcbiAgICAvKipcbiAgICAgKiBpc1BhdXNlZCB3aGVuIHRydWUsIGNhbGxzIHRvIGdldEFsbERhdGEgYXJlIGlnbm9yZWQuXG4gICAgICogVGhpcyBpcyB1c2VmdWwgdG8gc3VwcHJlcyBjYWxscyB0byBnZXREYXRhXG4gICAgICogd2hlbiBhZGRpbmcgYW5kIHJlbW92aW5nIGEgbnVtYmVyIG9mIGZpbHRlcnMgYXQgb25jZS5cbiAgICAgKiBAbWVtYmVyb2YhIERhdGF2aWV3XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNQYXVzZWQ6IFsnYm9vbGVhbicsIHRydWUsIGZhbHNlXVxuICB9LFxuICBjb2xsZWN0aW9uczoge1xuICAgIC8qKlxuICAgICAqIEEgRmFjZXQgY29sbGVjdGlvbiBob2xkaW5nIHByZSBkZWZpbmVkIGZhY2V0c1xuICAgICAqXG4gICAgICogQG1lbWJlcm9mISBEYXRhdmlld1xuICAgICAqIEB0eXBlIHtGYWNldFtdfVxuICAgICAqL1xuICAgIGZhY2V0czogRmFjZXRzLFxuICAgIC8qKlxuICAgICAqIEEgRmlsdGVyIGNvbGxlY3Rpb24gaG9sZGluZyBhbGwgYWN0aXZlIGZpbHRlcnMgb24gdGhlIGRhdGF2aWV3XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YhIERhdGF2aWV3XG4gICAgICogQHR5cGUge0ZpbHRlcltdfVxuICAgICAqL1xuICAgIGZpbHRlcnM6IEZpbHRlcnNcbiAgfSxcbiAgLyoqXG4gICAqIFBhdXNlIHRoZSBkYXRhdmlldy4gVGhpcyBtZWFucyBjYWxscyB0byBnZXREYXRhIGFyZSBibG9ja2VkLlxuICAgKiBVc2VmdWwgd2hlbiB1cGRhdGluZyBhIGxvdCBvZiBmaWx0ZXJzIGFuZCB5b3UgYXJlIG5vdCBpbnRlcmVzdGVkIGluIHRoZSBpbnRlcm1lZGlhdGUgc3RhdGUuXG4gICAqXG4gICAqIEBtZW1iZXJvZiEgRGF0YXZpZXdcbiAgICovXG4gIHBhdXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gIH0sXG4gIC8qKlxuICAgKiBVbnBhdXNlIHRoZSBkYXRhdmlldy5cbiAgICpcbiAgICogQG1lbWJlcm9mISBEYXRhdmlld1xuICAgKi9cbiAgcGxheTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGRhdGEgZm9yIGFsbCBmaWx0ZXJzIGxpbmtlZCB0byB0aGlzIGRhdGF2aWV3LlxuICAgKiBXaGVuIGRhdGEgaGFzIGJlY29tZSBhdmFpbGFibGUgZm9yIGEgZmlsdGVyLCBhIGBuZXdEYXRhYCBldmVudCBpcyB0cmlnZ2VyZWQgb24gdGhhdCBmaWx0ZXIuXG4gICAqXG4gICAqIEBtZW1iZXJvZiEgRGF0YXZpZXdcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBnZXREYXRhOiBnZXREYXRhXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5066\n")},"51fb":function(module,exports,__webpack_require__){eval("var Collection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\nvar Facet = __webpack_require__(/*! ../facet */ \"4d50\");\n\nmodule.exports = Collection.extend({\n  model: Facet,\n  mainIndex: 'id',\n  indexes: ['name'],\n  session: {\n    needle: ['string', true, ''], // search string used on the Facet page\n    showSearch: ['boolean', true, false] // show/hide the search bar on the Facet page\n  },\n  comparator: function (left, right) {\n    return left.name.localeCompare(right.name);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTFmYi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZmFjZXQvY29sbGVjdGlvbi5qcz84ZWU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBDb2xsZWN0aW9uID0gcmVxdWlyZSgnYW1wZXJzYW5kLWNvbGxlY3Rpb24nKTtcbnZhciBGYWNldCA9IHJlcXVpcmUoJy4uL2ZhY2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbi5leHRlbmQoe1xuICBtb2RlbDogRmFjZXQsXG4gIG1haW5JbmRleDogJ2lkJyxcbiAgaW5kZXhlczogWyduYW1lJ10sXG4gIHNlc3Npb246IHtcbiAgICBuZWVkbGU6IFsnc3RyaW5nJywgdHJ1ZSwgJyddLCAvLyBzZWFyY2ggc3RyaW5nIHVzZWQgb24gdGhlIEZhY2V0IHBhZ2VcbiAgICBzaG93U2VhcmNoOiBbJ2Jvb2xlYW4nLCB0cnVlLCBmYWxzZV0gLy8gc2hvdy9oaWRlIHRoZSBzZWFyY2ggYmFyIG9uIHRoZSBGYWNldCBwYWdlXG4gIH0sXG4gIGNvbXBhcmF0b3I6IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0Lm5hbWUubG9jYWxlQ29tcGFyZShyaWdodC5uYW1lKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51fb\n")},"544d":function(module,exports,__webpack_require__){eval("var Collection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\nvar Dataset = __webpack_require__(/*! ../dataset */ \"545a\");\n\nmodule.exports = Collection.extend({\n  mainIndex: 'id',\n  indexes: ['name'],\n  model: Dataset\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQ0ZC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZGF0YXNldC9jb2xsZWN0aW9uLmpzPzkxZDkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIENvbGxlY3Rpb24gPSByZXF1aXJlKCdhbXBlcnNhbmQtY29sbGVjdGlvbicpO1xudmFyIERhdGFzZXQgPSByZXF1aXJlKCcuLi9kYXRhc2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbi5leHRlbmQoe1xuICBtYWluSW5kZXg6ICdpZCcsXG4gIGluZGV4ZXM6IFsnbmFtZSddLFxuICBtb2RlbDogRGF0YXNldFxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///544d\n")},"545a":function(module,exports,__webpack_require__){eval("/**\n * @class Dataset\n * @extends Base\n */\nvar Crossfilter = __webpack_require__(/*! crossfilter2 */ \"9263\"); // TODO: only for client side datasets\nvar BaseModel = __webpack_require__(/*! ./util/base */ \"3902\");\nvar Facets = __webpack_require__(/*! ./facet/collection */ \"51fb\");\n\nmodule.exports = BaseModel.extend({\n  initialize: function () {\n    // first do parent class initialization\n    BaseModel.prototype.initialize.apply(this, arguments);\n\n    /**\n     * Crossfilter instance, see [here](http://square.github.io/crossfilter/)\n     * used for client side data handling.\n     *\n     * @memberof! Dataset\n     */\n    this.crossfilter = new Crossfilter([]);\n    this.countGroup = this.crossfilter.groupAll().reduceCount();\n  },\n  props: {\n    /**\n     * Name of the dataset\n     * @memberof! Dataset\n     * @type {string}\n     */\n    name: {\n      type: 'string',\n      required: true,\n      default: 'Name'\n    },\n    /**\n     * URL, fi. to paper, dataset owner, etc.\n     * @memberof! Dataset\n     * @type {string}\n     */\n    URL: {\n      type: 'string',\n      required: true,\n      default: 'URL'\n    },\n    /**\n     * Database table name for server datasets\n     * @memberof! Dataset\n     * @type {string}\n     */\n    databaseTable: {\n      type: 'string',\n      default: ''\n    },\n    /**\n     * Short description of the dataset\n     * @memberof! Dataset\n     * @type {string}\n     */\n    description: {\n      type: 'string',\n      required: true,\n      default: 'Description'\n    },\n    /**\n     * If dataset is part of the current session\n     * @memberof! Dataset\n     * @type {boolean}\n     */\n    isActive: {\n      type: 'boolean',\n      required: true,\n      default: false\n    }\n  },\n  session: {\n    /**\n     * For searching through datasets URL and description.\n     * True if this dataset matches the search paramters.\n     */\n    show: {\n      type: 'boolean',\n      required: true,\n      default: true\n    },\n    data: {\n      type: 'array',\n      default: function () {\n        return [];\n      }\n    }\n  },\n  collections: {\n    /**\n     * A Facet collection holding pre defined facets\n     * @memberof! Dataset\n     * @type {Facet[]}\n     */\n    facets: Facets\n  },\n  scan: function () {\n    // Dataset -> Datasets -> spot\n    var spot = this.collection.parent;\n\n    // clear all existing facets\n    this.facets.reset();\n\n    spot.driver.scan(this);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQ1YS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZGF0YXNldC5qcz9lYTcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGNsYXNzIERhdGFzZXRcbiAqIEBleHRlbmRzIEJhc2VcbiAqL1xudmFyIENyb3NzZmlsdGVyID0gcmVxdWlyZSgnY3Jvc3NmaWx0ZXIyJyk7IC8vIFRPRE86IG9ubHkgZm9yIGNsaWVudCBzaWRlIGRhdGFzZXRzXG52YXIgQmFzZU1vZGVsID0gcmVxdWlyZSgnLi91dGlsL2Jhc2UnKTtcbnZhciBGYWNldHMgPSByZXF1aXJlKCcuL2ZhY2V0L2NvbGxlY3Rpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlTW9kZWwuZXh0ZW5kKHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIC8vIGZpcnN0IGRvIHBhcmVudCBjbGFzcyBpbml0aWFsaXphdGlvblxuICAgIEJhc2VNb2RlbC5wcm90b3R5cGUuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLyoqXG4gICAgICogQ3Jvc3NmaWx0ZXIgaW5zdGFuY2UsIHNlZSBbaGVyZV0oaHR0cDovL3NxdWFyZS5naXRodWIuaW8vY3Jvc3NmaWx0ZXIvKVxuICAgICAqIHVzZWQgZm9yIGNsaWVudCBzaWRlIGRhdGEgaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YhIERhdGFzZXRcbiAgICAgKi9cbiAgICB0aGlzLmNyb3NzZmlsdGVyID0gbmV3IENyb3NzZmlsdGVyKFtdKTtcbiAgICB0aGlzLmNvdW50R3JvdXAgPSB0aGlzLmNyb3NzZmlsdGVyLmdyb3VwQWxsKCkucmVkdWNlQ291bnQoKTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIHRoZSBkYXRhc2V0XG4gICAgICogQG1lbWJlcm9mISBEYXRhc2V0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ05hbWUnXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBVUkwsIGZpLiB0byBwYXBlciwgZGF0YXNldCBvd25lciwgZXRjLlxuICAgICAqIEBtZW1iZXJvZiEgRGF0YXNldFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgVVJMOiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ1VSTCdcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIERhdGFiYXNlIHRhYmxlIG5hbWUgZm9yIHNlcnZlciBkYXRhc2V0c1xuICAgICAqIEBtZW1iZXJvZiEgRGF0YXNldFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgZGF0YWJhc2VUYWJsZToge1xuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGRhdGFzZXRcbiAgICAgKiBAbWVtYmVyb2YhIERhdGFzZXRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ0Rlc2NyaXB0aW9uJ1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogSWYgZGF0YXNldCBpcyBwYXJ0IG9mIHRoZSBjdXJyZW50IHNlc3Npb25cbiAgICAgKiBAbWVtYmVyb2YhIERhdGFzZXRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0FjdGl2ZToge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgc2Vzc2lvbjoge1xuICAgIC8qKlxuICAgICAqIEZvciBzZWFyY2hpbmcgdGhyb3VnaCBkYXRhc2V0cyBVUkwgYW5kIGRlc2NyaXB0aW9uLlxuICAgICAqIFRydWUgaWYgdGhpcyBkYXRhc2V0IG1hdGNoZXMgdGhlIHNlYXJjaCBwYXJhbXRlcnMuXG4gICAgICovXG4gICAgc2hvdzoge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBkYXRhOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjb2xsZWN0aW9uczoge1xuICAgIC8qKlxuICAgICAqIEEgRmFjZXQgY29sbGVjdGlvbiBob2xkaW5nIHByZSBkZWZpbmVkIGZhY2V0c1xuICAgICAqIEBtZW1iZXJvZiEgRGF0YXNldFxuICAgICAqIEB0eXBlIHtGYWNldFtdfVxuICAgICAqL1xuICAgIGZhY2V0czogRmFjZXRzXG4gIH0sXG4gIHNjYW46IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBEYXRhc2V0IC0+IERhdGFzZXRzIC0+IHNwb3RcbiAgICB2YXIgc3BvdCA9IHRoaXMuY29sbGVjdGlvbi5wYXJlbnQ7XG5cbiAgICAvLyBjbGVhciBhbGwgZXhpc3RpbmcgZmFjZXRzXG4gICAgdGhpcy5mYWNldHMucmVzZXQoKTtcblxuICAgIHNwb3QuZHJpdmVyLnNjYW4odGhpcyk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///545a\n")},"55a3":function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction crossfilter_identity(d) {\n  return d;\n}\n\nmodule.exports = crossfilter_identity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTVhMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9pZGVudGl0eS5qcz81Zjg1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3Jvc3NmaWx0ZXJfaWRlbnRpdHkoZCkge1xuICByZXR1cm4gZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcm9zc2ZpbHRlcl9pZGVudGl0eTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///55a3\n")},"55c1":function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\n\nmodule.exports = {\n  reduceIncrement: crossfilter_reduceIncrement,\n  reduceDecrement: crossfilter_reduceDecrement,\n  reduceAdd: crossfilter_reduceAdd,\n  reduceSubtract: crossfilter_reduceSubtract\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTVjMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9yZWR1Y2UuanM/MjYyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyb3NzZmlsdGVyX3JlZHVjZUluY3JlbWVudChwKSB7XG4gIHJldHVybiBwICsgMTtcbn1cblxuZnVuY3Rpb24gY3Jvc3NmaWx0ZXJfcmVkdWNlRGVjcmVtZW50KHApIHtcbiAgcmV0dXJuIHAgLSAxO1xufVxuXG5mdW5jdGlvbiBjcm9zc2ZpbHRlcl9yZWR1Y2VBZGQoZikge1xuICByZXR1cm4gZnVuY3Rpb24ocCwgdikge1xuICAgIHJldHVybiBwICsgK2Yodik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyb3NzZmlsdGVyX3JlZHVjZVN1YnRyYWN0KGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHAsIHYpIHtcbiAgICByZXR1cm4gcCAtIGYodik7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWR1Y2VJbmNyZW1lbnQ6IGNyb3NzZmlsdGVyX3JlZHVjZUluY3JlbWVudCxcbiAgcmVkdWNlRGVjcmVtZW50OiBjcm9zc2ZpbHRlcl9yZWR1Y2VEZWNyZW1lbnQsXG4gIHJlZHVjZUFkZDogY3Jvc3NmaWx0ZXJfcmVkdWNlQWRkLFxuICByZWR1Y2VTdWJ0cmFjdDogY3Jvc3NmaWx0ZXJfcmVkdWNlU3VidHJhY3Rcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55c1\n")},5677:function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction permute(array, index, deep) {\n  for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\n\nmodule.exports = permute;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY3Ny5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9wZXJtdXRlLmpzPzc5ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBwZXJtdXRlKGFycmF5LCBpbmRleCwgZGVlcCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGluZGV4Lmxlbmd0aCwgY29weSA9IGRlZXAgPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFycmF5KSkgOiBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcbiAgICBjb3B5W2ldID0gYXJyYXlbaW5kZXhbaV1dO1xuICB9XG4gIHJldHVybiBjb3B5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcm11dGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5677\n")},"58ab":function(module,exports,__webpack_require__){eval('\nmodule.exports = __webpack_require__(/*! ./socket */ "0112");\n\n/**\n * Exports parser\n *\n * @api public\n *\n */\nmodule.exports.parser = __webpack_require__(/*! engine.io-parser */ "aa6c");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNThhYi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanM/ZWViYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58ab\n')},"5a80":function(module,exports,__webpack_require__){eval("/**\n * ContinuousTransfrom defines a transformation on continuous (nummerical) data.\n * Currently linear interpolation between a set of control points is implemented.\n *\n * @class ContinuousTransform\n */\nvar AmpersandModel = __webpack_require__(/*! ampersand-model */ \"3bfc\");\nvar Collection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\nvar misval = __webpack_require__(/*! ../util/misval */ \"bff6\");\n\nvar ControlPoint = __webpack_require__(/*! ./control-point */ \"09c5\");\nvar ControlPoints = Collection.extend({\n  model: ControlPoint\n});\n\n/**\n * Apply piecewise linear transformation\n * The function is constant outside the range spanned by the control points;\n * there it is set to value of the first, or the last, control points.\n *\n * @function\n * @memberof! ContinuousTransform\n * @param {number} x\n * @returns {number} fx\n */\nfunction transform (cps, x) {\n  if (x === misval) {\n    return misval;\n  }\n\n  var ncps = cps.models.length;\n  if (x <= cps.models[0].x) {\n    // outside range on left side\n    return cps.models[0].fx;\n  } else if (x >= cps.models[ncps - 1].x) {\n    // outside range on right side\n    return cps.models[ncps - 1].fx;\n  } else {\n    // inside range\n    var i = 0;\n    while (x > cps.models[i].x) {\n      i = i + 1;\n    }\n\n    // linear interpolate between fx_i and fx_(i+1)\n    var xm = cps.models[i].x;\n    var xp = cps.models[i + 1].x;\n    var fxm = cps.models[i].fx;\n    var fxp = cps.models[i + 1].fx;\n    if (xp === xm) {\n      return 0.5 * (fxm + fxp);\n    } else {\n      return fxm + (x - xm) * (fxp - fxm) / (xp - xm);\n    }\n  }\n}\n\n/**\n * The inverse of the transform\n *\n * @function\n * @memberof! ContinuousTransform\n * @param {number} fx\n * @returns {number} x\n */\nfunction inverse (cps, fx) {\n  if (fx === misval) {\n    return misval;\n  }\n\n  var ncps = cps.models.length;\n  if (fx <= cps.models[0].fx) {\n    // outside range on left side\n    return cps.models[0].x;\n  } else if (fx >= cps.models[ncps - 1].fx) {\n    // outside range on right side\n    return cps.models[ncps - 1].x;\n  } else {\n    // inside range\n    var i = 0;\n    while (fx > cps.models[i].fx) {\n      i = i + 1;\n    }\n\n    // linear interpolate between fx_i and fx_(i+1)\n    var xm = cps.models[i].x;\n    var xp = cps.models[i + 1].x;\n    var fxm = cps.models[i].fx;\n    var fxp = cps.models[i + 1].fx;\n    if (fxp === fxm) {\n      return 0.5 * (xm + xp);\n    } else {\n      return xm + (fx - fxm) * (xp - xm) / (fxp - fxm);\n    }\n  }\n}\n\nmodule.exports = AmpersandModel.extend({\n  props: {\n    /**\n     * The type of continuous transform, can be none, or percentiles\n     * Use isNone, or isPercentiles, check for transform type\n     * @memberof! ContinuousTransform\n     */\n    type: {\n      type: 'string',\n      required: true,\n      default: 'none',\n      values: ['none', 'percentiles']\n    },\n    transformedType: {\n      type: 'string',\n      required: true,\n      default: 'continuous',\n      values: ['continuous']\n    }\n  },\n  derived: {\n    isNone: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'none';\n      }\n    },\n    isPercentiles: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'percentiles';\n      }\n    },\n    /**\n     * The minimum value this facet can take, after the transformation has been applied\n     * @type {number}\n     * @memberof! ContinuousTransform\n     */\n    transformedMin: {\n      deps: ['type'],\n      fn: function () {\n        if (this.isPercentiles) {\n          return 0;\n        } else if (this.isNone) {\n          return this.parent.minval;\n        } else {\n          console.error('Invalid continuous transform');\n        }\n      },\n      cache: false\n    },\n    /**\n     * The maximum value this facet can take, after the transformation has been applied\n     * @type {number}\n     * @memberof! ContinuousTransform\n     */\n    transformedMax: {\n      deps: ['type'],\n      fn: function () {\n        if (this.isPercentiles) {\n          return 100;\n        } else if (this.isNone) {\n          return this.parent.maxval;\n        } else {\n          console.error('Invalid continuous transform');\n        }\n      },\n      cache: false\n    },\n    /**\n     * The minimum value this facet can take, after the transformation has been applied\n     *\n     * @type {string}\n     * @memberof! ContinuousTransform\n     */\n    transformedMinAsText: {\n      deps: ['transformedMin', 'transformedType'],\n      fn: function () {\n        var minval = this.transformedMin;\n        if (this.transformedType === 'datetime') {\n          return minval.format();\n        } else {\n          return minval.toString();\n        }\n      },\n      cache: false\n    },\n    /**\n     * The maximum value this facet can take, after the transformation has been applied\n     *\n     * @type {string}\n     * @memberof! ContinuousTransform\n     */\n    transformedMaxAsText: {\n      deps: ['transformedMax', 'transformedType'],\n      fn: function () {\n        var maxval = this.transformedMax;\n        if (this.transformedType === 'datetime') {\n          return maxval.format();\n        } else {\n          return maxval.toString();\n        }\n      },\n      cache: false\n    }\n  },\n  collections: {\n    cps: ControlPoints\n  },\n  transform: function (x) {\n    return transform(this.cps, x);\n  },\n  inverse: function (fx) {\n    return inverse(this.cps, fx);\n  },\n  reset: function () {\n    this.type = 'none';\n    this.cps.reset();\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5a80\n")},6176:function(module,exports){eval("module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE3Ni5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz8xYjA4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6176\n")},"636d":function(module,exports){eval("\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM2ZC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanM/ZWVlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogRXhwb3NlIGBFbWl0dGVyYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcbn07XG5cbi8qKlxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICAodGhpcy5fY2FsbGJhY2tzW2V2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF0gfHwgW10pXG4gICAgLnB1c2goZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblxuICBmdW5jdGlvbiBvbigpIHtcbiAgICBzZWxmLm9mZihldmVudCwgb24pO1xuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBvbi5mbiA9IGZuO1xuICB0aGlzLm9uKGV2ZW50LCBvbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXG4gIC8vIGFsbFxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzcGVjaWZpYyBldmVudFxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XTtcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xuXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcbiAgdmFyIGNiO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuXG4gIGlmIChjYWxsYmFja3MpIHtcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XSB8fCBbXTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///636d\n")},"6b20":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Module dependencies.\n */\n\nvar Transport = __webpack_require__(/*! ../transport */ \"0d97\");\nvar parser = __webpack_require__(/*! engine.io-parser */ \"aa6c\");\nvar parseqs = __webpack_require__(/*! parseqs */ \"914f\");\nvar inherit = __webpack_require__(/*! component-inherit */ \"42bf\");\nvar yeast = __webpack_require__(/*! yeast */ \"c16d\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('engine.io-client:websocket');\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\nvar NodeWebSocket;\nif (typeof window === 'undefined') {\n  try {\n    NodeWebSocket = __webpack_require__(/*! ws */ 1);\n  } catch (e) { }\n}\n\n/**\n * Get either the `WebSocket` or `MozWebSocket` globals\n * in the browser or try to resolve WebSocket-compatible\n * interface exposed by `ws` for Node-like environment.\n */\n\nvar WebSocket = BrowserWebSocket;\nif (!WebSocket && typeof window === 'undefined') {\n  WebSocket = NodeWebSocket;\n}\n\n/**\n * Module exports.\n */\n\nmodule.exports = WS;\n\n/**\n * WebSocket transport constructor.\n *\n * @api {Object} connection options\n * @api public\n */\n\nfunction WS (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  this.perMessageDeflate = opts.perMessageDeflate;\n  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\n  if (!this.usingBrowserWebSocket) {\n    WebSocket = NodeWebSocket;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(WS, Transport);\n\n/**\n * Transport name.\n *\n * @api public\n */\n\nWS.prototype.name = 'websocket';\n\n/*\n * WebSockets support binary\n */\n\nWS.prototype.supportsBinary = true;\n\n/**\n * Opens socket.\n *\n * @api private\n */\n\nWS.prototype.doOpen = function () {\n  if (!this.check()) {\n    // let probe timeout\n    return;\n  }\n\n  var uri = this.uri();\n  var protocols = void (0);\n  var opts = {\n    agent: this.agent,\n    perMessageDeflate: this.perMessageDeflate\n  };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  if (this.extraHeaders) {\n    opts.headers = this.extraHeaders;\n  }\n  if (this.localAddress) {\n    opts.localAddress = this.localAddress;\n  }\n\n  try {\n    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n  } catch (err) {\n    return this.emit('error', err);\n  }\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  if (this.ws.supports && this.ws.supports.binary) {\n    this.supportsBinary = true;\n    this.ws.binaryType = 'nodebuffer';\n  } else {\n    this.ws.binaryType = 'arraybuffer';\n  }\n\n  this.addEventListeners();\n};\n\n/**\n * Adds event listeners to the socket\n *\n * @api private\n */\n\nWS.prototype.addEventListeners = function () {\n  var self = this;\n\n  this.ws.onopen = function () {\n    self.onOpen();\n  };\n  this.ws.onclose = function () {\n    self.onClose();\n  };\n  this.ws.onmessage = function (ev) {\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function (e) {\n    self.onError('websocket error', e);\n  };\n};\n\n/**\n * Writes data to socket.\n *\n * @param {Array} array of packets.\n * @api private\n */\n\nWS.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n\n  // encodePacket efficient as it uses WS framing\n  // no need for encodePayload\n  var total = packets.length;\n  for (var i = 0, l = total; i < l; i++) {\n    (function (packet) {\n      parser.encodePacket(packet, self.supportsBinary, function (data) {\n        if (!self.usingBrowserWebSocket) {\n          // always create a new object (GH-437)\n          var opts = {};\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (self.perMessageDeflate) {\n            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;\n            if (len < self.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (self.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            self.ws.send(data);\n          } else {\n            self.ws.send(data, opts);\n          }\n        } catch (e) {\n          debug('websocket closed before onclose event');\n        }\n\n        --total || done();\n      });\n    })(packets[i]);\n  }\n\n  function done () {\n    self.emit('flush');\n\n    // fake drain\n    // defer to next tick to allow Socket to clear writeBuffer\n    setTimeout(function () {\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n};\n\n/**\n * Called upon close\n *\n * @api private\n */\n\nWS.prototype.onClose = function () {\n  Transport.prototype.onClose.call(this);\n};\n\n/**\n * Closes socket.\n *\n * @api private\n */\n\nWS.prototype.doClose = function () {\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nWS.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  // avoid port if default for schema\n  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\n    ('ws' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // append timestamp to URI\n  if (this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  // communicate binary support capabilities\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\n/**\n * Feature detection for WebSocket.\n *\n * @return {Boolean} whether this transport is available.\n * @api public\n */\n\nWS.prototype.check = function () {\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6b20\n")},"6fba":function(module,exports,__webpack_require__){eval("\n/**\n * Module dependencies.\n */\n\nvar debug = __webpack_require__(/*! debug */ \"8233\")('socket.io-parser');\nvar json = __webpack_require__(/*! json3 */ \"3b17\");\nvar Emitter = __webpack_require__(/*! component-emitter */ \"636d\");\nvar binary = __webpack_require__(/*! ./binary */ \"ea82\");\nvar isBuf = __webpack_require__(/*! ./is-buffer */ \"419b\");\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'ACK',\n  'ERROR',\n  'BINARY_EVENT',\n  'BINARY_ACK'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function(obj, callback){\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    encodeAsBinary(obj, callback);\n  }\n  else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n  var str = '';\n  var nsp = false;\n\n  // first is type\n  str += obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    str += obj.attachments;\n    str += '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' != obj.nsp) {\n    nsp = true;\n    str += obj.nsp;\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    if (nsp) {\n      str += ',';\n      nsp = false;\n    }\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    if (nsp) str += ',';\n    str += json.stringify(obj.data);\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function(obj) {\n  var packet;\n  if ('string' == typeof obj) {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments === 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  }\n  else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  }\n  else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var p = {};\n  var i = 0;\n\n  // look up type\n  p.type = Number(str.charAt(0));\n  if (null == exports.types[p.type]) return error();\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\n    var buf = '';\n    while (str.charAt(++i) != '-') {\n      buf += str.charAt(i);\n      if (i == str.length) break;\n    }\n    if (buf != Number(buf) || str.charAt(i) != '-') {\n      throw new Error('Illegal attachments');\n    }\n    p.attachments = Number(buf);\n  }\n\n  // look up namespace (if any)\n  if ('/' == str.charAt(i + 1)) {\n    p.nsp = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' == c) break;\n      p.nsp += c;\n      if (i == str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' !== next && Number(next) == next) {\n    p.id = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      p.id += str.charAt(i);\n      if (i == str.length) break;\n    }\n    p.id = Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    p = tryParse(p, str.substr(i));\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\nfunction tryParse(p, str) {\n  try {\n    p.data = json.parse(str);\n  } catch(e){\n    return error();\n  }\n  return p; \n};\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function() {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(data){\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6fba\n")},"720c":function(module,exports,__webpack_require__){eval("/**\n * Client side filtering using crossfilter\n * Due to limitation of crossfilter with array (or data that has no natrual ordering), this will not work as expected:\n * * dimension: `function (d) {return [d.x, d.y, d.z]}`\n * * group: `function (d) {return [d.x / 10 , d.y / 10, d.z / 10]}`\n *\n * Therefore, we preform grouping already in the dimension itself, and join the array to a string.\n * Strings have a natural ordering and thus can be used as dimension value.\n * * dimension: `function (d) -> \"d.x/10|d.y/10|d.z/10\"`\n * * group: `function (d) {return d;}`\n *\n * @module driver/client\n */\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\n\nvar utildx = __webpack_require__(/*! ../util/crossfilter */ \"adfa\");\nvar misval = __webpack_require__(/*! ../util/misval */ \"bff6\");\n\nvar grpIdxToName = {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'};\nvar aggRankToName = {1: 'aa', 2: 'bb', 3: 'cc', 4: 'dd', 5: 'ee'};\n\n/**\n * setMinMax sets the range of a continuous or time facet\n *\n * @param {Dataset} dataset\n * @param {Facet} facet\n */\nfunction setMinMax (dataset, facet) {\n  // we need the value just before a transformation, so baseValueFn\n  var valFn = utildx.baseValueFn(facet);\n\n  // to be able to mark the value as missing we need it unprocessed, so rawValueFn\n  var rawValFn = utildx.rawValueFn(facet);\n\n  var lessFn;\n  var moreFn;\n  if (facet.isDatetime) {\n    lessFn = function (a, b) { return (b === misval || a.isBefore(b)); };\n    moreFn = function (a, b) { return (b === misval || b.isBefore(a)); };\n  } else {\n    lessFn = function (a, b) { return (b === misval || a < b); };\n    moreFn = function (a, b) { return (b === misval || a > b); };\n  }\n\n  var minval = misval;\n  var rawMin = misval;\n\n  var maxval = misval;\n  var rawMax = misval;\n\n  dataset.data.forEach(function (d) {\n    var rawV = rawValFn(d);\n    var v = valFn(d);\n\n    if (v !== misval) {\n      if (lessFn(v, minval)) {\n        minval = v;\n        rawMin = rawV;\n      }\n      if (moreFn(v, maxval)) {\n        maxval = v;\n        rawMax = rawV;\n      }\n    }\n  });\n\n  if (minval !== misval) {\n    if (facet.isContinuous) {\n      facet.minvalAsText = minval.toString();\n    } else if (facet.isDatetime) {\n      facet.minvalAsText = minval.toISOString();\n    } else if (facet.isDuration) {\n      facet.minvalAsText = minval.toISOString();\n    }\n    facet.rawMinval = rawMin;\n  } else {\n    facet.minvalAsText = '';\n    facet.rawMinval = misval;\n  }\n\n  if (maxval !== misval) {\n    if (facet.isContinuous) {\n      facet.maxvalAsText = maxval.toString();\n    } else if (facet.isDatetime) {\n      facet.maxvalAsText = maxval.toISOString();\n    } else if (facet.isDuration) {\n      facet.maxvalAsText = maxval.toISOString();\n    }\n    facet.rawMaxval = rawMax;\n  } else {\n    facet.maxvalAsText = '';\n    facet.rawMaxval = misval;\n  }\n}\n\n/**\n * setCategories finds finds all values on an ordinal (categorial) axis\n * Updates the categorialTransform of the facet\n *\n * @param {Dataset} dataset\n * @param {Facet} facet\n */\nfunction setCategories (dataset, facet) {\n  // we need the value just before a transformation, so baseValueFn\n  var valFn = utildx.baseValueFn(facet);\n\n  var p = {};\n  var Plength = 0;\n  dataset.data.forEach(function (d, i) {\n    var vals = valFn(d);\n    if (vals instanceof Array) {\n      vals.forEach(function (val) {\n        if (p.hasOwnProperty(val)) {\n          p[val]++;\n        } else {\n          if (Plength < 75) { // NOTE: limit to maximally 75 categories\n            p[val] = 1;\n            Plength++;\n          }\n        }\n      });\n    } else {\n      if (p.hasOwnProperty(vals)) {\n        p[vals]++;\n      } else {\n        if (Plength < 75) { // NOTE: limit to maximally 75 categories\n          p[vals] = 1;\n          Plength++;\n        }\n      }\n    }\n  });\n\n  facet.categorialTransform.reset();\n\n  Object.keys(p).forEach(function (key) {\n    // TODO: missing data should be mapped to a misval from misvalAsText\n    var keyAsString = key.toString();\n    var groupAsString = keyAsString;\n\n    facet.categorialTransform.rules.add({expression: keyAsString, count: p[key], group: groupAsString});\n  });\n}\n\n/**\n * Calculate 100 percentiles (ie. 1,2,3,4 etc.), and initialize the `facet.continuousTransform`\n * to an approximate percentile mapping.\n * Use the recommended method from [NIST](http://www.itl.nist.gov/div898/handbook/prc/section2/prc262.htm)\n * See also the discussion on [Wikipedia](https://en.wikipedia.org/wiki/Percentile)\n *\n * @param {Dataset} dataset\n * @param {Facet} facet\n */\nfunction setPercentiles (dataset, facet) {\n  // we need the value just before a transformation, so baseValueFn\n  var basevalueFn = utildx.baseValueFn(facet);\n  var data = dataset.data;\n\n  data.sort(function (a, b) {\n    var valA = basevalueFn(a);\n    var valB = basevalueFn(b);\n\n    if (valA === valB) {\n      return 0;\n    }\n    if (valA === misval) {\n      return -1;\n    }\n    if (valB === misval) {\n      return 1;\n    }\n\n    if (valA < valB) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n\n  var tf = facet.continuousTransform;\n  var x, i;\n\n  // drop missing values, which should be sorted at the start of the array\n  i = 0;\n  while (basevalueFn(data[i]) === misval && i < data.length) {\n    i++;\n  }\n  data.splice(0, i);\n\n  // start clean\n  tf.reset();\n\n  // add minimum value as control points p0 and p1\n  tf.cps.add({x: basevalueFn(data[0]), fx: 0});\n  tf.cps.add({x: basevalueFn(data[0]), fx: 0});\n\n  var p, value;\n  for (p = 1; p < 100; p++) {\n    x = (p * 0.01) * (data.length + 1) - 1; // indexing starts at zero, not at one\n    i = Math.trunc(x);\n    value = (1 - x + i) * basevalueFn(data[i]) + (x - i) * basevalueFn(data[i + 1]);\n    tf.cps.add({x: value, fx: p});\n  }\n\n  // add maximum value as p101 and p102\n  tf.cps.add({x: basevalueFn(data[data.length - 1]), fx: 100});\n  tf.cps.add({x: basevalueFn(data[data.length - 1]), fx: 100});\n\n  tf.type = 'percentiles';\n}\n\n/**\n * Autoconfigure a dataset:\n * 1. pick 10 random elements\n * 2. create facets for their properties\n * 3. add facets' values over the sample to the facet.description\n * 4. set range or categories\n *\n * @param {Dataset} dataset\n */\nfunction scan (dataset) {\n  function facetExists (facets, path) {\n    var exists = false;\n    facets.forEach(function (f) {\n      if (f.accessor === path || f.accessor === path + '[]') {\n        exists = true;\n      }\n    });\n    return exists;\n  }\n\n  function addValue (values, v, missing) {\n    if (v === misval) {\n      v = missing;\n    }\n    if (values.indexOf(v) === -1) {\n      values.push(v);\n    }\n  }\n\n  function guessType (values) {\n    var mytype = {\n      continuous: 0,\n      text: 0,\n      datetime: 0,\n      duration: 0,\n      categorial: 0\n    };\n    values.forEach(function (value) {\n      if (moment(value, moment.ISO_8601).isValid()) {\n        // \"2016-08-17 17:25:00+01\"\n        mytype.datetime++;\n      } else if (\n          (moment.duration(value).asMilliseconds() !== 0) &&\n          (typeof value === 'string') &&\n          (value[0].toLowerCase() === 'p')) {\n        // \"P10Y\"\n        mytype.duration++;\n      } else if (value == +value) {  // eslint-disable-line eqeqeq\n        // \"10\" or 10\n        mytype.continuous++;\n      } else {\n        // \"hello world\"\n        mytype.categorial++;\n      }\n    });\n\n    // get facetType with highest count\n    var max = -1;\n    var facetType;\n    Object.keys(mytype).forEach(function (key) {\n      if (mytype[key] > max) {\n        facetType = key;\n        max = mytype[key];\n      }\n    });\n\n    return facetType;\n  }\n\n  function tryFacet (facets, data, path, value) {\n    // Check for existence\n    if (facetExists(facets, path)) {\n      return;\n    }\n\n    // Create a new facet\n    var facet = facets.add({\n      name: path,\n      accessor: path,\n      type: 'text'\n    });\n\n    // Sample values\n    var baseValueFn = utildx.baseValueFn(facet);\n    var values = [];\n    var isArray = false;\n\n    data.forEach(function (d) {\n      var value = baseValueFn(d);\n      if (value instanceof Array) {\n        isArray = true;\n        value.forEach(function (v) {\n          addValue(values, v, facet.misval[0]);\n        });\n      } else {\n        addValue(values, value, facet.misval[0]);\n      }\n    });\n\n    // Reconfigure facet\n    facet.accessor = isArray ? facet.accessor + '[]' : facet.accessor;\n    facet.type = guessType(values);\n    facet.description = values.join(', ').match('^.{0,40}') + '...';\n    facet.isActive = true;\n  }\n\n  function recurse (facets, data, path, tree) {\n    var props = Object.getOwnPropertyNames(tree);\n    props.forEach(function (name) {\n      var subpath;\n      if (path) {\n        subpath = path + '##' + name;\n      } else {\n        subpath = name;\n      }\n\n      if (tree[name] instanceof Array) {\n        // add an array as a itself as a facet, ie. labelset, to prevent adding each element as separate facet\n        // also add the array length as facet\n        tryFacet(facets, data, subpath, tree[name]);\n        tryFacet(facets, data, subpath + '.length', tree[name].length);\n      } else if (tree[name] instanceof Object) {\n        // recurse into objects\n        recurse(facets, data, subpath, tree[name]);\n      } else {\n        // add strings and numbers as facets\n        tryFacet(facets, data, subpath, tree[name]);\n      }\n    });\n  }\n\n  // Add facets\n  var data = dataset.data.slice(0, 10);\n  data.forEach(function (d) {\n    recurse(dataset.facets, data, '', d);\n  });\n\n  dataset.facets.forEach(function (facet) {\n    if (facet.isCategorial) {\n      setCategories(dataset, facet);\n    } else if (facet.isContinuous || facet.isDatetime) {\n      setMinMax(dataset, facet);\n    }\n  });\n  dataset.trigger('syncFacets');\n}\n\n/**\n * Initialize the data filter, and construct the getData callback function on the filter.\n * @param {Dataview} dataview\n * @param {Filter} filter\n */\nfunction initDataFilter (dataview, filter) {\n  var facet;\n\n  // use the partitions as groups:\n  var groupFns = [];\n  filter.partitions.forEach(function (partition) {\n    facet = dataview.facets.get(partition.facetName, 'name');\n    var valueFn = utildx.valueFn(facet);\n    var groupFn = utildx.groupFn(partition);\n\n    var rank = partition.rank;\n    groupFns[rank - 1] = function (d) {\n      return groupFn(valueFn(d));\n    };\n  });\n\n  // and then create keys from the group values\n  var groupsKeys = function (d) {\n    var keys = [];\n\n    groupFns.forEach(function (groupFn) {\n      var result = groupFn(d);\n      var newKeys = [];\n      if (keys.length === 0) {\n        if (result instanceof Array) {\n          newKeys = result;\n        } else {\n          newKeys = [result];\n        }\n      } else {\n        if (result instanceof Array) {\n          keys.forEach(function (oldKey) {\n            result.forEach(function (key) {\n              newKeys.push(oldKey + '|' + key);\n            });\n          });\n        } else {\n          keys.forEach(function (oldKey) {\n            newKeys.push(oldKey + '|' + result);\n          });\n        }\n      }\n      keys = newKeys;\n    });\n    return keys;\n  };\n\n  // set up the facet valueFns to aggregate over\n  // and the reduction functions for them\n  var aggregateFns = [];\n  var aggregateRanks = [];\n  var reduceFns = [];\n  filter.aggregates.forEach(function (aggregate) {\n    facet = dataview.facets.get(aggregate.facetName, 'name');\n    aggregateRanks.push(aggregate.rank);\n    aggregateFns.push(utildx.valueFn(facet));\n    reduceFns.push(utildx.reduceFn(aggregate));\n  });\n\n  // setup the crossfilter dimensions and groups\n  filter.dimension = dataview.crossfilter.dimension(function (d) {\n    return groupsKeys(d);\n  }, true);\n  var crossfilterGroup = filter.dimension.group(function (d) { return d; });\n\n  crossfilterGroup.reduce(\n    // add\n    function (p, d) {\n      if (aggregateFns.length === 0) {\n        p[0] = p[0] ? p[0] : {count: 0};\n        p[0].count += 1;\n      }\n\n      aggregateFns.forEach(function (aggregateFn, i) {\n        var val = aggregateFn(d);\n        if (val !== misval) {\n          val = parseFloat(val);\n          p[i] = p[i] || {count: 0, sum: 0, sumsquares: 0};\n          p[i].count += 1;\n          p[i].sum += val;\n          p[i].sumsquares += val * val;\n        }\n      });\n      return p;\n    },\n    // subtract\n    function (p, d) {\n      if (aggregateFns.length === 0) {\n        p[0] = p[0] ? p[0] : {count: 0};\n        p[0].count -= 1;\n      }\n\n      aggregateFns.forEach(function (aggregateFn, i) {\n        var val = aggregateFn(d);\n        if (val !== misval) {\n          val = parseFloat(val);\n          p[i] = p[i] || {count: 0, sum: 0, sumsquares: 0};\n          p[i].count -= 1;\n          p[i].sum -= val;\n          p[i].sumsquares -= val * val;\n        }\n      });\n      return p;\n    },\n    // initialize\n    function () {\n      return [];\n    }\n  );\n\n  filter.getData = function () {\n    filter.data = [];\n\n    // Get data from crossfilter\n    var groups = crossfilterGroup.all();\n\n    // { key: \"group1|group2|...\",\n    //   value: [ {count: agg1, sum: agg1}\n    //            {count: agg2, sum: agg2}\n    //            {count: agg3, sum: agg3}\n    //                    ...             ]}\n    groups.forEach(function (group) {\n      var item = {};\n\n      // turn the string back into individual group values\n      var groupsKeys;\n      if (typeof group.key === 'string') {\n        groupsKeys = group.key.split('|');\n      } else {\n        // shortcut for numeric non-partitioned case\n        groupsKeys = [group.key];\n      }\n\n      // add paritioning data to the item\n      groupsKeys.forEach(function (subkey, i) {\n        item[grpIdxToName[i]] = subkey;\n      });\n\n      // add aggregated data to the item\n      reduceFns.forEach(function (reduceFn, i) {\n        var name = aggRankToName[aggregateRanks[i]];\n        item[name] = reduceFn(group.value[i]);\n      });\n\n      // add an overall count\n      // becuase the filtering removes missing data points, this is the same as\n      // the count for any one of the aggregates\n      item.count = group.value[0] ? group.value[0].count : 0;\n\n      filter.data.push(item);\n    });\n  };\n}\n\n/**\n * The opposite or initDataFilter, it should remove the filter and deallocate other configuration\n * related to the filter.\n * @param {Dataview} dataview\n * @param {Filter} filter\n */\nfunction releaseDataFilter (dataview, filter) {\n  if (filter.dimension) {\n    filter.dimension.filterAll();\n    filter.dimension.dispose();\n    delete filter.dimension;\n    delete filter.getData;\n  }\n}\n\n/**\n * Change the filter parameters for an initialized filter\n * @param {Filter} filter\n */\nfunction updateDataFilter (filter) {\n  if (filter.dimension) {\n    filter.dimension.filterFunction(filter.filterFunction());\n  }\n}\n\n/**\n * Get data for every filter, and trigger a 'newData' event\n *\n * Returns a Promise that resolves to the dataview when all data and metadata has been updated\n *\n * @param {Dataview} dataview\n * @returns {Promise}\n */\nfunction getData (dataview) {\n  dataview.filters.forEach(function (filter) {\n    if (filter.isInitialized) {\n      filter.getData();\n      filter.trigger('newData');\n    }\n  });\n\n  // update counts\n  dataview.dataTotal = dataview.crossfilter.size();\n  dataview.dataSelected = dataview.countGroup.value();\n  dataview.trigger('newMetaData');\n\n  return Promise.resolve(dataview);\n}\n\nmodule.exports = {\n  driverType: 'client',\n  scan: scan,\n  setMinMax: setMinMax,\n  setCategories: setCategories,\n  setPercentiles: setPercentiles,\n  initDataFilter: initDataFilter,\n  releaseDataFilter: releaseDataFilter,\n  updateDataFilter: updateDataFilter,\n  getData: getData\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///720c\n")},"753f":function(module,exports,__webpack_require__){"use strict";eval('\n\nvar crossfilter_identity = __webpack_require__(/*! ./identity */ "55a3");\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n\nmodule.exports = insertionsort_by(crossfilter_identity);\nmodule.exports.by = insertionsort_by;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUzZi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9pbnNlcnRpb25zb3J0LmpzPzJkNmUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3Jvc3NmaWx0ZXJfaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbmZ1bmN0aW9uIGluc2VydGlvbnNvcnRfYnkoZikge1xuXG4gIGZ1bmN0aW9uIGluc2VydGlvbnNvcnQoYSwgbG8sIGhpKSB7XG4gICAgZm9yICh2YXIgaSA9IGxvICsgMTsgaSA8IGhpOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGogPSBpLCB0ID0gYVtpXSwgeCA9IGYodCk7IGogPiBsbyAmJiBmKGFbaiAtIDFdKSA+IHg7IC0taikge1xuICAgICAgICBhW2pdID0gYVtqIC0gMV07XG4gICAgICB9XG4gICAgICBhW2pdID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICByZXR1cm4gaW5zZXJ0aW9uc29ydDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRpb25zb3J0X2J5KGNyb3NzZmlsdGVyX2lkZW50aXR5KTtcbm1vZHVsZS5leHBvcnRzLmJ5ID0gaW5zZXJ0aW9uc29ydF9ieTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///753f\n')},"780f":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Module dependencies.\n */\n\nvar parseuri = __webpack_require__(/*! parseuri */ \"64a0\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('socket.io-client:url');\n\n/**\n * Module exports.\n */\n\nmodule.exports = url;\n\n/**\n * URL parser.\n *\n * @param {String} url\n * @param {Object} An object meant to mimic window.location.\n *                 Defaults to window.location.\n * @api public\n */\n\nfunction url (uri, loc) {\n  var obj = uri;\n\n  // default to window.location\n  loc = loc || global.location;\n  if (null == uri) uri = loc.protocol + '//' + loc.host;\n\n  // relative path support\n  if ('string' === typeof uri) {\n    if ('/' === uri.charAt(0)) {\n      if ('/' === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug('protocol-less url %s', uri);\n      if ('undefined' !== typeof loc) {\n        uri = loc.protocol + '//' + uri;\n      } else {\n        uri = 'https://' + uri;\n      }\n    }\n\n    // parse\n    debug('parse %s', uri);\n    obj = parseuri(uri);\n  }\n\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = '80';\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = '443';\n    }\n  }\n\n  obj.path = obj.path || '/';\n\n  var ipv6 = obj.host.indexOf(':') !== -1;\n  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\n\n  // define unique id\n  obj.id = obj.protocol + '://' + host + ':' + obj.port;\n  // define href\n  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));\n\n  return obj;\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzgwZi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzPzAwMGMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///780f\n")},"7d91":function(module,exports){eval("\n/**\n * Gets the keys for an object.\n *\n * @return {Array} keys\n * @api private\n */\n\nmodule.exports = Object.keys || function keys (obj){\n  var arr = [];\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var i in obj) {\n    if (has.call(obj, i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiN2Q5MS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcz83NTljIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBHZXRzIHRoZSBrZXlzIGZvciBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybiB7QXJyYXl9IGtleXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyAob2JqKXtcbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGkpKSB7XG4gICAgICBhcnIucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7d91\n")},"7fa4":function(module,exports,__webpack_require__){eval('var Collection = __webpack_require__(/*! ampersand-collection */ "7bd3");\nvar Filter = __webpack_require__(/*! ../filter */ "9476");\n\nmodule.exports = Collection.extend({\n  mainIndex: \'id\',\n  model: Filter,\n  comparator: function (a, b) {\n    if (a.row > b.row || a.row === b.row && a.col > b.col) {\n      return 1;\n    }\n    if (a.col === b.col) {\n      return 0;\n    }\n    return -1;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiN2ZhNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZmlsdGVyL2NvbGxlY3Rpb24uanM/ODgyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ2FtcGVyc2FuZC1jb2xsZWN0aW9uJyk7XG52YXIgRmlsdGVyID0gcmVxdWlyZSgnLi4vZmlsdGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbi5leHRlbmQoe1xuICBtYWluSW5kZXg6ICdpZCcsXG4gIG1vZGVsOiBGaWx0ZXIsXG4gIGNvbXBhcmF0b3I6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEucm93ID4gYi5yb3cgfHwgYS5yb3cgPT09IGIucm93ICYmIGEuY29sID4gYi5jb2wpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoYS5jb2wgPT09IGIuY29sKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7fa4\n')},8191:function(module,exports,__webpack_require__){eval("/**\n * Partition\n *\n * Describes a partitioning of the data, based on the values a Facet can take.\n *\n * @class Partition\n * @extends Base\n */\nvar BaseModel = __webpack_require__(/*! ./util/base */ \"3902\");\nvar Groups = __webpack_require__(/*! ./partition/group-collection */ \"0056\");\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\nvar selection = __webpack_require__(/*! ./util/selection */ \"1278\");\nvar util = __webpack_require__(/*! ./util/time */ \"d45b\");\n\n/*\n * @param {Partition} partition\n * @param {Group[]} groups\n * @memberof! Partition\n */\nfunction setDatetimeGroups (partition, groups) {\n  var timeStart = partition.minval;\n  var timeEnd = partition.maxval;\n  var timeRes = util.getDatetimeResolution(timeStart, timeEnd);\n  var timeZone = partition.zone;\n\n  var current = moment(timeStart);\n  while ((!current.isAfter(timeEnd)) && groups.length < 500) {\n    groups.add({\n      min: moment(current).tz(timeZone).startOf(timeRes),\n      max: moment(current).tz(timeZone).endOf(timeRes),\n      value: moment(current).tz(timeZone).startOf(timeRes).format(),\n      label: moment(current).tz(timeZone).startOf(timeRes).format()\n    });\n    current.add(1, timeRes);\n  }\n}\n\n/*\n * @param {Partition} partition\n * @param {Group[]} groups\n * @memberof! Partition\n */\nfunction setDurationGroups (partition, groups) {\n  var dStart = partition.minval;\n  var dEnd = partition.maxval;\n  var dRes = util.getDurationResolution(dStart, dEnd);\n\n  var current = Math.floor(parseFloat(dStart.as(dRes)));\n  var last = Math.floor(parseFloat(dEnd.as(dRes)));\n\n  while (current < last) {\n    groups.add({\n      min: moment.duration(current, dRes),\n      max: moment.duration(current + 1, dRes),\n      value: moment.duration(current, dRes).toISOString(),\n      label: moment.duration(current, dRes).toISOString()\n    });\n\n    current = current + 1;\n  }\n}\n\n/*\n * Setup a grouping based on the `partition.groupingContinuous`, `partition.minval`,\n * `partition.maxval`, and the `partition.groupingParam`.\n * @memberof! Partition\n * @param {Partition} partition\n * @param {Group[]} groups\n */\nfunction setContinuousGroups (partition, groups) {\n  var param = partition.groupingParam;\n  var x0, x1, size, nbins;\n\n  if (partition.groupFixedN) {\n    // A fixed number of equally sized bins\n    nbins = param;\n    x0 = partition.minval;\n    x1 = partition.maxval;\n    size = (x1 - x0) / nbins;\n  } else if (partition.groupFixedS) {\n    // A fixed bin size\n    size = param;\n    x0 = Math.floor(partition.minval / size) * size;\n    x1 = Math.ceil(partition.maxval / size) * size;\n    nbins = (x1 - x0) / size;\n  } else if (partition.groupFixedSC) {\n    // A fixed bin size, centered on 0\n    size = param;\n    x0 = (Math.floor(partition.minval / size) - 0.5) * size;\n    x1 = (Math.ceil(partition.maxval / size) + 0.5) * size;\n    nbins = (x1 - x0) / size;\n  } else if (partition.groupLog) {\n    // Fixed number of logarithmically (base 10) sized bins\n    nbins = param;\n    x0 = Math.log(partition.minval) / Math.log(10.0);\n    x1 = Math.log(partition.maxval) / Math.log(10.0);\n    size = (x1 - x0) / nbins;\n  }\n\n  function unlog (x) {\n    return Math.exp(x * Math.log(10));\n  }\n\n  var i;\n  for (i = 0; i < nbins; i++) {\n    var start = x0 + i * size;\n    var end = x0 + (i + 1) * size;\n    var mid = 0.5 * (start + end);\n\n    if (partition.groupLog) {\n      groups.add({\n        min: unlog(start),\n        max: unlog(end),\n        value: unlog(start),\n        label: unlog(end).toPrecision(5)\n      });\n    } else {\n      groups.add({\n        min: start,\n        max: end,\n        value: mid,\n        label: mid.toPrecision(5)\n      });\n    }\n  }\n}\n\n/*\n * Setup a grouping based on the `partition.categorialTransform`\n * @memberof! Partition\n * @param {Partition} partition\n * @param {Group[]} groups\n */\nfunction setCategorialGroups (partition, groups) {\n  // dataview -> filters -> filter -> partitions -> partition\n  //          -> facets\n\n  var dataview;\n  var facet;\n  try {\n    dataview = partition.collection.parent.collection.parent;\n    facet = dataview.facets.get(partition.facetName, 'name');\n  } catch (e) {\n    console.error('setCategorialGroups: cannot locate facet for this partition');\n    return;\n  }\n\n  if (facet.isCategorial) {\n    // default: a categorial facet, with a categorial parittion\n    facet.categorialTransform.rules.forEach(function (rule, i) {\n      groups.add({\n        value: rule.group,\n        label: rule.group,\n        count: rule.count\n      });\n    });\n  } else if (facet.isDatetime) {\n    var format = facet.datetimeTransform.transformedFormat;\n    var timePart = util.timeParts.get(format, 'description');\n\n    timePart.groups.forEach(function (g, i) {\n      groups.add({\n        value: g,\n        label: g,\n        count: 0\n      });\n    });\n  } else {\n    console.warn('Not implemented');\n  }\n}\n\n/**\n * Reset type, minimum and maximum values\n * @params {Partition} partition\n * @params {Object} Options - silent do not trigger change events\n * @memberof! Partition\n */\nfunction reset (options) {\n  var partition = this;\n  // partition -> partitions -> filter -> filters -> dataview\n  var filter = partition.collection.parent;\n  var dataview = filter.collection.parent;\n  var facet = dataview.facets.get(partition.facetName, 'name');\n  options = options || {};\n\n  partition.set({\n    type: facet.transform.transformedType,\n    minval: facet.transform.transformedMin,\n    maxval: facet.transform.transformedMax\n  }, options);\n}\n\nmodule.exports = BaseModel.extend({\n  dataTypes: {\n    'numberDatetimeOrDuration': {\n      set: function (value) {\n        var newValue;\n\n        // check for momentjs objects\n        if (moment.isDuration(value)) {\n          return {\n            val: moment.duration(value),\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n        if (moment.isMoment(value)) {\n          return {\n            val: value.clone(),\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n\n        // try to create momentjs objects\n        newValue = moment(value, moment.ISO_8601);\n        if (newValue.isValid()) {\n          return {\n            val: newValue,\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n        if (typeof value === 'string' && value[0].toLowerCase() === 'p') {\n          newValue = moment.duration(value);\n          return {\n            val: newValue,\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n\n        // try to set a number\n        if (value === +value) {\n          return {\n            val: +value,\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n\n        // failed..\n        return {\n          val: value,\n          type: typeof value\n        };\n      },\n      compare: function (currentVal, newVal) {\n        if (currentVal instanceof moment) {\n          return currentVal.isSame(newVal);\n        } else {\n          return +currentVal === +newVal;\n        }\n      }\n    }\n  },\n  props: {\n    /**\n     * Label for displaying on plots\n     * @memberof! Partition\n     * @type {string}\n     */\n    label: {\n      type: 'string',\n      required: true,\n      default: ''\n    },\n    /**\n     * Show a legend for this partition\n     * @memberof! Partition\n     * @type {string}\n     */\n    showLegend: {\n      type: 'boolean',\n      required: false,\n      default: true\n    },\n    /**\n     * Show an axis label for this partition\n     * @memberof! Partition\n     * @type {string}\n     */\n    showLabel: {\n      type: 'boolean',\n      required: false,\n      default: true\n    },\n\n    /**\n     * Timezone for partitioning\n     * @memberof! DatetimeTransform\n     * @type {string}\n     */\n    zone: {\n      type: 'string',\n      required: 'true',\n      default: function () {\n        return moment.tz.guess();\n      }\n    },\n\n    /**\n     * Type of this partition\n     * @memberof! Partition\n     * @type {string}\n     */\n    type: {\n      type: 'string',\n      required: true,\n      default: 'categorial',\n      values: ['constant', 'continuous', 'categorial', 'datetime', 'duration', 'text']\n    },\n\n    /**\n     * The name of the facet to partition over\n     * @memberof! Partition\n     * @type {string}\n     */\n    facetName: 'string',\n\n    /**\n     * When part of a partitioning, this deterimines the ordering\n     * @memberof! Partition\n     * @type {number}\n     */\n    rank: {\n      type: 'number',\n      required: true\n    },\n\n    /**\n     * For categorial and text Facets, the ordering can be alfabetical or by count\n     * @memberof! Partition\n     */\n    ordering: {\n      type: 'string',\n      values: ['count', 'value'],\n      required: true,\n      default: 'value'\n    },\n\n    /**\n     * For continuous or datetime Facets, the minimum value. Values lower than this are grouped to 'missing'\n     * @memberof! Partition\n     * @type {number|moment}\n     */\n    minval: 'numberDatetimeOrDuration',\n\n    /**\n     * For continuous or datetime Facets, the maximum value. Values higher than this are grouped to 'missing'\n     * @memberof! Partition\n     * @type {number|moment}\n     */\n    maxval: 'numberDatetimeOrDuration',\n\n    /**\n     * Extra parameter used in the grouping strategy: either the number of bins, or the bin size.\n     * @memberof! Partition\n     * @type {number}\n     */\n    groupingParam: ['number', true, 20],\n\n    /**\n     * Grouping strategy:\n     *  * `fixedn`  fixed number of bins in the interval [minval, maxval]\n     *  * `fixedsc` a fixed binsize, centered on zero\n     *  * `fixeds`  a fixed binsize, starting at zero\n     *  * `log`     fixed number of bins but on a logarithmic scale\n     * Don't use directly but check grouping via the groupFixedN, groupFixedSC,\n     * groupFixedS, and groupLog properties\n     * @memberof! Partition\n     * @type {number}\n     */\n    groupingContinuous: {\n      type: 'string',\n      required: true,\n      default: 'fixedn',\n      values: ['fixedn', 'fixedsc', 'fixeds', 'log']\n    },\n\n    /**\n     * Depending on the type of partition, this can be an array of the selected groups,\n     * or a numberic interval [start, end]\n     * @memberof! Partition\n     * @type {array}\n     */\n    // NOTE: for categorial facets, contains rule.group\n    selected: {\n      type: 'array',\n      required: true,\n      default: function () {\n        return [];\n      }\n    }\n  },\n  derived: {\n    // properties for: type\n    isConstant: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'constant';\n      }\n    },\n    isContinuous: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'continuous';\n      }\n    },\n    isCategorial: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'categorial';\n      }\n    },\n    isDatetime: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'datetime';\n      }\n    },\n    isDuration: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'duration';\n      }\n    },\n    isText: {\n      deps: ['type'],\n      fn: function () {\n        return this.type === 'text';\n      }\n    },\n    // properties for grouping-continuous\n    groupFixedN: {\n      deps: ['groupingContinuous'],\n      fn: function () {\n        return this.groupingContinuous === 'fixedn';\n      }\n    },\n    groupFixedSC: {\n      deps: ['groupingContinuous'],\n      fn: function () {\n        return this.groupingContinuous === 'fixedsc';\n      }\n    },\n    groupFixedS: {\n      deps: ['groupingContinuous'],\n      fn: function () {\n        return this.groupingContinuous === 'fixeds';\n      }\n    },\n    groupLog: {\n      deps: ['groupingContinuous'],\n      fn: function () {\n        return this.groupingContinuous === 'log';\n      }\n    },\n    /**\n     * The (ordered) set of groups this Partition can take, making up this partition.\n     * The list is recalculated when any of the partition's properties change:\n     * 'groupingContinuous', 'groupingParam', 'minval', 'maxval', 'type', 'zone' change\n     * The list keeps itself sorted according to the partition.ordering\n     *\n     * Can be used for plotting etc.\n     * @memberof! Partition\n     * @type {Group[]}\n     */\n    groups: {\n      deps: ['groupingContinuous', 'groupingParam', 'minval', 'maxval', 'type', 'zone'],\n      fn: function () {\n        var partition = this;\n        var groups = new Groups([], {\n          parent: partition\n        });\n\n        if (partition.isCategorial) {\n          setCategorialGroups(partition, groups);\n        } else if (partition.isContinuous) {\n          setContinuousGroups(partition, groups);\n        } else if (partition.isDatetime) {\n          setDatetimeGroups(partition, groups);\n        } else if (partition.isDuration) {\n          setDurationGroups(partition, groups);\n        } else if (partition.isText) {\n          // no-op\n        } else {\n          console.error('Cannot set groups for partition', partition.getId());\n        }\n\n        return groups;\n      }\n    }\n  },\n  updateSelection: function (group) {\n    selection.updateSelection(this, group);\n  },\n  filterFunction: function () {\n    return selection.filterFunction(this);\n  },\n  reset: reset\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8191\n")},8233:function(module,exports,__webpack_require__){eval("\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(/*! ./debug */ \"bb16\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIzMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvYnJvd3Nlci5qcz80ZDVhIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgcmV0dXJuICgnV2Via2l0QXBwZWFyYW5jZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAod2luZG93LmNvbnNvbGUgJiYgKGNvbnNvbGUuZmlyZWJ1ZyB8fCAoY29uc29sZS5leGNlcHRpb24gJiYgY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgIChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncygpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybiBhcmdzO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncyA9IFthcmdzWzBdLCBjLCAnY29sb3I6IGluaGVyaXQnXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO1xuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xuICByZXR1cm4gYXJncztcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8233\n")},"834b":function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ "86e3");\nvar XHR = __webpack_require__(/*! ./polling-xhr */ "108d");\nvar JSONP = __webpack_require__(/*! ./polling-jsonp */ "2dce");\nvar websocket = __webpack_require__(/*! ./websocket */ "6b20");\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (global.location) {\n    var isSSL = \'https:\' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if (\'open\' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error(\'JSONP disabled\');\n    return new JSONP(opts);\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ "698d")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM0Yi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9pbmRleC5qcz84OTk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFhIUiA9IHJlcXVpcmUoJy4vcG9sbGluZy14aHInKTtcbnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpO1xudmFyIHdlYnNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0IHRyYW5zcG9ydHMuXG4gKi9cblxuZXhwb3J0cy5wb2xsaW5nID0gcG9sbGluZztcbmV4cG9ydHMud2Vic29ja2V0ID0gd2Vic29ja2V0O1xuXG4vKipcbiAqIFBvbGxpbmcgdHJhbnNwb3J0IHBvbHltb3JwaGljIGNvbnN0cnVjdG9yLlxuICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9sbGluZyAob3B0cykge1xuICB2YXIgeGhyO1xuICB2YXIgeGQgPSBmYWxzZTtcbiAgdmFyIHhzID0gZmFsc2U7XG4gIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmIChnbG9iYWwubG9jYXRpb24pIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///834b\n')},"86e3":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module\n\nvar hasCORS = __webpack_require__(/*! has-cors */ \"0392\");\n\nmodule.exports = function (opts) {\n  var xdomain = opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  var xscheme = opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  var enablesXDR = opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) { }\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) { }\n\n  if (!xdomain) {\n    try {\n      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\n    } catch (e) { }\n  }\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODZlMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanM/NzY2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBicm93c2VyIHNoaW0gZm9yIHhtbGh0dHByZXF1ZXN0IG1vZHVsZVxuXG52YXIgaGFzQ09SUyA9IHJlcXVpcmUoJ2hhcy1jb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgdmFyIHhkb21haW4gPSBvcHRzLnhkb21haW47XG5cbiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0XG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcbiAgdmFyIHhzY2hlbWUgPSBvcHRzLnhzY2hlbWU7XG5cbiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9lbmdpbmUuaW8tY2xpZW50L3B1bGwvMjE3XG4gIHZhciBlbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBvbiBJRVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgLy8gVXNlIFhEb21haW5SZXF1ZXN0IGZvciBJRTggaWYgZW5hYmxlc1hEUiBpcyB0cnVlXG4gIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS95dWppb3Nha2Evc29ja2UuaW8taWU4LWxvYWRpbmctZXhhbXBsZVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHtcbiAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIGlmICgheGRvbWFpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFtbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///86e3\n")},9083:function(module,exports,__webpack_require__){eval("/**\n * A `Group` represents a value a `Facet` can take using a partitioning.\n * For continuous or time facets, it represents an interval.\n * For categorial facets, it is a single label.\n *\n * The `Facet.groups` collection is used for plotting, to deterime the postion along the axis.\n * Selections can be updated using a `Group`.\n *\n * @extends Base\n * @class Group\n */\nvar Base = __webpack_require__(/*! ../util/base */ \"3902\");\nvar moment = __webpack_require__(/*! moment */ \"da01\");\n\nmodule.exports = Base.extend({\n  dataTypes: {\n    'numberDatetimeOrDuration': {\n      set: function (value) {\n        var newValue;\n\n        // check for momentjs objects\n        if (moment.isDuration(value)) {\n          return {\n            val: moment.duration(value),\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n        if (moment.isMoment(value)) {\n          return {\n            val: moment(value),\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n\n        // try to create momentjs objects\n        newValue = moment(value, moment.ISO_8601);\n        if (newValue.isValid()) {\n          return {\n            val: newValue,\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n        if (typeof value === 'string' && value[0].toLowerCase() === 'p') {\n          newValue = moment.duration(value);\n          return {\n            val: newValue,\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n\n        // try to set a number\n        if (value === +value) {\n          return {\n            val: +value,\n            type: 'numberDatetimeOrDuration'\n          };\n        }\n\n        // failed..\n        return {\n          val: value,\n          type: typeof value\n        };\n      },\n      compare: function (currentVal, newVal) {\n        if (currentVal instanceof moment) {\n          return currentVal.isSame(newVal);\n        } else {\n          return +currentVal === +newVal;\n        }\n      }\n    }\n  },\n  props: {\n    /**\n     * For continuous, datetime, or duration facets. Lower limit of interval\n     * @type {number|moment}\n     * @memberof! Group\n     */\n    min: 'numberDatetimeOrDuration',\n\n    /**\n     * For continuous, datetime, or duration facets. Upper limit of interval\n     * @type {number|moment}\n     * @memberof! Group\n     */\n    max: 'numberDatetimeOrDuration',\n\n    /**\n     * Number of times this transform is used\n     * @type {number}\n     * @memberof! Group\n     */\n    count: ['number', true, 0],\n\n    /**\n     * Label for display\n     * @type {string}\n     * @memberof! Group\n     */\n    label: ['string', true, 'label'],\n\n    /**\n     * A value guaranteed to be in this group, used to check if this group is currently selected.\n     * moments and durations should be stored as moment.format() and duration.toISOString()\n     * @type {string|number}\n     * @memberof! Group\n     */\n    value: 'any',\n\n    /**\n     * Index, cached version of groups.models.indexOf(group)\n     * @type {number}\n     * @memberof! Group\n     */\n    groupIndex: 'number'\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA4My5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvcGFydGl0aW9uL2dyb3VwLmpzPzEwNGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIGBHcm91cGAgcmVwcmVzZW50cyBhIHZhbHVlIGEgYEZhY2V0YCBjYW4gdGFrZSB1c2luZyBhIHBhcnRpdGlvbmluZy5cbiAqIEZvciBjb250aW51b3VzIG9yIHRpbWUgZmFjZXRzLCBpdCByZXByZXNlbnRzIGFuIGludGVydmFsLlxuICogRm9yIGNhdGVnb3JpYWwgZmFjZXRzLCBpdCBpcyBhIHNpbmdsZSBsYWJlbC5cbiAqXG4gKiBUaGUgYEZhY2V0Lmdyb3Vwc2AgY29sbGVjdGlvbiBpcyB1c2VkIGZvciBwbG90dGluZywgdG8gZGV0ZXJpbWUgdGhlIHBvc3Rpb24gYWxvbmcgdGhlIGF4aXMuXG4gKiBTZWxlY3Rpb25zIGNhbiBiZSB1cGRhdGVkIHVzaW5nIGEgYEdyb3VwYC5cbiAqXG4gKiBAZXh0ZW5kcyBCYXNlXG4gKiBAY2xhc3MgR3JvdXBcbiAqL1xudmFyIEJhc2UgPSByZXF1aXJlKCcuLi91dGlsL2Jhc2UnKTtcbnZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlLmV4dGVuZCh7XG4gIGRhdGFUeXBlczoge1xuICAgICdudW1iZXJEYXRldGltZU9yRHVyYXRpb24nOiB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbmV3VmFsdWU7XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1vbWVudGpzIG9iamVjdHNcbiAgICAgICAgaWYgKG1vbWVudC5pc0R1cmF0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWw6IG1vbWVudC5kdXJhdGlvbih2YWx1ZSksXG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyRGF0ZXRpbWVPckR1cmF0aW9uJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vbWVudC5pc01vbWVudCh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsOiBtb21lbnQodmFsdWUpLFxuICAgICAgICAgICAgdHlwZTogJ251bWJlckRhdGV0aW1lT3JEdXJhdGlvbidcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJ5IHRvIGNyZWF0ZSBtb21lbnRqcyBvYmplY3RzXG4gICAgICAgIG5ld1ZhbHVlID0gbW9tZW50KHZhbHVlLCBtb21lbnQuSVNPXzg2MDEpO1xuICAgICAgICBpZiAobmV3VmFsdWUuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbDogbmV3VmFsdWUsXG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyRGF0ZXRpbWVPckR1cmF0aW9uJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWVbMF0udG9Mb3dlckNhc2UoKSA9PT0gJ3AnKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBtb21lbnQuZHVyYXRpb24odmFsdWUpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWw6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgdHlwZTogJ251bWJlckRhdGV0aW1lT3JEdXJhdGlvbidcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJ5IHRvIHNldCBhIG51bWJlclxuICAgICAgICBpZiAodmFsdWUgPT09ICt2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWw6ICt2YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXJEYXRldGltZU9yRHVyYXRpb24nXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhaWxlZC4uXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsOiB2YWx1ZSxcbiAgICAgICAgICB0eXBlOiB0eXBlb2YgdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBjb21wYXJlOiBmdW5jdGlvbiAoY3VycmVudFZhbCwgbmV3VmFsKSB7XG4gICAgICAgIGlmIChjdXJyZW50VmFsIGluc3RhbmNlb2YgbW9tZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWwuaXNTYW1lKG5ld1ZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICtjdXJyZW50VmFsID09PSArbmV3VmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIEZvciBjb250aW51b3VzLCBkYXRldGltZSwgb3IgZHVyYXRpb24gZmFjZXRzLiBMb3dlciBsaW1pdCBvZiBpbnRlcnZhbFxuICAgICAqIEB0eXBlIHtudW1iZXJ8bW9tZW50fVxuICAgICAqIEBtZW1iZXJvZiEgR3JvdXBcbiAgICAgKi9cbiAgICBtaW46ICdudW1iZXJEYXRldGltZU9yRHVyYXRpb24nLFxuXG4gICAgLyoqXG4gICAgICogRm9yIGNvbnRpbnVvdXMsIGRhdGV0aW1lLCBvciBkdXJhdGlvbiBmYWNldHMuIFVwcGVyIGxpbWl0IG9mIGludGVydmFsXG4gICAgICogQHR5cGUge251bWJlcnxtb21lbnR9XG4gICAgICogQG1lbWJlcm9mISBHcm91cFxuICAgICAqL1xuICAgIG1heDogJ251bWJlckRhdGV0aW1lT3JEdXJhdGlvbicsXG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgdGltZXMgdGhpcyB0cmFuc2Zvcm0gaXMgdXNlZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mISBHcm91cFxuICAgICAqL1xuICAgIGNvdW50OiBbJ251bWJlcicsIHRydWUsIDBdLFxuXG4gICAgLyoqXG4gICAgICogTGFiZWwgZm9yIGRpc3BsYXlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiEgR3JvdXBcbiAgICAgKi9cbiAgICBsYWJlbDogWydzdHJpbmcnLCB0cnVlLCAnbGFiZWwnXSxcblxuICAgIC8qKlxuICAgICAqIEEgdmFsdWUgZ3VhcmFudGVlZCB0byBiZSBpbiB0aGlzIGdyb3VwLCB1c2VkIHRvIGNoZWNrIGlmIHRoaXMgZ3JvdXAgaXMgY3VycmVudGx5IHNlbGVjdGVkLlxuICAgICAqIG1vbWVudHMgYW5kIGR1cmF0aW9ucyBzaG91bGQgYmUgc3RvcmVkIGFzIG1vbWVudC5mb3JtYXQoKSBhbmQgZHVyYXRpb24udG9JU09TdHJpbmcoKVxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiEgR3JvdXBcbiAgICAgKi9cbiAgICB2YWx1ZTogJ2FueScsXG5cbiAgICAvKipcbiAgICAgKiBJbmRleCwgY2FjaGVkIHZlcnNpb24gb2YgZ3JvdXBzLm1vZGVscy5pbmRleE9mKGdyb3VwKVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mISBHcm91cFxuICAgICAqL1xuICAgIGdyb3VwSW5kZXg6ICdudW1iZXInXG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9083\n")},9263:function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./src/crossfilter */ "4573").crossfilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI2My5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL2luZGV4LmpzP2U3MTEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zcmMvY3Jvc3NmaWx0ZXJcIikuY3Jvc3NmaWx0ZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9263\n')},"939f":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Create a blob builder even when vendor prefixes exist\n */\n\nvar BlobBuilder = global.BlobBuilder\n  || global.WebKitBlobBuilder\n  || global.MSBlobBuilder\n  || global.MozBlobBuilder;\n\n/**\n * Check if Blob constructor is supported\n */\n\nvar blobSupported = (function() {\n  try {\n    var a = new Blob(['hi']);\n    return a.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if Blob constructor supports ArrayBufferViews\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\n */\n\nvar blobSupportsArrayBufferView = blobSupported && (function() {\n  try {\n    var b = new Blob([new Uint8Array([1,2])]);\n    return b.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if BlobBuilder is supported\n */\n\nvar blobBuilderSupported = BlobBuilder\n  && BlobBuilder.prototype.append\n  && BlobBuilder.prototype.getBlob;\n\n/**\n * Helper function that maps ArrayBufferViews to ArrayBuffers\n * Used by BlobBuilder constructor and old browsers that didn't\n * support it in the Blob constructor.\n */\n\nfunction mapArrayBufferViews(ary) {\n  for (var i = 0; i < ary.length; i++) {\n    var chunk = ary[i];\n    if (chunk.buffer instanceof ArrayBuffer) {\n      var buf = chunk.buffer;\n\n      // if this is a subarray, make a copy so we only\n      // include the subarray region from the underlying buffer\n      if (chunk.byteLength !== buf.byteLength) {\n        var copy = new Uint8Array(chunk.byteLength);\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n        buf = copy.buffer;\n      }\n\n      ary[i] = buf;\n    }\n  }\n}\n\nfunction BlobBuilderConstructor(ary, options) {\n  options = options || {};\n\n  var bb = new BlobBuilder();\n  mapArrayBufferViews(ary);\n\n  for (var i = 0; i < ary.length; i++) {\n    bb.append(ary[i]);\n  }\n\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n};\n\nfunction BlobConstructor(ary, options) {\n  mapArrayBufferViews(ary);\n  return new Blob(ary, options || {});\n};\n\nmodule.exports = (function() {\n  if (blobSupported) {\n    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n  } else if (blobBuilderSupported) {\n    return BlobBuilderConstructor;\n  } else {\n    return undefined;\n  }\n})();\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM5Zi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvYmxvYi9pbmRleC5qcz8yMTA3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlIGEgYmxvYiBidWlsZGVyIGV2ZW4gd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYkJ1aWxkZXIgPSBnbG9iYWwuQmxvYkJ1aWxkZXJcbiAgfHwgZ2xvYmFsLldlYktpdEJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5NU0Jsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5Nb3pCbG9iQnVpbGRlcjtcblxuLyoqXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcbiAgICByZXR1cm4gYS5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBzdXBwb3J0cyBBcnJheUJ1ZmZlclZpZXdzXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxuICovXG5cbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKTtcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYkJ1aWxkZXIgaXMgc3VwcG9ydGVkXG4gKi9cblxudmFyIGJsb2JCdWlsZGVyU3VwcG9ydGVkID0gQmxvYkJ1aWxkZXJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXG4gKiBVc2VkIGJ5IEJsb2JCdWlsZGVyIGNvbnN0cnVjdG9yIGFuZCBvbGQgYnJvd3NlcnMgdGhhdCBkaWRuJ3RcbiAqIHN1cHBvcnQgaXQgaW4gdGhlIEJsb2IgY29uc3RydWN0b3IuXG4gKi9cblxuZnVuY3Rpb24gbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2h1bmsgPSBhcnlbaV07XG4gICAgaWYgKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xuXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgc3ViYXJyYXksIG1ha2UgYSBjb3B5IHNvIHdlIG9ubHlcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IGJ1Zi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xuICAgICAgICBidWYgPSBjb3B5LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgYXJ5W2ldID0gYnVmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYmIuYXBwZW5kKGFyeVtpXSk7XG4gIH1cblxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XG59O1xuXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcbiAgcmV0dXJuIG5ldyBCbG9iKGFyeSwgb3B0aW9ucyB8fCB7fSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gZ2xvYmFsLkJsb2IgOiBCbG9iQ29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoYmxvYkJ1aWxkZXJTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///939f\n")},9476:function(module,exports,__webpack_require__){eval("/**\n * A filter provides a chart with an interface to the data.\n * The filter contains a number of `Partition`s and `Aggregate`s.\n * It takes care of calling the relevant functions provided by a `Dataset`.\n *\n * @class Filter\n * @extends Base\n */\n\n/**\n * @typedef {Object} DataRecord - Object holding the plot data, partitions are labelled with a single small letter, aggregates with a double small letter\n * @property {string} DataRecord.a Value of first partition\n * @property {string} DataRecord.b Value of second partition\n * @property {string} DataRecord.c Value of third partition, etc.\n * @property {string} DataRecord.aa Value of first aggregate\n * @property {string} DataRecord.bb Value of second aggregate, etc.\n */\n\n/**\n * @typedef {DataRecord[]} Data - Array of DataRecords\n */\n\nvar Base = __webpack_require__(/*! ./util/base */ \"3902\");\nvar Aggregates = __webpack_require__(/*! ./aggregate/collection */ \"fbef\");\nvar Partitions = __webpack_require__(/*! ./partition/collection */ \"e59a\");\n\nmodule.exports = Base.extend({\n  props: {\n    /**\n     * Hint for the client (website) how to visualize this filter\n     * @memberof! Filter\n     * @type {string}\n     */\n    chartType: {\n      type: 'string',\n      required: true,\n      default: 'barchart',\n      values: ['piechart', 'horizontalbarchart', 'barchart', 'linechart', 'radarchart', 'polarareachart', 'bubbleplot', 'scatterchart', 'networkchart']\n    },\n    /**\n     * Title for displaying purposes\n     * @memberof! Filter\n     * @type {string}\n     */\n    title: ['string', true, ''],\n    /**\n     * Hint for the client (website) how to position the chart for this filter\n     * position (col, row) and size (size_x, size_y) of chart\n     */\n    col: 'number',\n    row: 'number',\n    size_x: 'number',\n    size_y: 'number'\n  },\n  collections: {\n    /**\n     * @memberof! Filter\n     * @type {Partitions[]}\n     */\n    partitions: Partitions,\n    /**\n     * @memberof! Filter\n     * @type {Aggregate[]}\n     */\n    aggregates: Aggregates\n  },\n  // Session properties are not typically persisted to the server,\n  // and are not returned by calls to toJSON() or serialize().\n  session: {\n    /**\n     * Array containing the data to plot\n     * @memberof! Filter\n     * @type {Data}\n     */\n    data: {\n      type: 'array',\n      default: function () {\n        return [];\n      }\n    },\n    /*\n     * Call this function to request new data.\n     * The dataset backing the facet will copy the data to Filter.data.\n     * A newData event is fired when the data is ready to be plotted.\n     *\n     * @function\n     * @virtual\n     * @private\n     * @memberof! Filter\n     * @emits newData\n     */\n    getData: {\n      type: 'any'\n    },\n    /**\n     * A history of the current drill-down (ie. partitions.toJSON())\n     */\n    zoomHistory: {\n      type: 'array',\n      default: function () {\n        return [];\n      }\n    },\n    /**\n     * Boolean indicating if the filter is initialized\n     */\n    isInitialized: {\n      type: 'boolean',\n      required: true,\n      default: false\n    }\n  },\n  initialize: function () {\n    // set up callback to free internal state on remove\n    this.on('remove', function () {\n      this.releaseDataFilter();\n    });\n  },\n  zoomIn: function () {\n    this.releaseDataFilter();\n\n    // save current state\n    this.zoomHistory.push(JSON.stringify(this.partitions.toJSON()));\n\n    this.partitions.forEach(function (partition) {\n      if ((partition.selected.length === 2) && (partition.isDatetime || partition.isContinuous)) {\n        if (partition.groupFixedS || partition.groupFixedSC) {\n          // scale down binsize\n          var newSize = partition.selected[1] - partition.selected[0];\n          var oldSize = partition.maxval - partition.minval;\n          partition.groupingParam = partition.groupingParam * newSize / oldSize;\n        }\n        // zoom to selected range, if possible\n        partition.set({\n          minval: partition.selected[0],\n          maxval: partition.selected[1]\n        });\n      } else if (partition.selected.length > 0 && (partition.isCategorial)) {\n        // zoom to selected categories, if possible\n        partition.groups.reset();\n        partition.selected.forEach(function (value) {\n          partition.groups.add({\n            value: value,\n            label: value,\n            count: 0,\n            isSelected: true\n          });\n        });\n      }\n      // select all\n      partition.updateSelection();\n    });\n    this.initDataFilter();\n    this.updateDataFilter(); // also triggers a getAllData()\n  },\n  zoomOut: function () {\n    var doReset = true;\n\n    // clear current selection\n    this.partitions.forEach(function (partition) {\n      if (partition.selected.length > 0) {\n        partition.updateSelection();\n        doReset = false;\n      }\n    });\n\n    if (doReset) {\n      this.releaseDataFilter();\n      if (this.zoomHistory.length > 0) {\n        // nothing was selected and we have drilled down: go up\n        var state = JSON.parse(this.zoomHistory.pop());\n        this.partitions.reset(state);\n      } else {\n        // nothing was selected and no drill down: reset partitioning\n        this.partitions.forEach(function (partition) {\n          if (partition.isDatetime || partition.isContinuous) {\n            partition.reset();\n          }\n        });\n      }\n      this.initDataFilter();\n    }\n    this.updateDataFilter(); // also triggers a getAllData()\n  },\n  // Apply the separate filterFunctions from each partition in a single function\n  filterFunction: function () {\n    var fs = [];\n    this.partitions.forEach(function (partition) {\n      fs.push(partition.filterFunction());\n    });\n    return function (d) {\n      if (typeof d === 'string') {\n        var groups = d.split('|');\n        return fs.every(function (f, i) { return f(groups[i]); });\n      } else {\n        // shortcut for non-partitioned numeric data\n        return fs[0](d);\n      }\n    };\n  },\n  /**\n   * Initialize the data filter, and construct the getData callback function on the filter.\n   *\n   * @memberof! Filter\n   */\n  initDataFilter: function () {\n    var dataview = this.collection.parent;\n    var spot = dataview.parent;\n\n    spot.driver.releaseDataFilter(dataview, this);\n    spot.driver.initDataFilter(dataview, this);\n    spot.driver.updateDataFilter(this);\n\n    this.isInitialized = true;\n  },\n  /**\n   * The opposite or initDataFilter, it should remove the filter and deallocate other configuration\n   * related to the filter.\n   *\n   * @memberof! Filter\n   */\n  releaseDataFilter: function () {\n    var dataview = this.collection.parent;\n    var spot = dataview.parent;\n\n    spot.driver.releaseDataFilter(dataview, this);\n\n    this.isInitialized = false;\n  },\n  /**\n   * Apply changes to the filter (like selecting groups)\n   *\n   * @memberof! Filter\n   */\n  updateDataFilter: function () {\n    var dataview = this.collection.parent;\n    var spot = dataview.parent;\n\n    spot.driver.updateDataFilter(this);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9476\n")},"9b75":function(module,exports,__webpack_require__){eval("/**\n * CategorialTransfrom defines a transformation on categorial and textual data,\n * and is implemented as a collection of rules.\n *\n * @class CategorialTransform\n */\nvar Model = __webpack_require__(/*! ampersand-model */ \"3bfc\");\nvar Collection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\n\nvar Rule = __webpack_require__(/*! ./categorial-rule */ \"ba23\");\nvar Rules = Collection.extend({\n  indexes: ['expression'],\n  model: Rule\n});\n\n/**\n * Apply the first applicable transformation rule.\n * When no matching rule is found, return 'Other'\n *\n * @function\n * @memberof! CategorialTransform\n * @param {string} text\n * @returns {string} text The transformed text\n */\nfunction transform (rules, text) {\n  var i;\n  for (i = 0; i < rules.length; i++) {\n    var group = rules.models[i].match(text);\n    if (group) {\n      return group;\n    }\n  }\n  return 'Other';\n}\n\nmodule.exports = Model.extend({\n  props: {\n    transformedType: {\n      type: 'string',\n      required: true,\n      default: 'categorial',\n      values: ['categorial']\n    },\n    transformedMin: {\n      type: 'number',\n      required: true,\n      default: 0\n    },\n    transformedMax: {\n      type: 'number',\n      required: true,\n      default: 100\n    },\n    transformedMinAsText: {\n      type: 'string',\n      required: true,\n      default: '0'\n    },\n    transformedMaxAsText: {\n      type: 'string',\n      required: true,\n      default: '100'\n    }\n  },\n  collections: {\n    rules: Rules\n  },\n  transform: function (labels) {\n    if (!this.rules) {\n      return labels;\n    }\n    if (labels instanceof Array) {\n      labels.forEach(function (label, i) {\n        labels[i] = transform(this.rules, label);\n      }, this);\n    } else {\n      labels = transform(this.rules, labels);\n    }\n    return labels;\n  },\n  reset: function () {\n    this.rules.reset();\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOWI3NS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZmFjZXQvY2F0ZWdvcmlhbC10cmFuc2Zvcm0uanM/MzBlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENhdGVnb3JpYWxUcmFuc2Zyb20gZGVmaW5lcyBhIHRyYW5zZm9ybWF0aW9uIG9uIGNhdGVnb3JpYWwgYW5kIHRleHR1YWwgZGF0YSxcbiAqIGFuZCBpcyBpbXBsZW1lbnRlZCBhcyBhIGNvbGxlY3Rpb24gb2YgcnVsZXMuXG4gKlxuICogQGNsYXNzIENhdGVnb3JpYWxUcmFuc2Zvcm1cbiAqL1xudmFyIE1vZGVsID0gcmVxdWlyZSgnYW1wZXJzYW5kLW1vZGVsJyk7XG52YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ2FtcGVyc2FuZC1jb2xsZWN0aW9uJyk7XG5cbnZhciBSdWxlID0gcmVxdWlyZSgnLi9jYXRlZ29yaWFsLXJ1bGUnKTtcbnZhciBSdWxlcyA9IENvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgaW5kZXhlczogWydleHByZXNzaW9uJ10sXG4gIG1vZGVsOiBSdWxlXG59KTtcblxuLyoqXG4gKiBBcHBseSB0aGUgZmlyc3QgYXBwbGljYWJsZSB0cmFuc2Zvcm1hdGlvbiBydWxlLlxuICogV2hlbiBubyBtYXRjaGluZyBydWxlIGlzIGZvdW5kLCByZXR1cm4gJ090aGVyJ1xuICpcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mISBDYXRlZ29yaWFsVHJhbnNmb3JtXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHJldHVybnMge3N0cmluZ30gdGV4dCBUaGUgdHJhbnNmb3JtZWQgdGV4dFxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm0gKHJ1bGVzLCB0ZXh0KSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZ3JvdXAgPSBydWxlcy5tb2RlbHNbaV0ubWF0Y2godGV4dCk7XG4gICAgaWYgKGdyb3VwKSB7XG4gICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxuICB9XG4gIHJldHVybiAnT3RoZXInO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vZGVsLmV4dGVuZCh7XG4gIHByb3BzOiB7XG4gICAgdHJhbnNmb3JtZWRUeXBlOiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ2NhdGVnb3JpYWwnLFxuICAgICAgdmFsdWVzOiBbJ2NhdGVnb3JpYWwnXVxuICAgIH0sXG4gICAgdHJhbnNmb3JtZWRNaW46IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICB0cmFuc2Zvcm1lZE1heDoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IDEwMFxuICAgIH0sXG4gICAgdHJhbnNmb3JtZWRNaW5Bc1RleHQ6IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBkZWZhdWx0OiAnMCdcbiAgICB9LFxuICAgIHRyYW5zZm9ybWVkTWF4QXNUZXh0OiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJzEwMCdcbiAgICB9XG4gIH0sXG4gIGNvbGxlY3Rpb25zOiB7XG4gICAgcnVsZXM6IFJ1bGVzXG4gIH0sXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gKGxhYmVscykge1xuICAgIGlmICghdGhpcy5ydWxlcykge1xuICAgICAgcmV0dXJuIGxhYmVscztcbiAgICB9XG4gICAgaWYgKGxhYmVscyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBsYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwsIGkpIHtcbiAgICAgICAgbGFiZWxzW2ldID0gdHJhbnNmb3JtKHRoaXMucnVsZXMsIGxhYmVsKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYWJlbHMgPSB0cmFuc2Zvcm0odGhpcy5ydWxlcywgbGFiZWxzKTtcbiAgICB9XG4gICAgcmV0dXJuIGxhYmVscztcbiAgfSxcbiAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJ1bGVzLnJlc2V0KCk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9b75\n")},"9d63":function(module,exports,__webpack_require__){eval("/**\n * The Aggregate class describes how to aggregate data, as described by a `Facet` into a single value.\n * For example, you can sum or average over numbers, or count the number of different labels.\n *\n * @class Aggregate\n * @extends Base\n */\nvar BaseModel = __webpack_require__(/*! ./util/base */ \"3902\");\n\nmodule.exports = BaseModel.extend({\n  props: {\n    /**\n     * The name of the facet to aggregate over\n     * @memberof! Aggregate\n     * @type {string}\n     */\n    facetName: 'string',\n\n    /**\n     * Label for displaying on plots\n     * @memberof! Aggregate\n     * @type {string}\n     */\n    label: {\n      type: 'string',\n      required: true,\n      default: ''\n    },\n\n    /**\n     * When part of a aggregates, this deterimines the ordering\n     * @memberof! Aggregate\n     * @type {number}\n     */\n    rank: {\n      type: 'number',\n      required: true\n    },\n\n    /**\n     * Operation:\n     *  * `count`  count the number of elements in the group\n     *  * `sum`    sum the elements in the group\n     *  * `avg`    take the average of the elements in the group\n     *  * `stddev`  take the sample\n     *  * `min`    minum value of the elements in the group\n     *  * `max`    maximum value of the elements in the group\n     * @memberof! Aggregate\n     * @type {string}\n     */\n    operation: {\n      type: 'string',\n      required: true,\n      default: 'avg',\n      values: ['count', 'avg', 'sum', 'stddev', 'min', 'max']\n    },\n    // NOTE: properties for reduction, should be a valid SQL aggregation function\n\n    /**\n     * Normalization: TODO\n     *  * `none`      data in same units as the original data\n     *  * `relative`  data is in percentages of the total; for subgroups in percentage of the parent group\n     * @memberof! Aggregate\n     * @type {string}\n     */\n    normalization: {\n      type: 'string',\n      required: true,\n      default: 'none',\n      values: ['none', 'percentage']\n    }\n  },\n  derived: {\n    // operation values\n    doSum: {\n      deps: ['operation'],\n      fn: function () {\n        return this.operation === 'sum';\n      }\n    },\n    doCount: {\n      deps: ['operation'],\n      fn: function () {\n        return this.operation === 'count';\n      }\n    },\n    doAverage: {\n      deps: ['operation'],\n      fn: function () {\n        return this.operation === 'avg';\n      }\n    },\n    doStddev: {\n      deps: ['operation'],\n      fn: function () {\n        return this.operation === 'stddev';\n      }\n    },\n    doMin: {\n      deps: ['operation'],\n      fn: function () {\n        return this.operation === 'min';\n      }\n    },\n    doMax: {\n      deps: ['operation'],\n      fn: function () {\n        return this.operation === 'max';\n      }\n    },\n\n    // normalization values\n    normalizeNone: {\n      deps: ['normalization'],\n      fn: function () {\n        return this.normalization === 'absolute';\n      }\n    },\n    normalizePercentage: {\n      deps: ['normalization'],\n      fn: function () {\n        return this.normalization === 'percentage';\n      }\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOWQ2My5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvYWdncmVnYXRlLmpzP2JkNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgQWdncmVnYXRlIGNsYXNzIGRlc2NyaWJlcyBob3cgdG8gYWdncmVnYXRlIGRhdGEsIGFzIGRlc2NyaWJlZCBieSBhIGBGYWNldGAgaW50byBhIHNpbmdsZSB2YWx1ZS5cbiAqIEZvciBleGFtcGxlLCB5b3UgY2FuIHN1bSBvciBhdmVyYWdlIG92ZXIgbnVtYmVycywgb3IgY291bnQgdGhlIG51bWJlciBvZiBkaWZmZXJlbnQgbGFiZWxzLlxuICpcbiAqIEBjbGFzcyBBZ2dyZWdhdGVcbiAqIEBleHRlbmRzIEJhc2VcbiAqL1xudmFyIEJhc2VNb2RlbCA9IHJlcXVpcmUoJy4vdXRpbC9iYXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZU1vZGVsLmV4dGVuZCh7XG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGZhY2V0IHRvIGFnZ3JlZ2F0ZSBvdmVyXG4gICAgICogQG1lbWJlcm9mISBBZ2dyZWdhdGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGZhY2V0TmFtZTogJ3N0cmluZycsXG5cbiAgICAvKipcbiAgICAgKiBMYWJlbCBmb3IgZGlzcGxheWluZyBvbiBwbG90c1xuICAgICAqIEBtZW1iZXJvZiEgQWdncmVnYXRlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsYWJlbDoge1xuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gcGFydCBvZiBhIGFnZ3JlZ2F0ZXMsIHRoaXMgZGV0ZXJpbWluZXMgdGhlIG9yZGVyaW5nXG4gICAgICogQG1lbWJlcm9mISBBZ2dyZWdhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHJhbms6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogT3BlcmF0aW9uOlxuICAgICAqICAqIGBjb3VudGAgIGNvdW50IHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGdyb3VwXG4gICAgICogICogYHN1bWAgICAgc3VtIHRoZSBlbGVtZW50cyBpbiB0aGUgZ3JvdXBcbiAgICAgKiAgKiBgYXZnYCAgICB0YWtlIHRoZSBhdmVyYWdlIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgZ3JvdXBcbiAgICAgKiAgKiBgc3RkZGV2YCAgdGFrZSB0aGUgc2FtcGxlXG4gICAgICogICogYG1pbmAgICAgbWludW0gdmFsdWUgb2YgdGhlIGVsZW1lbnRzIGluIHRoZSBncm91cFxuICAgICAqICAqIGBtYXhgICAgIG1heGltdW0gdmFsdWUgb2YgdGhlIGVsZW1lbnRzIGluIHRoZSBncm91cFxuICAgICAqIEBtZW1iZXJvZiEgQWdncmVnYXRlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBvcGVyYXRpb246IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBkZWZhdWx0OiAnYXZnJyxcbiAgICAgIHZhbHVlczogWydjb3VudCcsICdhdmcnLCAnc3VtJywgJ3N0ZGRldicsICdtaW4nLCAnbWF4J11cbiAgICB9LFxuICAgIC8vIE5PVEU6IHByb3BlcnRpZXMgZm9yIHJlZHVjdGlvbiwgc2hvdWxkIGJlIGEgdmFsaWQgU1FMIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uXG5cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemF0aW9uOiBUT0RPXG4gICAgICogICogYG5vbmVgICAgICAgZGF0YSBpbiBzYW1lIHVuaXRzIGFzIHRoZSBvcmlnaW5hbCBkYXRhXG4gICAgICogICogYHJlbGF0aXZlYCAgZGF0YSBpcyBpbiBwZXJjZW50YWdlcyBvZiB0aGUgdG90YWw7IGZvciBzdWJncm91cHMgaW4gcGVyY2VudGFnZSBvZiB0aGUgcGFyZW50IGdyb3VwXG4gICAgICogQG1lbWJlcm9mISBBZ2dyZWdhdGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIG5vcm1hbGl6YXRpb246IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBkZWZhdWx0OiAnbm9uZScsXG4gICAgICB2YWx1ZXM6IFsnbm9uZScsICdwZXJjZW50YWdlJ11cbiAgICB9XG4gIH0sXG4gIGRlcml2ZWQ6IHtcbiAgICAvLyBvcGVyYXRpb24gdmFsdWVzXG4gICAgZG9TdW06IHtcbiAgICAgIGRlcHM6IFsnb3BlcmF0aW9uJ10sXG4gICAgICBmbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRpb24gPT09ICdzdW0nO1xuICAgICAgfVxuICAgIH0sXG4gICAgZG9Db3VudDoge1xuICAgICAgZGVwczogWydvcGVyYXRpb24nXSxcbiAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbiA9PT0gJ2NvdW50JztcbiAgICAgIH1cbiAgICB9LFxuICAgIGRvQXZlcmFnZToge1xuICAgICAgZGVwczogWydvcGVyYXRpb24nXSxcbiAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbiA9PT0gJ2F2Zyc7XG4gICAgICB9XG4gICAgfSxcbiAgICBkb1N0ZGRldjoge1xuICAgICAgZGVwczogWydvcGVyYXRpb24nXSxcbiAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbiA9PT0gJ3N0ZGRldic7XG4gICAgICB9XG4gICAgfSxcbiAgICBkb01pbjoge1xuICAgICAgZGVwczogWydvcGVyYXRpb24nXSxcbiAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbiA9PT0gJ21pbic7XG4gICAgICB9XG4gICAgfSxcbiAgICBkb01heDoge1xuICAgICAgZGVwczogWydvcGVyYXRpb24nXSxcbiAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbiA9PT0gJ21heCc7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIG5vcm1hbGl6YXRpb24gdmFsdWVzXG4gICAgbm9ybWFsaXplTm9uZToge1xuICAgICAgZGVwczogWydub3JtYWxpemF0aW9uJ10sXG4gICAgICBmbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemF0aW9uID09PSAnYWJzb2x1dGUnO1xuICAgICAgfVxuICAgIH0sXG4gICAgbm9ybWFsaXplUGVyY2VudGFnZToge1xuICAgICAgZGVwczogWydub3JtYWxpemF0aW9uJ10sXG4gICAgICBmbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemF0aW9uID09PSAncGVyY2VudGFnZSc7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9d63\n")},a0ca:function(module,exports,__webpack_require__){eval("/**\n * DatetimeTransform defines a transformation on time or dates with timezones\n *\n * @class DatetimeTransform\n */\nvar AmpersandModel = __webpack_require__(/*! ampersand-model */ \"3bfc\");\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\nvar util = __webpack_require__(/*! ../util/time */ \"d45b\");\nvar misval = __webpack_require__(/*! ../util/misval */ \"bff6\");\n\nmodule.exports = AmpersandModel.extend({\n  props: {\n    /**\n     * Timezone to use when parsing, for when timezone information is absent or incorrect.\n     * @memberof! DatetimeTransform\n     * @type {string}\n     */\n    zone: ['string', true, 'ISO8601'],\n\n    /**\n     * Format indentifier to use when parsing, when not in ISO8601 format\n     * Mappings are defined in util/time.js => timeParts.description\n     * @memberof! DatetimeTransform\n     * @type {string}\n     */\n    format: ['string', true, 'ISO8601'],\n\n    /**\n     * Reformats to a string using the momentjs or postgreSQL format specifiers.\n     * This allows a transformation to day of the year, or day of week etc.\n     * @memberof! DatetimeTransform\n     * @type {string}\n     */\n    transformedFormat: ['string', true, 'ISO8601'],\n\n    /**\n     * Controls conversion to duration by subtracting this date\n     * @memberof! DatetimeTransform\n     * @type {string}\n     */\n    transformedReference: 'string',\n\n    /**\n     * Reference timezone for conversion from datetime to duration\n     * @memberof! DatetimeTransform\n     * @type {string}\n     */\n    transformedZone: ['string', true, 'ISO8601']\n\n  },\n  derived: {\n    // reference momentjs for duration <-> datetime conversion\n    referenceMoment: {\n      deps: ['transformedReference', 'transformedZone'],\n      fn: function () {\n        var tz;\n        if (this.transformedZone === 'ISO8601') {\n          tz = moment.tz.guess();\n        } else {\n          var timeZone = util.timeZones.get(this.transformedZone, 'description');\n          if (timeZone && timeZone.format) {\n            tz = timeZone.format;\n          } else {\n            tz = moment.tz.guess();\n          }\n        }\n        if (this.transformedReference) {\n          return moment.tz(this.transformedReference, tz);\n        }\n        return null;\n      }\n    },\n    /**\n     * The type of the facet after the transformation has been applied\n     * @memberof! DatetimeTransform\n     */\n    transformedType: {\n      deps: ['transformedFormat', 'transformedReference'],\n      fn: function () {\n        if (this.transformedReference) {\n          // datetime -> duration\n          return 'duration';\n        } else if (this.transformedFormat === 'ISO8601') {\n          // datetime -> datetime\n          return 'datetime';\n        } else {\n          // datetime -> time part\n          var timePart = util.timeParts.get(this.transformedFormat, 'description');\n          if (timePart && timePart.type) {\n            return timePart.type;\n          }\n        }\n        return 'datetime';\n      },\n      cache: false\n    },\n    /**\n     * The minium value this facet can take, after the transformation has been applied\n     * @type {number}\n     * @memberof! DatetimeTransform\n     */\n    transformedMin: {\n      deps: ['transformedType'],\n      fn: function () {\n        var timePart;\n        if (this.transformedType === 'datetime' || this.transformedType === 'duration') {\n          return this.transform(this.parent.minval);\n        }\n        timePart = util.timeParts.get(this.transformedFormat, 'description');\n        if (timePart.calcualte) {\n          return this.transform(this.parent.minval);\n        } else {\n          return timePart.min;\n        }\n      },\n      cache: false\n    },\n    /**\n     * The maximum value this facet can take, after the transformation has been applied\n     * @type {number}\n     * @memberof! DatetimeTransform\n     */\n    transformedMax: {\n      deps: ['transformedType'],\n      fn: function () {\n        var timePart;\n        if (this.transformedType === 'datetime' || this.transformedType === 'duration') {\n          return this.transform(this.parent.maxval);\n        }\n        timePart = util.timeParts.get(this.transformedFormat, 'description');\n        if (timePart.calcualte) {\n          return this.transform(this.parent.maxval);\n        } else {\n          return timePart.max;\n        }\n      },\n      cache: false\n    },\n    /**\n     * The minimum value this facet can take, after the transformation has been applied\n     *\n     * @type {string}\n     * @memberof! DatetimeTransform\n     */\n    transformedMinAsText: {\n      deps: ['transformedMin', 'transformedType'],\n      fn: function () {\n        var minval = this.transformedMin;\n        if (this.transformedType === 'datetime') {\n          return minval.format();\n        } else {\n          return minval.toString();\n        }\n      },\n      cache: false\n    },\n    /**\n     * The maximum value this facet can take, after the transformation has been applied\n     *\n     * @type {string}\n     * @memberof! DatetimeTransform\n     */\n    transformedMaxAsText: {\n      deps: ['transformedMax', 'transformedType'],\n      fn: function () {\n        var maxval = this.transformedMax;\n        if (this.transformedType === 'datetime') {\n          return maxval.format();\n        } else {\n          return maxval.toString();\n        }\n      },\n      cache: false\n    }\n  },\n\n  /**\n   * @function\n   * @memberof! DatetimeTransform\n   * @param {Object} momentjs\n   * @returns {Object} momentjs\n   */\n  transform: function transform (inval) {\n    if (typeof inval === 'undefined') {\n      return misval;\n    }\n\n    var d = inval.clone();\n    var timePart;\n\n    if (this.referenceMoment) {\n      // datetime -> duration\n      return moment.duration(d.diff(this.referenceMoment, 'milliseconds', true), 'milliseconds');\n    } else if (this.transformedFormat !== 'ISO8601') {\n      timePart = util.timeParts.get(this.transformedFormat, 'description');\n      if (timePart && timePart.momentFormat) {\n        return d.format(timePart.momentFormat);\n      }\n      return d;\n    } else {\n      return d;\n    }\n  },\n  reset: function () {\n    this.unset(['zone', 'transformedFormat', 'transformedZone', 'transformedReference']);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTBjYS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZmFjZXQvZGF0ZXRpbWUtdHJhbnNmb3JtLmpzPzM1YTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEYXRldGltZVRyYW5zZm9ybSBkZWZpbmVzIGEgdHJhbnNmb3JtYXRpb24gb24gdGltZSBvciBkYXRlcyB3aXRoIHRpbWV6b25lc1xuICpcbiAqIEBjbGFzcyBEYXRldGltZVRyYW5zZm9ybVxuICovXG52YXIgQW1wZXJzYW5kTW9kZWwgPSByZXF1aXJlKCdhbXBlcnNhbmQtbW9kZWwnKTtcbnZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQtdGltZXpvbmUnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbC90aW1lJyk7XG52YXIgbWlzdmFsID0gcmVxdWlyZSgnLi4vdXRpbC9taXN2YWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbXBlcnNhbmRNb2RlbC5leHRlbmQoe1xuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIFRpbWV6b25lIHRvIHVzZSB3aGVuIHBhcnNpbmcsIGZvciB3aGVuIHRpbWV6b25lIGluZm9ybWF0aW9uIGlzIGFic2VudCBvciBpbmNvcnJlY3QuXG4gICAgICogQG1lbWJlcm9mISBEYXRldGltZVRyYW5zZm9ybVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgem9uZTogWydzdHJpbmcnLCB0cnVlLCAnSVNPODYwMSddLFxuXG4gICAgLyoqXG4gICAgICogRm9ybWF0IGluZGVudGlmaWVyIHRvIHVzZSB3aGVuIHBhcnNpbmcsIHdoZW4gbm90IGluIElTTzg2MDEgZm9ybWF0XG4gICAgICogTWFwcGluZ3MgYXJlIGRlZmluZWQgaW4gdXRpbC90aW1lLmpzID0+IHRpbWVQYXJ0cy5kZXNjcmlwdGlvblxuICAgICAqIEBtZW1iZXJvZiEgRGF0ZXRpbWVUcmFuc2Zvcm1cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGZvcm1hdDogWydzdHJpbmcnLCB0cnVlLCAnSVNPODYwMSddLFxuXG4gICAgLyoqXG4gICAgICogUmVmb3JtYXRzIHRvIGEgc3RyaW5nIHVzaW5nIHRoZSBtb21lbnRqcyBvciBwb3N0Z3JlU1FMIGZvcm1hdCBzcGVjaWZpZXJzLlxuICAgICAqIFRoaXMgYWxsb3dzIGEgdHJhbnNmb3JtYXRpb24gdG8gZGF5IG9mIHRoZSB5ZWFyLCBvciBkYXkgb2Ygd2VlayBldGMuXG4gICAgICogQG1lbWJlcm9mISBEYXRldGltZVRyYW5zZm9ybVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHJhbnNmb3JtZWRGb3JtYXQ6IFsnc3RyaW5nJywgdHJ1ZSwgJ0lTTzg2MDEnXSxcblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIGNvbnZlcnNpb24gdG8gZHVyYXRpb24gYnkgc3VidHJhY3RpbmcgdGhpcyBkYXRlXG4gICAgICogQG1lbWJlcm9mISBEYXRldGltZVRyYW5zZm9ybVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHJhbnNmb3JtZWRSZWZlcmVuY2U6ICdzdHJpbmcnLFxuXG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRpbWV6b25lIGZvciBjb252ZXJzaW9uIGZyb20gZGF0ZXRpbWUgdG8gZHVyYXRpb25cbiAgICAgKiBAbWVtYmVyb2YhIERhdGV0aW1lVHJhbnNmb3JtXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1lZFpvbmU6IFsnc3RyaW5nJywgdHJ1ZSwgJ0lTTzg2MDEnXVxuXG4gIH0sXG4gIGRlcml2ZWQ6IHtcbiAgICAvLyByZWZlcmVuY2UgbW9tZW50anMgZm9yIGR1cmF0aW9uIDwtPiBkYXRldGltZSBjb252ZXJzaW9uXG4gICAgcmVmZXJlbmNlTW9tZW50OiB7XG4gICAgICBkZXBzOiBbJ3RyYW5zZm9ybWVkUmVmZXJlbmNlJywgJ3RyYW5zZm9ybWVkWm9uZSddLFxuICAgICAgZm46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHR6O1xuICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm1lZFpvbmUgPT09ICdJU084NjAxJykge1xuICAgICAgICAgIHR6ID0gbW9tZW50LnR6Lmd1ZXNzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHRpbWVab25lID0gdXRpbC50aW1lWm9uZXMuZ2V0KHRoaXMudHJhbnNmb3JtZWRab25lLCAnZGVzY3JpcHRpb24nKTtcbiAgICAgICAgICBpZiAodGltZVpvbmUgJiYgdGltZVpvbmUuZm9ybWF0KSB7XG4gICAgICAgICAgICB0eiA9IHRpbWVab25lLmZvcm1hdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHogPSBtb21lbnQudHouZ3Vlc3MoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtZWRSZWZlcmVuY2UpIHtcbiAgICAgICAgICByZXR1cm4gbW9tZW50LnR6KHRoaXMudHJhbnNmb3JtZWRSZWZlcmVuY2UsIHR6KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBmYWNldCBhZnRlciB0aGUgdHJhbnNmb3JtYXRpb24gaGFzIGJlZW4gYXBwbGllZFxuICAgICAqIEBtZW1iZXJvZiEgRGF0ZXRpbWVUcmFuc2Zvcm1cbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1lZFR5cGU6IHtcbiAgICAgIGRlcHM6IFsndHJhbnNmb3JtZWRGb3JtYXQnLCAndHJhbnNmb3JtZWRSZWZlcmVuY2UnXSxcbiAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybWVkUmVmZXJlbmNlKSB7XG4gICAgICAgICAgLy8gZGF0ZXRpbWUgLT4gZHVyYXRpb25cbiAgICAgICAgICByZXR1cm4gJ2R1cmF0aW9uJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYW5zZm9ybWVkRm9ybWF0ID09PSAnSVNPODYwMScpIHtcbiAgICAgICAgICAvLyBkYXRldGltZSAtPiBkYXRldGltZVxuICAgICAgICAgIHJldHVybiAnZGF0ZXRpbWUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRhdGV0aW1lIC0+IHRpbWUgcGFydFxuICAgICAgICAgIHZhciB0aW1lUGFydCA9IHV0aWwudGltZVBhcnRzLmdldCh0aGlzLnRyYW5zZm9ybWVkRm9ybWF0LCAnZGVzY3JpcHRpb24nKTtcbiAgICAgICAgICBpZiAodGltZVBhcnQgJiYgdGltZVBhcnQudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVQYXJ0LnR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnZGF0ZXRpbWUnO1xuICAgICAgfSxcbiAgICAgIGNhY2hlOiBmYWxzZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIG1pbml1bSB2YWx1ZSB0aGlzIGZhY2V0IGNhbiB0YWtlLCBhZnRlciB0aGUgdHJhbnNmb3JtYXRpb24gaGFzIGJlZW4gYXBwbGllZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mISBEYXRldGltZVRyYW5zZm9ybVxuICAgICAqL1xuICAgIHRyYW5zZm9ybWVkTWluOiB7XG4gICAgICBkZXBzOiBbJ3RyYW5zZm9ybWVkVHlwZSddLFxuICAgICAgZm46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRpbWVQYXJ0O1xuICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm1lZFR5cGUgPT09ICdkYXRldGltZScgfHwgdGhpcy50cmFuc2Zvcm1lZFR5cGUgPT09ICdkdXJhdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0odGhpcy5wYXJlbnQubWludmFsKTtcbiAgICAgICAgfVxuICAgICAgICB0aW1lUGFydCA9IHV0aWwudGltZVBhcnRzLmdldCh0aGlzLnRyYW5zZm9ybWVkRm9ybWF0LCAnZGVzY3JpcHRpb24nKTtcbiAgICAgICAgaWYgKHRpbWVQYXJ0LmNhbGN1YWx0ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh0aGlzLnBhcmVudC5taW52YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aW1lUGFydC5taW47XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYWNoZTogZmFsc2VcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHZhbHVlIHRoaXMgZmFjZXQgY2FuIHRha2UsIGFmdGVyIHRoZSB0cmFuc2Zvcm1hdGlvbiBoYXMgYmVlbiBhcHBsaWVkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YhIERhdGV0aW1lVHJhbnNmb3JtXG4gICAgICovXG4gICAgdHJhbnNmb3JtZWRNYXg6IHtcbiAgICAgIGRlcHM6IFsndHJhbnNmb3JtZWRUeXBlJ10sXG4gICAgICBmbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGltZVBhcnQ7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybWVkVHlwZSA9PT0gJ2RhdGV0aW1lJyB8fCB0aGlzLnRyYW5zZm9ybWVkVHlwZSA9PT0gJ2R1cmF0aW9uJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh0aGlzLnBhcmVudC5tYXh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVQYXJ0ID0gdXRpbC50aW1lUGFydHMuZ2V0KHRoaXMudHJhbnNmb3JtZWRGb3JtYXQsICdkZXNjcmlwdGlvbicpO1xuICAgICAgICBpZiAodGltZVBhcnQuY2FsY3VhbHRlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKHRoaXMucGFyZW50Lm1heHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRpbWVQYXJ0Lm1heDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhY2hlOiBmYWxzZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIG1pbmltdW0gdmFsdWUgdGhpcyBmYWNldCBjYW4gdGFrZSwgYWZ0ZXIgdGhlIHRyYW5zZm9ybWF0aW9uIGhhcyBiZWVuIGFwcGxpZWRcbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mISBEYXRldGltZVRyYW5zZm9ybVxuICAgICAqL1xuICAgIHRyYW5zZm9ybWVkTWluQXNUZXh0OiB7XG4gICAgICBkZXBzOiBbJ3RyYW5zZm9ybWVkTWluJywgJ3RyYW5zZm9ybWVkVHlwZSddLFxuICAgICAgZm46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1pbnZhbCA9IHRoaXMudHJhbnNmb3JtZWRNaW47XG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybWVkVHlwZSA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICAgIHJldHVybiBtaW52YWwuZm9ybWF0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG1pbnZhbC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2FjaGU6IGZhbHNlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSB2YWx1ZSB0aGlzIGZhY2V0IGNhbiB0YWtlLCBhZnRlciB0aGUgdHJhbnNmb3JtYXRpb24gaGFzIGJlZW4gYXBwbGllZFxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YhIERhdGV0aW1lVHJhbnNmb3JtXG4gICAgICovXG4gICAgdHJhbnNmb3JtZWRNYXhBc1RleHQ6IHtcbiAgICAgIGRlcHM6IFsndHJhbnNmb3JtZWRNYXgnLCAndHJhbnNmb3JtZWRUeXBlJ10sXG4gICAgICBmbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWF4dmFsID0gdGhpcy50cmFuc2Zvcm1lZE1heDtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtZWRUeXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgcmV0dXJuIG1heHZhbC5mb3JtYXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4dmFsLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYWNoZTogZmFsc2VcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyb2YhIERhdGV0aW1lVHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtb21lbnRqc1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBtb21lbnRqc1xuICAgKi9cbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0gKGludmFsKSB7XG4gICAgaWYgKHR5cGVvZiBpbnZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBtaXN2YWw7XG4gICAgfVxuXG4gICAgdmFyIGQgPSBpbnZhbC5jbG9uZSgpO1xuICAgIHZhciB0aW1lUGFydDtcblxuICAgIGlmICh0aGlzLnJlZmVyZW5jZU1vbWVudCkge1xuICAgICAgLy8gZGF0ZXRpbWUgLT4gZHVyYXRpb25cbiAgICAgIHJldHVybiBtb21lbnQuZHVyYXRpb24oZC5kaWZmKHRoaXMucmVmZXJlbmNlTW9tZW50LCAnbWlsbGlzZWNvbmRzJywgdHJ1ZSksICdtaWxsaXNlY29uZHMnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudHJhbnNmb3JtZWRGb3JtYXQgIT09ICdJU084NjAxJykge1xuICAgICAgdGltZVBhcnQgPSB1dGlsLnRpbWVQYXJ0cy5nZXQodGhpcy50cmFuc2Zvcm1lZEZvcm1hdCwgJ2Rlc2NyaXB0aW9uJyk7XG4gICAgICBpZiAodGltZVBhcnQgJiYgdGltZVBhcnQubW9tZW50Rm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBkLmZvcm1hdCh0aW1lUGFydC5tb21lbnRGb3JtYXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgfSxcbiAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVuc2V0KFsnem9uZScsICd0cmFuc2Zvcm1lZEZvcm1hdCcsICd0cmFuc2Zvcm1lZFpvbmUnLCAndHJhbnNmb3JtZWRSZWZlcmVuY2UnXSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a0ca\n")},a376:function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\n\nmodule.exports = {\n  filterExact: crossfilter_filterExact,\n  filterRange: crossfilter_filterRange,\n  filterAll: crossfilter_filterAll\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTM3Ni5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9maWx0ZXIuanM/MzFmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyb3NzZmlsdGVyX2ZpbHRlckV4YWN0KGJpc2VjdCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlcykge1xuICAgIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gW2Jpc2VjdC5sZWZ0KHZhbHVlcywgdmFsdWUsIDAsIG4pLCBiaXNlY3QucmlnaHQodmFsdWVzLCB2YWx1ZSwgMCwgbildO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcm9zc2ZpbHRlcl9maWx0ZXJSYW5nZShiaXNlY3QsIHJhbmdlKSB7XG4gIHZhciBtaW4gPSByYW5nZVswXSxcbiAgICAgIG1heCA9IHJhbmdlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiBbYmlzZWN0LmxlZnQodmFsdWVzLCBtaW4sIDAsIG4pLCBiaXNlY3QubGVmdCh2YWx1ZXMsIG1heCwgMCwgbildO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcm9zc2ZpbHRlcl9maWx0ZXJBbGwodmFsdWVzKSB7XG4gIHJldHVybiBbMCwgdmFsdWVzLmxlbmd0aF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaWx0ZXJFeGFjdDogY3Jvc3NmaWx0ZXJfZmlsdGVyRXhhY3QsXG4gIGZpbHRlclJhbmdlOiBjcm9zc2ZpbHRlcl9maWx0ZXJSYW5nZSxcbiAgZmlsdGVyQWxsOiBjcm9zc2ZpbHRlcl9maWx0ZXJBbGxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///a376\n")},a74f:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar crossfilter_identity = __webpack_require__(/*! ./identity */ "55a3");\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nmodule.exports = heap_by(crossfilter_identity);\nmodule.exports.by = heap_by;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTc0Zi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9oZWFwLmpzP2RiY2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3Jvc3NmaWx0ZXJfaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbmZ1bmN0aW9uIGhlYXBfYnkoZikge1xuXG4gIC8vIEJ1aWxkcyBhIGJpbmFyeSBoZWFwIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGFycmF5IGFbbG86aGldLiBUaGUgaGVhcCBoYXMgdGhlXG4gIC8vIHByb3BlcnR5IHN1Y2ggdGhhdCB0aGUgcGFyZW50IGFbbG8raV0gaXMgYWx3YXlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBpdHNcbiAgLy8gdHdvIGNoaWxkcmVuOiBhW2xvKzIqaSsxXSBhbmQgYVtsbysyKmkrMl0uXG4gIGZ1bmN0aW9uIGhlYXAoYSwgbG8sIGhpKSB7XG4gICAgdmFyIG4gPSBoaSAtIGxvLFxuICAgICAgICBpID0gKG4gPj4+IDEpICsgMTtcbiAgICB3aGlsZSAoLS1pID4gMCkgc2lmdChhLCBpLCBuLCBsbyk7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICAvLyBTb3J0cyB0aGUgc3BlY2lmaWVkIGFycmF5IGFbbG86aGldIGluIGRlc2NlbmRpbmcgb3JkZXIsIGFzc3VtaW5nIGl0IGlzXG4gIC8vIGFscmVhZHkgYSBoZWFwLlxuICBmdW5jdGlvbiBzb3J0KGEsIGxvLCBoaSkge1xuICAgIHZhciBuID0gaGkgLSBsbyxcbiAgICAgICAgdDtcbiAgICB3aGlsZSAoLS1uID4gMCkgdCA9IGFbbG9dLCBhW2xvXSA9IGFbbG8gKyBuXSwgYVtsbyArIG5dID0gdCwgc2lmdChhLCAxLCBuLCBsbyk7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICAvLyBTaWZ0cyB0aGUgZWxlbWVudCBhW2xvK2ktMV0gZG93biB0aGUgaGVhcCwgd2hlcmUgdGhlIGhlYXAgaXMgdGhlIGNvbnRpZ3VvdXNcbiAgLy8gc2xpY2Ugb2YgYXJyYXkgYVtsbzpsbytuXS4gVGhpcyBtZXRob2QgY2FuIGFsc28gYmUgdXNlZCB0byB1cGRhdGUgdGhlIGhlYXBcbiAgLy8gaW5jcmVtZW50YWxseSwgd2l0aG91dCBpbmN1cnJpbmcgdGhlIGZ1bGwgY29zdCBvZiByZWNvbnN0cnVjdGluZyB0aGUgaGVhcC5cbiAgZnVuY3Rpb24gc2lmdChhLCBpLCBuLCBsbykge1xuICAgIHZhciBkID0gYVstLWxvICsgaV0sXG4gICAgICAgIHggPSBmKGQpLFxuICAgICAgICBjaGlsZDtcbiAgICB3aGlsZSAoKGNoaWxkID0gaSA8PCAxKSA8PSBuKSB7XG4gICAgICBpZiAoY2hpbGQgPCBuICYmIGYoYVtsbyArIGNoaWxkXSkgPiBmKGFbbG8gKyBjaGlsZCArIDFdKSkgY2hpbGQrKztcbiAgICAgIGlmICh4IDw9IGYoYVtsbyArIGNoaWxkXSkpIGJyZWFrO1xuICAgICAgYVtsbyArIGldID0gYVtsbyArIGNoaWxkXTtcbiAgICAgIGkgPSBjaGlsZDtcbiAgICB9XG4gICAgYVtsbyArIGldID0gZDtcbiAgfVxuXG4gIGhlYXAuc29ydCA9IHNvcnQ7XG4gIHJldHVybiBoZWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhlYXBfYnkoY3Jvc3NmaWx0ZXJfaWRlbnRpdHkpO1xubW9kdWxlLmV4cG9ydHMuYnkgPSBoZWFwX2J5O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///a74f\n')},a8db:function(module,exports){eval('module.exports = {"_from":"git://github.com/crossfilter/crossfilter.git#37b03d13f52c28b5dcfbca4673f795c225aa9095","_id":"crossfilter2@1.4.6","_inBundle":false,"_integrity":"","_location":"/spot-framework/crossfilter2","_phantomChildren":{},"_requested":{"type":"git","raw":"crossfilter2@git://github.com/crossfilter/crossfilter.git#37b03d13f52c28b5dcfbca4673f795c225aa9095","name":"crossfilter2","escapedName":"crossfilter2","rawSpec":"git://github.com/crossfilter/crossfilter.git#37b03d13f52c28b5dcfbca4673f795c225aa9095","saveSpec":"git://github.com/crossfilter/crossfilter.git#37b03d13f52c28b5dcfbca4673f795c225aa9095","fetchSpec":"git://github.com/crossfilter/crossfilter.git","gitCommittish":"37b03d13f52c28b5dcfbca4673f795c225aa9095"},"_requiredBy":["/spot-framework"],"_resolved":"git://github.com/crossfilter/crossfilter.git#37b03d13f52c28b5dcfbca4673f795c225aa9095","_spec":"crossfilter2@git://github.com/crossfilter/crossfilter.git#37b03d13f52c28b5dcfbca4673f795c225aa9095","_where":"/home/fdiblen/nlesc/projects/idark/SPOT/spot/node_modules/spot-framework","author":{"name":"Mike Bostock","url":"http://bost.ocks.org/mike"},"bugs":{"url":"https://github.com/crossfilter/crossfilter/issues"},"bundleDependencies":false,"contributors":[{"name":"Jason Davies","url":"http://www.jasondavies.com/"}],"dependencies":{"lodash.result":"^4.4.0"},"deprecated":false,"description":"Fast multidimensional filtering for coordinated views.","devDependencies":{"browserify":"^13.0.0","d3":"3.5","eslint":"2.10.2","package-json-versionify":"1.0.2","semver":"^5.3.0","sinon":"^4.0.2","uglify-js":"2.4.0","vows":"0.7.0"},"eslintConfig":{"env":{"browser":true,"node":true},"globals":{"Uint8Array":true,"Uint16Array":true,"Uint32Array":true},"extends":"eslint:recommended"},"files":["src","index.js","index.d.ts","crossfilter.js","crossfilter.min.js"],"homepage":"https://crossfilter.github.io/crossfilter/","keywords":["analytics","visualization","crossfilter"],"license":"Apache-2.0","main":"./index.js","maintainers":[{"name":"Gordon Woodhull","url":"https://github.com/gordonwoodhull"},{"name":"Tanner Linsley","url":"https://github.com/tannerlinsley"},{"name":"Ethan Jewett","url":"https://github.com/esjewett"}],"name":"crossfilter2","repository":{"type":"git","url":"git+ssh://git@github.com/crossfilter/crossfilter.git"},"scripts":{"benchmark":"node test/benchmark.js","build":"browserify index.js -t package-json-versionify --standalone crossfilter -o crossfilter.js && uglifyjs --compress --mangle --screw-ie8 crossfilter.js -o crossfilter.min.js","clean":"rm -f crossfilter.js crossfilter.min.js","test":"vows --verbose && eslint src/"},"types":"./index.d.ts","unpkg":"./crossfilter.min.js","version":"1.4.6"}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYThkYi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3BhY2thZ2UuanNvbj8wNTNiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1wiX2Zyb21cIjpcImdpdDovL2dpdGh1Yi5jb20vY3Jvc3NmaWx0ZXIvY3Jvc3NmaWx0ZXIuZ2l0IzM3YjAzZDEzZjUyYzI4YjVkY2ZiY2E0NjczZjc5NWMyMjVhYTkwOTVcIixcIl9pZFwiOlwiY3Jvc3NmaWx0ZXIyQDEuNC42XCIsXCJfaW5CdW5kbGVcIjpmYWxzZSxcIl9pbnRlZ3JpdHlcIjpcIlwiLFwiX2xvY2F0aW9uXCI6XCIvc3BvdC1mcmFtZXdvcmsvY3Jvc3NmaWx0ZXIyXCIsXCJfcGhhbnRvbUNoaWxkcmVuXCI6e30sXCJfcmVxdWVzdGVkXCI6e1widHlwZVwiOlwiZ2l0XCIsXCJyYXdcIjpcImNyb3NzZmlsdGVyMkBnaXQ6Ly9naXRodWIuY29tL2Nyb3NzZmlsdGVyL2Nyb3NzZmlsdGVyLmdpdCMzN2IwM2QxM2Y1MmMyOGI1ZGNmYmNhNDY3M2Y3OTVjMjI1YWE5MDk1XCIsXCJuYW1lXCI6XCJjcm9zc2ZpbHRlcjJcIixcImVzY2FwZWROYW1lXCI6XCJjcm9zc2ZpbHRlcjJcIixcInJhd1NwZWNcIjpcImdpdDovL2dpdGh1Yi5jb20vY3Jvc3NmaWx0ZXIvY3Jvc3NmaWx0ZXIuZ2l0IzM3YjAzZDEzZjUyYzI4YjVkY2ZiY2E0NjczZjc5NWMyMjVhYTkwOTVcIixcInNhdmVTcGVjXCI6XCJnaXQ6Ly9naXRodWIuY29tL2Nyb3NzZmlsdGVyL2Nyb3NzZmlsdGVyLmdpdCMzN2IwM2QxM2Y1MmMyOGI1ZGNmYmNhNDY3M2Y3OTVjMjI1YWE5MDk1XCIsXCJmZXRjaFNwZWNcIjpcImdpdDovL2dpdGh1Yi5jb20vY3Jvc3NmaWx0ZXIvY3Jvc3NmaWx0ZXIuZ2l0XCIsXCJnaXRDb21taXR0aXNoXCI6XCIzN2IwM2QxM2Y1MmMyOGI1ZGNmYmNhNDY3M2Y3OTVjMjI1YWE5MDk1XCJ9LFwiX3JlcXVpcmVkQnlcIjpbXCIvc3BvdC1mcmFtZXdvcmtcIl0sXCJfcmVzb2x2ZWRcIjpcImdpdDovL2dpdGh1Yi5jb20vY3Jvc3NmaWx0ZXIvY3Jvc3NmaWx0ZXIuZ2l0IzM3YjAzZDEzZjUyYzI4YjVkY2ZiY2E0NjczZjc5NWMyMjVhYTkwOTVcIixcIl9zcGVjXCI6XCJjcm9zc2ZpbHRlcjJAZ2l0Oi8vZ2l0aHViLmNvbS9jcm9zc2ZpbHRlci9jcm9zc2ZpbHRlci5naXQjMzdiMDNkMTNmNTJjMjhiNWRjZmJjYTQ2NzNmNzk1YzIyNWFhOTA5NVwiLFwiX3doZXJlXCI6XCIvaG9tZS9mZGlibGVuL25sZXNjL3Byb2plY3RzL2lkYXJrL1NQT1Qvc3BvdC9ub2RlX21vZHVsZXMvc3BvdC1mcmFtZXdvcmtcIixcImF1dGhvclwiOntcIm5hbWVcIjpcIk1pa2UgQm9zdG9ja1wiLFwidXJsXCI6XCJodHRwOi8vYm9zdC5vY2tzLm9yZy9taWtlXCJ9LFwiYnVnc1wiOntcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2Nyb3NzZmlsdGVyL2Nyb3NzZmlsdGVyL2lzc3Vlc1wifSxcImJ1bmRsZURlcGVuZGVuY2llc1wiOmZhbHNlLFwiY29udHJpYnV0b3JzXCI6W3tcIm5hbWVcIjpcIkphc29uIERhdmllc1wiLFwidXJsXCI6XCJodHRwOi8vd3d3Lmphc29uZGF2aWVzLmNvbS9cIn1dLFwiZGVwZW5kZW5jaWVzXCI6e1wibG9kYXNoLnJlc3VsdFwiOlwiXjQuNC4wXCJ9LFwiZGVwcmVjYXRlZFwiOmZhbHNlLFwiZGVzY3JpcHRpb25cIjpcIkZhc3QgbXVsdGlkaW1lbnNpb25hbCBmaWx0ZXJpbmcgZm9yIGNvb3JkaW5hdGVkIHZpZXdzLlwiLFwiZGV2RGVwZW5kZW5jaWVzXCI6e1wiYnJvd3NlcmlmeVwiOlwiXjEzLjAuMFwiLFwiZDNcIjpcIjMuNVwiLFwiZXNsaW50XCI6XCIyLjEwLjJcIixcInBhY2thZ2UtanNvbi12ZXJzaW9uaWZ5XCI6XCIxLjAuMlwiLFwic2VtdmVyXCI6XCJeNS4zLjBcIixcInNpbm9uXCI6XCJeNC4wLjJcIixcInVnbGlmeS1qc1wiOlwiMi40LjBcIixcInZvd3NcIjpcIjAuNy4wXCJ9LFwiZXNsaW50Q29uZmlnXCI6e1wiZW52XCI6e1wiYnJvd3NlclwiOnRydWUsXCJub2RlXCI6dHJ1ZX0sXCJnbG9iYWxzXCI6e1wiVWludDhBcnJheVwiOnRydWUsXCJVaW50MTZBcnJheVwiOnRydWUsXCJVaW50MzJBcnJheVwiOnRydWV9LFwiZXh0ZW5kc1wiOlwiZXNsaW50OnJlY29tbWVuZGVkXCJ9LFwiZmlsZXNcIjpbXCJzcmNcIixcImluZGV4LmpzXCIsXCJpbmRleC5kLnRzXCIsXCJjcm9zc2ZpbHRlci5qc1wiLFwiY3Jvc3NmaWx0ZXIubWluLmpzXCJdLFwiaG9tZXBhZ2VcIjpcImh0dHBzOi8vY3Jvc3NmaWx0ZXIuZ2l0aHViLmlvL2Nyb3NzZmlsdGVyL1wiLFwia2V5d29yZHNcIjpbXCJhbmFseXRpY3NcIixcInZpc3VhbGl6YXRpb25cIixcImNyb3NzZmlsdGVyXCJdLFwibGljZW5zZVwiOlwiQXBhY2hlLTIuMFwiLFwibWFpblwiOlwiLi9pbmRleC5qc1wiLFwibWFpbnRhaW5lcnNcIjpbe1wibmFtZVwiOlwiR29yZG9uIFdvb2RodWxsXCIsXCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9nb3Jkb253b29kaHVsbFwifSx7XCJuYW1lXCI6XCJUYW5uZXIgTGluc2xleVwiLFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vdGFubmVybGluc2xleVwifSx7XCJuYW1lXCI6XCJFdGhhbiBKZXdldHRcIixcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2VzamV3ZXR0XCJ9XSxcIm5hbWVcIjpcImNyb3NzZmlsdGVyMlwiLFwicmVwb3NpdG9yeVwiOntcInR5cGVcIjpcImdpdFwiLFwidXJsXCI6XCJnaXQrc3NoOi8vZ2l0QGdpdGh1Yi5jb20vY3Jvc3NmaWx0ZXIvY3Jvc3NmaWx0ZXIuZ2l0XCJ9LFwic2NyaXB0c1wiOntcImJlbmNobWFya1wiOlwibm9kZSB0ZXN0L2JlbmNobWFyay5qc1wiLFwiYnVpbGRcIjpcImJyb3dzZXJpZnkgaW5kZXguanMgLXQgcGFja2FnZS1qc29uLXZlcnNpb25pZnkgLS1zdGFuZGFsb25lIGNyb3NzZmlsdGVyIC1vIGNyb3NzZmlsdGVyLmpzICYmIHVnbGlmeWpzIC0tY29tcHJlc3MgLS1tYW5nbGUgLS1zY3Jldy1pZTggY3Jvc3NmaWx0ZXIuanMgLW8gY3Jvc3NmaWx0ZXIubWluLmpzXCIsXCJjbGVhblwiOlwicm0gLWYgY3Jvc3NmaWx0ZXIuanMgY3Jvc3NmaWx0ZXIubWluLmpzXCIsXCJ0ZXN0XCI6XCJ2b3dzIC0tdmVyYm9zZSAmJiBlc2xpbnQgc3JjL1wifSxcInR5cGVzXCI6XCIuL2luZGV4LmQudHNcIixcInVucGtnXCI6XCIuL2Nyb3NzZmlsdGVyLm1pbi5qc1wiLFwidmVyc2lvblwiOlwiMS40LjZcIn0iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a8db\n')},aa6c:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Module dependencies.\n */\n\nvar keys = __webpack_require__(/*! ./keys */ \"7d91\");\nvar hasBinary = __webpack_require__(/*! has-binary */ \"d304\");\nvar sliceBuffer = __webpack_require__(/*! arraybuffer.slice */ \"ef13\");\nvar after = __webpack_require__(/*! after */ \"4aa5\");\nvar utf8 = __webpack_require__(/*! wtf-8 */ \"943e\");\n\nvar base64encoder;\nif (global && global.ArrayBuffer) {\n  base64encoder = __webpack_require__(/*! base64-arraybuffer */ \"21de\");\n}\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = __webpack_require__(/*! blob */ \"939f\");\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if ('function' == typeof supportsBinary) {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if ('function' == typeof utf8encode) {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n  // String data\n  if (typeof data == 'string') {\n    if (data.charAt(0) == 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n      if (data === false) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data);\n  } catch (e) {\n    return false;\n  }\n  return data;\n}\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!base64encoder) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary == 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data != 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data == '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = ''\n    , n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (':' != chr) {\n      length += chr;\n    } else {\n      if ('' == length || (length != (n = Number(length)))) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      msg = data.substr(i + 1, n);\n\n      if (length != msg.length) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      if (msg.length) {\n        packet = exports.decodePacket(msg, binaryType, true);\n\n        if (err.type == packet.type && err.data == packet.data) {\n          // parser error in individual packet - ignoring payload\n          return callback(err, 0, 1);\n        }\n\n        var ret = callback(packet, i + n, l);\n        if (false === ret) return;\n      }\n\n      // advance cursor\n      i += n;\n      length = '';\n    }\n  }\n\n  if (length != '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  var numberTooLong = false;\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] == 255) break;\n\n      if (msgLength.length > 310) {\n        numberTooLong = true;\n        break;\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    if(numberTooLong) return callback(err, 0, 1);\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aa6c\n")},adfa:function(module,exports,__webpack_require__){eval("/**\n * Utility functions for crossfilter datasets\n * We roughly follow the crossfilter design of dimensions and groups, but we\n * add extra steps to allow transformations on the data.\n * 1. a datum is turned into a raw value, ie. string or number etc. by rawValueFn\n * 2. it is then cast to the correct type value using baseValFn\n * 3. a further transfrom can be applied with valueFn\n * 4. a value is grouped using groupFn; this value must be either a number or a string.\n *\n * @module client/util-crossfilter\n * @see rawValueFn, baseValueFn, valueFn, groupFn\n */\nvar misval = __webpack_require__(/*! ./misval */ \"bff6\");\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\nvar util = __webpack_require__(/*! ../util/time */ \"d45b\");\n\n/**\n * @typedef {Object} SubgroupValue\n * @property {number} count The count of the number of elements in this subgroup\n * @property {number} sum The sum of all elements in this subgroup\n */\n\n/**\n * Reduce a SubgroupValue to a single number\n *\n * @callback reduceCB\n * @param {SubgroupValue} d SubgroupValue\n * @returns {number} Reduced value\n */\n/**\n\n/**\n * Returns a function for further reducing the crossfilter group\n * to a single value, depending on sum/count/average settings of\n * the Aggregate class.\n * @param {Aggregate} facet - The Aggregate class for which to create the reduction function\n * @returns {cb} The required reduction function\n */\nfunction reduceFn (aggregate) {\n  if (aggregate.doSum) {\n    /**\n     * @callback subgroupSum\n     * @param {SubgroupValue} d\n     * @returns {number} sum\n     */\n    return function (d) {\n      if (d === misval || d == null) {\n        return misval;\n      }\n      if (d.count > 0) {\n        return d.sum;\n      } else {\n        return misval;\n      }\n    };\n  } else if (aggregate.doCount) {\n    /**\n     * @callback subgroupCount\n     * @param {SubgroupValue} d\n     * @returns {number} count\n     */\n    return function (d) {\n      if (d === misval || d == null) {\n        return misval;\n      }\n      if (d.count > 0) {\n        return d.count;\n      } else {\n        return misval;\n      }\n    };\n  } else if (aggregate.doAverage) {\n    /**\n     * @callback subgroupAverage\n     * @param {SubgroupValue} d\n     * @returns {number} d.sum/d.count\n     */\n    return function (d) {\n      if (d === misval || d == null) {\n        return misval;\n      }\n\n      if (d.count > 0) {\n        return d.sum / d.count;\n      } else {\n        return misval;\n      }\n    };\n  } else if (aggregate.doStddev) {\n    /**\n     * @callback subgroupStddev\n     * @param {SubgroupValue} d\n     * @returns {number} stddev(d)\n     */\n    return function (d) {\n      if (d === misval || d == null) {\n        return misval;\n      }\n\n      // \\sum_i (x_i - \\bar x)^2 =\n      //   \\sum_i (x_i^2 - 2x_i\\bar x + (\\bar x)^2) =\n      //   \\sum_i (x_i^2) - 2 N (\\bar x)^2 + N(\\bar x)^2 =\n      //   \\sum_i (x_i^2) - N (\\bar x)^2\n      if (d.count > 1) {\n        return Math.sqrt((d.sumsquares - (d.sum * d.sum / d.count)) / (d.count - 1));\n      } else {\n        return misval;\n      }\n    };\n  }\n\n  console.error('Operation not implemented for this Aggregate', aggregate);\n  return function (d) {\n    if (d === misval || d == null) {\n      return misval;\n    }\n    if (d.count > 0) {\n      return d.count;\n    } else {\n      return misval;\n    }\n  };\n}\n\n// ********************************************************\n// Facet transform utility function\n// ********************************************************\n\n/**\n * Returns the base value for a datum\n *\n * @callback baseValueCB\n * @param {Object} d Raw data record\n * @returns {Object} base value\n */\n\n/**\n * Raw value for given facet\n * @param {Facet} facet\n * @returns {rawValueCB} Raw value function for this facet\n */\nfunction rawValueFn (facet) {\n  var accessor;\n\n  // Array dimensions have a [] appended to the accessor,\n  // remove it to get to the actual accessor\n  var path = facet.accessor;\n  if (path.match(/\\[]$/)) {\n    path = path.substring(0, path.length - 2);\n  }\n\n  var misvals = {};\n  facet.misval.forEach(function (val) {\n    misvals[val] = true;\n  });\n\n  // Access nested properties via a double hash sign, this to prevent collision with regular keys; fi. 'person.name'\n  path = path.split('##');\n\n  if (path.length === 1) {\n    // Use a simple direct accessor, as it is probably faster than the more general case\n    // and it was implemented already\n    if (facet.misval.length > 0) {\n      accessor = function (d) {\n        var value = d[path[0]];\n        if (value === undefined || value === null || value in misvals) {\n          return misval;\n        }\n        return value;\n      };\n    } else {\n      accessor = function (d) {\n        var value = d[path[0]];\n        if (value === undefined || value === null) {\n          return misval;\n        }\n        return value;\n      };\n    }\n  } else {\n    // Recursively follow the crumbs to the desired property\n    accessor = function (d) {\n      var i = 0;\n      var value = d;\n\n      for (i = 0; i < path.length; i++) {\n        if (value && value[path[i]] !== undefined) {\n          value = value[path[i]];\n        } else {\n          return misval;\n        }\n      }\n\n      if (value === null || value in misvals) {\n        value = misval;\n      }\n      return value;\n    };\n  }\n\n  return accessor;\n}\n\n/**\n * Base value for given facet, ie. cast to correct type or object.\n * @param {Facet} facet\n * @returns {vaseValueCB} Base value function for this facet\n */\nfunction baseValueFn (facet) {\n  var rawValFn = rawValueFn(facet);\n\n  if (facet.isContinuous) {\n    /*\n     * Continuous facets:\n     * Parse numeric value from base value\n     */\n    return function (d) {\n      var val = parseFloat(rawValFn(d));\n      if (isNaN(val) || val === Infinity || val === -Infinity) {\n        return misval;\n      }\n      return val;\n    };\n  } else if (facet.isCategorial) {\n    return function (d) {\n      var vals = rawValFn(d);\n      if (vals !== misval) {\n        if (vals instanceof Array) {\n          vals.forEach(function (val, i) {\n            vals[i] = val.toString();\n          });\n        } else {\n          vals = vals.toString();\n        }\n        return vals;\n      }\n      return misval;\n    };\n  } else if (facet.isDatetime) {\n    /*\n     * Time parsing:\n     * 1. moment parses the string using the given format, but defaults to\n     *    the [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_8601)\n     * 2. Note that if the string contains timezone information, that is parsed too.\n     * 3. The time is transformed to requested timezone, defaulting the locale default\n     *    when no zone is set\n    */\n    var timeFormat = facet.datetimeTransform.format;\n    if (timeFormat === 'ISO8601') {\n      // use default ISO formatting\n      timeFormat = moment.ISO_8601;\n    }\n\n    var timeZone = facet.datetimeTransform.zone;\n    if (timeZone === 'ISO8601') {\n      // use default locale timezone, get overridden if a string contains a timezone\n      timeZone = moment.tz.guess();\n    } else {\n      timeZone = util.timeZones.get(timeZone, 'description').format;\n    }\n\n    return function (d) {\n      var value = rawValFn(d);\n      if (value !== misval) {\n        var m = moment.tz(value, timeFormat, timeZone);\n        if (m.isValid()) {\n          return m;\n        }\n      }\n      return misval;\n    };\n  } else if (facet.isDuration) {\n    /*\n     * Duration parsing:\n     * 1. If no format is given, the string parsed using\n     *    the [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_8601)\n     * 2. If a format is given, the string is parsed as float and interpreted in the given units\n     */\n    var units = facet.durationTransform.units;\n    if (units === 'ISO8601') {\n      return function (d) {\n        var value = rawValFn(d);\n\n        // parse string if necessary\n        if (value !== misval && typeof value === 'string' && value[0].toLowerCase() === 'p') {\n          value = moment.duration(value);\n        }\n\n        // check for valid duration\n        if (moment.isDuration(value)) {\n          return value;\n        }\n\n        return misval;\n      };\n    } else {\n      units = util.durationUnits.get(units, 'description').momentFormat;\n      return function (d) {\n        var value = rawValFn(d);\n\n        // parse string if necessary\n        if (value !== misval && !isNaN(value)) {\n          // NOTE: isNaN('0') is false, if that gives problems, we could use:\n          // value == +value) { // eslint-disable-line eqeqeq\n          value = moment.duration(parseFloat(value), units);\n        }\n\n        // check for valid duration\n        if (moment.isDuration(value)) {\n          return value;\n        }\n\n        return misval;\n      };\n    }\n  }\n\n  // isCategorial, isText\n  // no casting or constructing necessary, return the raw value\n  return rawValFn;\n}\n\n/**\n * Returns the transformed value from a base value\n *\n * @callback valueCB\n * @param {Object} d Base value\n * @returns {Object} Transformed value\n */\n\n/**\n * Create a function that returns the transformed value for this facet\n * @param {Facet} facet\n * @returns {valueCB} Value function for this facet\n */\nfunction valueFn (facet) {\n  // get base value function\n  var baseValFn = baseValueFn(facet);\n\n  if (facet.isConstant) {\n    return function () { return '1'; };\n  } else if (facet.isContinuous) {\n    // do we have a continuous transform?\n    if (facet.continuousTransform && facet.continuousTransform.type !== 'none') {\n      // yes, use it\n      return function (d) {\n        var val = facet.continuousTransform.transform(parseFloat(baseValFn(d)));\n        if (isNaN(val) || val === Infinity || val === -Infinity) {\n          return misval;\n        }\n        return val;\n      };\n    }\n  } else if (facet.isCategorial) {\n    // do we have a categorial transform?\n    if (facet.categorialTransform && facet.categorialTransform.rules.length > 0) {\n      // yes, use it\n      return function (d) {\n        var val = baseValFn(d);\n        return val === misval ? misval : facet.categorialTransform.transform(baseValFn(d));\n      };\n    }\n  } else if (facet.isDatetime) {\n    // always use the transform, so we do not have to repeat the yes/no transfrom logic here\n    return function (d) {\n      var val = baseValFn(d);\n      return val === misval ? misval : facet.datetimeTransform.transform(val);\n    };\n  } else if (facet.isDuration) {\n    // always use the transform, so we do not have to repeat the yes/no transfrom logic here\n    return function (d) {\n      var val = baseValFn(d);\n      return val === misval ? misval : facet.durationTransform.transform(val);\n    };\n  }\n\n  // no transfrom, return base value\n  return baseValFn;\n}\n\nfunction continuousGroupFn (partition) {\n  return function (d) {\n    if (d === misval) {\n      return d;\n    }\n\n    var ngroups = partition.groups.length;\n    if (d < partition.minval || d > partition.maxval) {\n      return misval;\n    }\n\n    // bins include their lower bound, but not their upper bound\n    var i = 0;\n    while (i < ngroups && d >= partition.groups.models[i].max) {\n      i++;\n    }\n    // special case last bin includes also upperbound d === partition.maxval\n    if (i === ngroups) {\n      return partition.groups.models[i - 1].value;\n    }\n    return partition.groups.models[i].value;\n  };\n}\n\n/*\n * Round the datetime to the specified resolution\n * see:\n * http://momentjs.com/docs/#/manipulating/start-of/\n * http://momentjs.com/docs/#/displaying/as-javascript-date/\n */\nfunction datetimeGroupFn (partition) {\n  var timeStep = util.getDatetimeResolution(partition.minval, partition.maxval);\n  return function (d) {\n    if (d === misval) {\n      return misval;\n    }\n    if (d.isBefore(partition.minval) || d.isAfter(partition.maxval)) {\n      return misval;\n    }\n    var grouped = moment(d).startOf(timeStep).format();\n    return grouped;\n  };\n}\n\n/*\n * Round the duration to the specified resolution\n */\nfunction durationGroupFn (partition) {\n  var timeStep = util.getDurationResolution(partition.minval, partition.maxval);\n  return function (d) {\n    if (d === misval) {\n      return misval;\n    }\n    if (d < partition.minval || d > partition.maxval) {\n      return misval;\n    }\n    var rounded = Math.floor(parseFloat(d.as(timeStep)));\n    return moment.duration(rounded, timeStep).toISOString();\n  };\n}\n\n/*\n * Don't do any grouping; that is done in the step from base value to value.\n * Matching of facet value and group could lead to a different ordering,\n * which is not allowed by crossfilter\n */\nfunction categorialGroupFn (partition) {\n  return function (d) { return d; };\n}\n\n/**\n * Returns the grouped value for a transformed value\n *\n * @callback groupCB\n * @param {Object} d Transformed value\n * @returns {Object} Group\n */\n\n/**\n * Create a function that returns the group value for a partition\n * @param {Partition} partition\n * @returns {cb} Group function for this partition, taking a `Data`\n */\nfunction groupFn (partition) {\n  if (partition.isConstant) {\n    return function () { return '1'; };\n  } else if (partition.isContinuous) {\n    return continuousGroupFn(partition);\n  } else if (partition.isCategorial) {\n    return categorialGroupFn(partition);\n  } else if (partition.isDatetime) {\n    return datetimeGroupFn(partition);\n  } else if (partition.isDuration) {\n    return durationGroupFn(partition);\n  } else if (partition.isText) {\n    return function (d) { return d.toString(); };\n  } else {\n    console.error('Group function not implemented for partition', partition);\n  }\n}\n\nmodule.exports = {\n  rawValueFn: rawValueFn,\n  baseValueFn: baseValueFn,\n  valueFn: valueFn,\n  groupFn: groupFn,\n\n  reduceFn: reduceFn\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///adfa\n")},b123:function(module,exports,__webpack_require__){eval("/**\n * DurationTransfrom defines a transformation on duration data\n *\n * @class DurationTransform\n */\nvar AmpersandModel = __webpack_require__(/*! ampersand-model */ \"3bfc\");\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\nvar util = __webpack_require__(/*! ../util/time */ \"d45b\");\n\nmodule.exports = AmpersandModel.extend({\n  props: {\n    /**\n     * Units of the duration\n     *\n     * @memberof! DurationTransform\n     * @type {string}\n     */\n    units: ['string', true, 'ISO8601'],\n\n    /**\n     * For durations, transforms duration to these units\n     *\n     * @memberof! DurationTransform\n     * @type {string}\n     */\n    transformedUnits: ['string', true, 'ISO8601'],\n\n    /**\n     * Transform the date to this timezone.\n     *\n     * @memberof! DatetimeTransform\n     * @type {string}\n     */\n    transformedZone: ['string', true, 'ISO8601'],\n\n    /**\n     * Controls conversion to datetime by adding this date\n     *\n     * @memberof! DurationTransform\n     * @type {string}\n     */\n    transformedReference: 'string'\n  },\n  derived: {\n    /**\n     * Reference momentjs for duration <-> datetime conversion\n     *\n     * @type {moment}\n     * @memberof! DurationTransform\n     */\n    referenceMoment: {\n      deps: ['transformedReference', 'transformedZone'],\n      fn: function () {\n        var tz;\n        if (this.transformedZone === 'ISO8601') {\n          tz = moment.tz.guess();\n        } else {\n          var timeZone = util.timeZones.get(this.transformedZone, 'description');\n          if (timeZone && timeZone.format) {\n            tz = timeZone.format;\n          } else {\n            tz = moment.tz.guess();\n          }\n        }\n\n        if (this.transformedReference) {\n          return moment.tz(this.transformedReference, tz);\n        }\n        return null;\n      }\n    },\n    /**\n     * The type of the facet after the transformation has been applied\n     *\n     * @type {string}\n     * @memberof! DurationTransform\n     */\n    transformedType: {\n      deps: ['transformedFormat', 'transformedReference', 'transformedZone'],\n      fn: function () {\n        if (this.referenceMoment) {\n          return 'datetime';\n        } else if (this.transformedUnits !== 'ISO8601') {\n          return 'continuous';\n        } else {\n          return 'duration';\n        }\n      },\n      cache: false\n    },\n    /**\n     * The minium value this facet can take, after the transformation has been applied\n     *\n     * @type {number}\n     * @memberof! DurationTransform\n     */\n    transformedMin: {\n      deps: ['transformedType'],\n      fn: function () {\n        var facet = this.parent;\n        if (this.transformedType === 'datetime') {\n          return this.transform(facet.minval);\n        } else if (this.transformedType === 'continuous') {\n          return this.transform(facet.minval);\n        } else {\n          return facet.minval;\n        }\n      },\n      cache: false\n    },\n    /**\n     * The maximum value this facet can take, after the transformation has been applied\n     *\n     * @type {number}\n     * @memberof! DurationTransform\n     */\n    transformedMax: {\n      deps: ['transformedType'],\n      fn: function () {\n        var facet = this.parent;\n        if (this.transformedType === 'datetime') {\n          return this.transform(facet.maxval);\n        } else if (this.transformedType === 'continuous') {\n          return this.transform(facet.maxval);\n        } else {\n          return facet.maxval;\n        }\n      },\n      cache: false\n    },\n    /**\n     * The minimum value this facet can take, after the transformation has been applied\n     *\n     * @type {number}\n     * @memberof! DurationTransform\n     */\n    transformedMinAsText: {\n      deps: ['transformedMin', 'transformedType'],\n      fn: function () {\n        var minval = this.transformedMin;\n        if (this.transformedType === 'datetime') {\n          return minval.format();\n        } else {\n          return minval.toString();\n        }\n      },\n      cache: false\n    },\n    /**\n     * The maximum value this facet can take, after the transformation has been applied\n     *\n     * @type {number}\n     * @memberof! DurationTransform\n     */\n    transformedMaxAsText: {\n      deps: ['transformedMax', 'transformedType'],\n      fn: function () {\n        var maxval = this.transformedMax;\n        if (this.transformedType === 'datetime') {\n          return maxval.format();\n        } else {\n          return maxval.toString();\n        }\n      },\n      cache: false\n    }\n  },\n\n  /**\n   * Apply the configured transformation to this Facet's value\n   *\n   * @function\n   * @memberof! DurationTransform\n   * @param {Object} inval momentjs duration\n   * @returns {Object} outval momentjs duration or datetime\n   */\n  transform: function transform (inval) {\n    var units;\n    if (this.referenceMoment) {\n      // duration -> datetime\n      return this.referenceMoment.clone().add(inval);\n    } else if (this.transformedUnits !== 'ISO8601') {\n      // duration -> continuous\n      units = util.durationUnits.get(this.transformedUnits, 'description').momentFormat;\n      return inval.as(units);\n    } else {\n      // no change\n      return inval;\n    }\n  },\n  reset: function () {\n    this.unset(['zone', 'transformedFormat', 'transformedZone', 'transformedReference']);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///b123\n")},b28e:function(module,exports,__webpack_require__){eval('var crossfilter_identity = __webpack_require__(/*! ./identity */ "55a3");\nvar xFilterInsertionsort = __webpack_require__(/*! ./insertionsort */ "753f");\n\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see NOTICE and AUTHORS for details.\n\nfunction quicksort_by(f) {\n  var insertionsort = xFilterInsertionsort.by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          /* eslint no-constant-condition: 0 */\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      (function () { // isolate scope\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don\'t include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n\n      (function () { // isolate scope\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            /* eslint no-constant-condition: 0 */\n            while (true) {\n              greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n      })(); // isolate scope\n\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\n\nmodule.exports = quicksort_by(crossfilter_identity);\nmodule.exports.by = quicksort_by;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///b28e\n')},b452:function(module,exports,__webpack_require__){eval("\n/**\n * Module dependencies.\n */\n\nvar url = __webpack_require__(/*! ./url */ \"780f\");\nvar parser = __webpack_require__(/*! socket.io-parser */ \"6fba\");\nvar Manager = __webpack_require__(/*! ./manager */ \"1e1f\");\nvar debug = __webpack_require__(/*! debug */ \"433b\")('socket.io-client');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = lookup;\n\n/**\n * Managers cache.\n */\n\nvar cache = exports.managers = {};\n\n/**\n * Looks up an existing `Manager` for multiplexing.\n * If the user summons:\n *\n *   `io('http://localhost/a');`\n *   `io('http://localhost/b');`\n *\n * We reuse the existing instance based on same scheme/port/host,\n * and we initialize sockets for each namespace.\n *\n * @api public\n */\n\nfunction lookup (uri, opts) {\n  if (typeof uri === 'object') {\n    opts = uri;\n    uri = undefined;\n  }\n\n  opts = opts || {};\n\n  var parsed = url(uri);\n  var source = parsed.source;\n  var id = parsed.id;\n  var path = parsed.path;\n  var sameNamespace = cache[id] && path in cache[id].nsps;\n  var newConnection = opts.forceNew || opts['force new connection'] ||\n                      false === opts.multiplex || sameNamespace;\n\n  var io;\n\n  if (newConnection) {\n    debug('ignoring socket cache for %s', source);\n    io = Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      debug('new io instance for %s', source);\n      cache[id] = Manager(source, opts);\n    }\n    io = cache[id];\n  }\n  if (parsed.query && !opts.query) {\n    opts.query = parsed.query;\n  } else if (opts && 'object' === typeof opts.query) {\n    opts.query = encodeQueryString(opts.query);\n  }\n  return io.socket(parsed.path, opts);\n}\n/**\n *  Helper method to parse query objects to string.\n * @param {object} query\n * @returns {string}\n */\nfunction encodeQueryString (obj) {\n  var str = [];\n  for (var p in obj) {\n    if (obj.hasOwnProperty(p)) {\n      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n    }\n  }\n  return str.join('&');\n}\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = parser.protocol;\n\n/**\n * `connect`.\n *\n * @param {String} uri\n * @api public\n */\n\nexports.connect = lookup;\n\n/**\n * Expose constructors for standalone build.\n *\n * @api public\n */\n\nexports.Manager = __webpack_require__(/*! ./manager */ \"1e1f\");\nexports.Socket = __webpack_require__(/*! ./socket */ \"4c13\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjQ1Mi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvaW5kZXguanM/ZjQyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfSBlbHNlIGlmIChvcHRzICYmICdvYmplY3QnID09PSB0eXBlb2Ygb3B0cy5xdWVyeSkge1xuICAgIG9wdHMucXVlcnkgPSBlbmNvZGVRdWVyeVN0cmluZyhvcHRzLnF1ZXJ5KTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cbi8qKlxuICogIEhlbHBlciBtZXRob2QgdG8gcGFyc2UgcXVlcnkgb2JqZWN0cyB0byBzdHJpbmcuXG4gKiBAcGFyYW0ge29iamVjdH0gcXVlcnlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVF1ZXJ5U3RyaW5nIChvYmopIHtcbiAgdmFyIHN0ciA9IFtdO1xuICBmb3IgKHZhciBwIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgIHN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbcF0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0ci5qb2luKCcmJyk7XG59XG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///b452\n")},b730:function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction crossfilter_zero() {\n  return 0;\n}\n\nmodule.exports = crossfilter_zero;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjczMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy96ZXJvLmpzPzRmYTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjcm9zc2ZpbHRlcl96ZXJvKCkge1xuICByZXR1cm4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcm9zc2ZpbHRlcl96ZXJvO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///b730\n")},ba23:function(module,exports,__webpack_require__){eval("/**\n * Categorial Rule abstracts a single matching rule\n *\n * @class CategorialRule\n */\nvar Base = __webpack_require__(/*! ../util/base */ \"3902\");\n\n// Data structure for mapping categorial (and textual) data on groups\nmodule.exports = Base.extend({\n  props: {\n    /**\n     * string or string format of regexp to match data against.\n     * To use a regular expression, start and end the string with a slash, '/'.\n     * Options can be appedended, notably 'i' for case insensitive matching.\n     * The first captured group can be used in the group, see below.\n     * Examples\n     * 1. 'hello' matches 'hello', not 'hello world'\n     * 2. '/hello/' matches 'hello world', but not 'Hello world'\n     * 3. '/hello/i' matches 'I say Hello'\n     * @type {string}\n     * @memberof! CategorialRule\n     */\n    expression: ['string', true, 'Missing'],\n\n    /**\n     * Number of items this transform is used\n     * @type {number}\n     * @memberof! CategorialRule\n     */\n    count: ['number', true, 0],\n\n    /**\n     * Name of the group this is mapped to. The special substring $1 is replaced by the first captured group,\n     * in example 4 above, with group set to 'He says $1', the match results in 'He says goodbye'\n     * @type {string}\n     * @memberof! CategorialRule\n     */\n    group: ['string', true, 'Missing']\n  },\n  derived: {\n\n    /**\n     * Match function\n     * @memberof! CategorialRule\n     * @function\n     * @param {string} text The text to match\n     * @returns {string|false} group The group label if matching, else false\n     */\n    match: {\n      deps: ['expression', 'group'],\n      fn: function () {\n        var that = this;\n\n        var reFormat = new RegExp(/^\\/(.*)\\/([gimuy]*)$/);\n        var match = reFormat.exec(that.expression);\n\n        if (match) {\n          // if the expression is in the form of /<text>/<flags>, it is a regular expression, compile it\n          var exp = RegExp(match[1], match[2]);\n          return function (text) {\n            var m = exp.exec(text);\n            if (m) {\n              return that.group;\n              // return that.group.replace('$1', m[1]);\n            } else {\n              return false;\n            }\n          };\n        } else {\n          // otherwise do matching using '==='\n          return function (text) {\n            if (text === that.expression) {\n              return that.group;\n            } else {\n              return false;\n            }\n          };\n        }\n      }\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmEyMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZmFjZXQvY2F0ZWdvcmlhbC1ydWxlLmpzP2UxNzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDYXRlZ29yaWFsIFJ1bGUgYWJzdHJhY3RzIGEgc2luZ2xlIG1hdGNoaW5nIHJ1bGVcbiAqXG4gKiBAY2xhc3MgQ2F0ZWdvcmlhbFJ1bGVcbiAqL1xudmFyIEJhc2UgPSByZXF1aXJlKCcuLi91dGlsL2Jhc2UnKTtcblxuLy8gRGF0YSBzdHJ1Y3R1cmUgZm9yIG1hcHBpbmcgY2F0ZWdvcmlhbCAoYW5kIHRleHR1YWwpIGRhdGEgb24gZ3JvdXBzXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2UuZXh0ZW5kKHtcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiBzdHJpbmcgb3Igc3RyaW5nIGZvcm1hdCBvZiByZWdleHAgdG8gbWF0Y2ggZGF0YSBhZ2FpbnN0LlxuICAgICAqIFRvIHVzZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgc3RhcnQgYW5kIGVuZCB0aGUgc3RyaW5nIHdpdGggYSBzbGFzaCwgJy8nLlxuICAgICAqIE9wdGlvbnMgY2FuIGJlIGFwcGVkZW5kZWQsIG5vdGFibHkgJ2knIGZvciBjYXNlIGluc2Vuc2l0aXZlIG1hdGNoaW5nLlxuICAgICAqIFRoZSBmaXJzdCBjYXB0dXJlZCBncm91cCBjYW4gYmUgdXNlZCBpbiB0aGUgZ3JvdXAsIHNlZSBiZWxvdy5cbiAgICAgKiBFeGFtcGxlc1xuICAgICAqIDEuICdoZWxsbycgbWF0Y2hlcyAnaGVsbG8nLCBub3QgJ2hlbGxvIHdvcmxkJ1xuICAgICAqIDIuICcvaGVsbG8vJyBtYXRjaGVzICdoZWxsbyB3b3JsZCcsIGJ1dCBub3QgJ0hlbGxvIHdvcmxkJ1xuICAgICAqIDMuICcvaGVsbG8vaScgbWF0Y2hlcyAnSSBzYXkgSGVsbG8nXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YhIENhdGVnb3JpYWxSdWxlXG4gICAgICovXG4gICAgZXhwcmVzc2lvbjogWydzdHJpbmcnLCB0cnVlLCAnTWlzc2luZyddLFxuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIGl0ZW1zIHRoaXMgdHJhbnNmb3JtIGlzIHVzZWRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiEgQ2F0ZWdvcmlhbFJ1bGVcbiAgICAgKi9cbiAgICBjb3VudDogWydudW1iZXInLCB0cnVlLCAwXSxcblxuICAgIC8qKlxuICAgICAqIE5hbWUgb2YgdGhlIGdyb3VwIHRoaXMgaXMgbWFwcGVkIHRvLiBUaGUgc3BlY2lhbCBzdWJzdHJpbmcgJDEgaXMgcmVwbGFjZWQgYnkgdGhlIGZpcnN0IGNhcHR1cmVkIGdyb3VwLFxuICAgICAqIGluIGV4YW1wbGUgNCBhYm92ZSwgd2l0aCBncm91cCBzZXQgdG8gJ0hlIHNheXMgJDEnLCB0aGUgbWF0Y2ggcmVzdWx0cyBpbiAnSGUgc2F5cyBnb29kYnllJ1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mISBDYXRlZ29yaWFsUnVsZVxuICAgICAqL1xuICAgIGdyb3VwOiBbJ3N0cmluZycsIHRydWUsICdNaXNzaW5nJ11cbiAgfSxcbiAgZGVyaXZlZDoge1xuXG4gICAgLyoqXG4gICAgICogTWF0Y2ggZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YhIENhdGVnb3JpYWxSdWxlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gbWF0Y2hcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfGZhbHNlfSBncm91cCBUaGUgZ3JvdXAgbGFiZWwgaWYgbWF0Y2hpbmcsIGVsc2UgZmFsc2VcbiAgICAgKi9cbiAgICBtYXRjaDoge1xuICAgICAgZGVwczogWydleHByZXNzaW9uJywgJ2dyb3VwJ10sXG4gICAgICBmbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cCgvXlxcLyguKilcXC8oW2dpbXV5XSopJC8pO1xuICAgICAgICB2YXIgbWF0Y2ggPSByZUZvcm1hdC5leGVjKHRoYXQuZXhwcmVzc2lvbik7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgLy8gaWYgdGhlIGV4cHJlc3Npb24gaXMgaW4gdGhlIGZvcm0gb2YgLzx0ZXh0Pi88ZmxhZ3M+LCBpdCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgY29tcGlsZSBpdFxuICAgICAgICAgIHZhciBleHAgPSBSZWdFeHAobWF0Y2hbMV0sIG1hdGNoWzJdKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgIHZhciBtID0gZXhwLmV4ZWModGV4dCk7XG4gICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhhdC5ncm91cDtcbiAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoYXQuZ3JvdXAucmVwbGFjZSgnJDEnLCBtWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG90aGVyd2lzZSBkbyBtYXRjaGluZyB1c2luZyAnPT09J1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgICAgaWYgKHRleHQgPT09IHRoYXQuZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICByZXR1cm4gdGhhdC5ncm91cDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///ba23\n")},bb16:function(module,exports,__webpack_require__){eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"1ed2\");\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmIxNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvZGVidWcuanM/NTJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyY2FzZWQgbGV0dGVyLCBpLmUuIFwiblwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFByZXZpb3VzbHkgYXNzaWduZWQgY29sb3IuXG4gKi9cblxudmFyIHByZXZDb2xvciA9IDA7XG5cbi8qKlxuICogUHJldmlvdXMgbG9nIHRpbWVzdGFtcC5cbiAqL1xuXG52YXIgcHJldlRpbWU7XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IoKSB7XG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1twcmV2Q29sb3IrKyAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlYnVnKG5hbWVzcGFjZSkge1xuXG4gIC8vIGRlZmluZSB0aGUgYGRpc2FibGVkYCB2ZXJzaW9uXG4gIGZ1bmN0aW9uIGRpc2FibGVkKCkge1xuICB9XG4gIGRpc2FibGVkLmVuYWJsZWQgPSBmYWxzZTtcblxuICAvLyBkZWZpbmUgdGhlIGBlbmFibGVkYCB2ZXJzaW9uXG4gIGZ1bmN0aW9uIGVuYWJsZWQoKSB7XG5cbiAgICB2YXIgc2VsZiA9IGVuYWJsZWQ7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIGFkZCB0aGUgYGNvbG9yYCBpZiBub3Qgc2V0XG4gICAgaWYgKG51bGwgPT0gc2VsZi51c2VDb2xvcnMpIHNlbGYudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgICBpZiAobnVsbCA9PSBzZWxmLmNvbG9yICYmIHNlbGYudXNlQ29sb3JzKSBzZWxmLmNvbG9yID0gc2VsZWN0Q29sb3IoKTtcblxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVvXG4gICAgICBhcmdzID0gWyclbyddLmNvbmNhdChhcmdzKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16JV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmZvcm1hdEFyZ3MpIHtcbiAgICAgIGFyZ3MgPSBleHBvcnRzLmZvcm1hdEFyZ3MuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIHZhciBsb2dGbiA9IGVuYWJsZWQubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cbiAgZW5hYmxlZC5lbmFibGVkID0gdHJ1ZTtcblxuICB2YXIgZm4gPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKSA/IGVuYWJsZWQgOiBkaXNhYmxlZDtcblxuICBmbi5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cbiAgcmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIHZhciBzcGxpdCA9IChuYW1lc3BhY2VzIHx8ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///bb16\n")},bff6:function(module,exports){eval("/**\n * This module defines a single unique missing value indicator.\n * All invalid, absent, or user-indicated missing value is internally set to this value.\n *\n * @example\n * var misval = require('./framework/misval');\n * if ( a === misval ) {\n *   ...\n * }\n * @module client/misval\n */\n\n// module.exports = -Number.MAX_VALUE;\nmodule.exports = 'missing';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmZmNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvdXRpbC9taXN2YWwuanM/YjI3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBzaW5nbGUgdW5pcXVlIG1pc3NpbmcgdmFsdWUgaW5kaWNhdG9yLlxuICogQWxsIGludmFsaWQsIGFic2VudCwgb3IgdXNlci1pbmRpY2F0ZWQgbWlzc2luZyB2YWx1ZSBpcyBpbnRlcm5hbGx5IHNldCB0byB0aGlzIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgbWlzdmFsID0gcmVxdWlyZSgnLi9mcmFtZXdvcmsvbWlzdmFsJyk7XG4gKiBpZiAoIGEgPT09IG1pc3ZhbCApIHtcbiAqICAgLi4uXG4gKiB9XG4gKiBAbW9kdWxlIGNsaWVudC9taXN2YWxcbiAqL1xuXG4vLyBtb2R1bGUuZXhwb3J0cyA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xubW9kdWxlLmV4cG9ydHMgPSAnbWlzc2luZyc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///bff6\n")},c59b:function(module,exports,__webpack_require__){eval('\nmodule.exports = __webpack_require__(/*! ./lib/index */ "58ab");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzU5Yi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9pbmRleC5qcz80NmEyIl0sInNvdXJjZXNDb250ZW50IjpbIlxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9pbmRleCcpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///c59b\n')},d45b:function(module,exports,__webpack_require__){eval("var AmpersandModel = __webpack_require__(/*! ampersand-model */ \"3bfc\");\nvar AmpersandColllection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\nvar moment = __webpack_require__(/*! moment-timezone */ \"6c9d\");\n\n/*\n * Time is grouped by truncating; the resolution is determined in util-time.getResolution()\n * See [this table](http://momentjs.com/docs/#/durations/creating/) for accpetable values\n * when using a crossfilter dataset.\n */\nfunction unitsForMilliseconds (milliseconds) {\n  var count = milliseconds;\n  if (count < 10000) { // 10 seconds\n    return 'milliseconds';\n  }\n  count = count / 1000;\n\n  if (count < 15 * 60) { // 15 minutes\n    return 'seconds';\n  }\n  count = count / 60;\n\n  if (count < 3 * 60) { // 3 hours\n    return 'minutes';\n  }\n  count = count / 60;\n\n  if (count < 3 * 24) { // 3 days\n    return 'hours';\n  }\n  count = count / 24;\n\n  if (count < 3 * 7) { // 3 weeks\n    return 'days';\n  }\n  if (count < 7 * 52) { // 52 weeks\n    return 'weeks';\n  }\n  if (count < 2 * 365) { // 2 years\n    return 'months';\n  }\n  return 'years';\n}\n\nfunction getFormat (units) {\n  var fmt;\n  if (units === 'seconds') {\n    fmt = 'mm:ss';\n  } else if (units === 'minutes') {\n    fmt = 'HH:mm';\n  } else if (units === 'hours') {\n    fmt = 'HH:00';\n  } else if (units === 'days') {\n    fmt = 'dddd do';\n  } else if (units === 'weeks') {\n    fmt = 'wo';\n  } else if (units === 'months') {\n    fmt = 'YY MMM';\n  } else if (units === 'years') {\n    fmt = 'YYYY';\n  }\n  return fmt;\n}\n\nfunction getDatetimeResolution (start, end) {\n  var difference = end.diff(start);\n  return unitsForMilliseconds(difference);\n}\n\nfunction getDurationResolution (min, max) {\n  var length = moment.duration(max.as('milliseconds') - min.as('milliseconds'), 'milliseconds');\n  return unitsForMilliseconds(length);\n}\n\nvar TimePart = AmpersandModel.extend({\n  props: {\n    /**\n     * The format string for momentjs\n     * @memberof! TimePart\n     * @type {string}\n     */\n    momentFormat: ['string', true],\n    /**\n     * The format string for postgresql\n     * @memberof! TimePart\n     * @type {string}\n     */\n    postgresFormat: ['string', true],\n    /**\n     * The human readable descprition of the datetime part\n     * @memberof! TimePart\n     * @type {string}\n     */\n    description: ['string', true],\n    /**\n     * Data type after conversion: 'continuous', or 'categorial'\n     * @memberof! TimePart\n     * @type {string}\n     */\n    type: ['string', true],\n    /**\n     * For continuous datetime parts (ie, day-of-year), the minimum value\n     * @memberof! TimePart\n     * @type {number}\n     */\n    min: ['number', true, 0],\n    /**\n     * For continuous datetime parts (ie, day-of-year), the maximum value\n     * @memberof! TimePart\n     * @type {number}\n     */\n    max: ['number', true, 1],\n    /**\n     * When true, calculate the minimum and maximum value from the\n     * original datetime limits. Used for continuous datetime parts (ie, year)\n     * @memberof! TimePart\n     * @type {boolean}\n     */\n    calculate: ['boolean', true, false],\n    /**\n     * For categorial datetime parts (Mon, Tue, ..), the array of possible values\n     * @memberof! TimePart\n     * @type {String[]}\n     */\n    groups: ['array']\n  }\n});\n\nvar TimeParts = AmpersandColllection.extend({\n  model: TimePart,\n  indexes: ['description']\n});\n\nvar timeParts = new TimeParts([\n  { description: 'ISO8601', type: 'datetime', calculate: true },\n  { postgresFormat: 'month', momentFormat: 'M', description: 'Month (1-12)', type: 'continuous', min: 1, max: 12 },\n  { postgresFormat: 'quarter', momentFormat: 'Q', description: 'Quarter (1-4)', type: 'continuous', min: 1, max: 4 },\n  { postgresFormat: 'day', momentFormat: 'D', description: 'Day of Month  (1-31)', type: 'continuous', min: 1, max: 31 },\n  { postgresFormat: 'doy', momentFormat: 'DDD', description: 'Day of Year (1-365)', type: 'continuous', min: 1, max: 365 },\n  { postgresFormat: 'dow', momentFormat: 'd', description: 'Day of Week (0-6)', type: 'continuous', min: 0, max: 6 },\n  { postgresFormat: 'isodow', momentFormat: 'E', description: 'Day of Week ISO (1-7)', type: 'continuous', min: 1, max: 7 },\n  { postgresFormat: 'week', momentFormat: 'W', description: 'Week of Year ISO  (1-53)', type: 'continuous', min: 1, max: 53 },\n  { postgresFormat: 'year', momentFormat: 'Y', description: 'Year', type: 'continuous', calculate: true },\n  { postgresFormat: 'hours', momentFormat: 'H', description: 'Hour (0-23)', type: 'continuous', min: 0, max: 23 },\n  { postgresFormat: 'minute', momentFormat: 'm', description: 'Minute (0-59)', type: 'continuous', min: 0, max: 59 },\n  { postgresFormat: 'second', momentFormat: 's', description: 'Second (0-59)', type: 'continuous', min: 0, max: 59 },\n  { postgresFormat: 'milliseconds', momentFormat: 'SSS', description: 'Milliseconds (0-999)', type: 'continuous', min: 0, max: 999 },\n  { postgresFormat: 'microseconds', momentFormat: 'SSSSSS', description: 'microseconds (0-999999)', type: 'continuous', min: 0, max: 999999 },\n  { postgresFormat: 'epoch', momentFormat: 'X', description: 'Unix Timestamp', type: 'continuous', calculate: true },\n  { postgresFormat: 'Mon', momentFormat: 'MMM', description: 'Month (Jan - Dec)', type: 'categorial', groups: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] },\n  { postgresFormat: 'Month', momentFormat: 'MMMM', description: 'Month (January - December)', type: 'categorial', groups: ['January', 'Feburary', 'March', 'April', 'May', 'June', 'July', 'August', 'Septebmer', 'October', 'November', 'December'] },\n  { postgresFormat: 'Dy', momentFormat: 'ddd', description: 'Day of Week (Sun-Sat)', type: 'categorial', groups: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] },\n  { postgresFormat: 'Day', momentFormat: 'dddd', description: 'Day of Week (Sunday-Saturday)', type: 'categorial', groups: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] },\n  { postgresFormat: 'AM', momentFormat: 'A', description: 'AM/PM', type: 'categorial', groups: ['AM', 'PM'] }\n]);\n\nvar DurationUnit = AmpersandModel.extend({\n  props: {\n    /**\n     * The descriptive name of the time unit\n     * @memberof! DurationUnit\n     * @type {string}\n     */\n    description: ['string'],\n    /**\n     * Momentjs parsing format\n     * @memberof! DurationUnit\n     * @type {string}\n     */\n    momentFormat: ['string'],\n    /**\n     * Postgres parsing format\n     * @memberof! DurationUnit\n     * @type {string}\n     */\n    postgresFormat: ['string'],\n    /**\n     * Conversion factor to seconds\n     * @memberof! DurationUnit\n     * @type {string}\n     */\n    seconds: ['number']\n  }\n});\n\nvar DurationUnits = AmpersandColllection.extend({\n  indexes: ['description'],\n  model: DurationUnit\n});\n\nvar durationUnits = new DurationUnits([\n  {\n    description: 'ISO8601',\n    seconds: 1\n  }, {\n    description: 'millenium',\n    momentFormat: 'millenium',\n    postgresFormat: 'millenium',\n    seconds: 100 * 365.25 * 24 * 60 * 60\n  }, {\n    description: 'century',\n    momentFormat: 'century',\n    postgresFormat: 'century',\n    seconds: 100 * 365.25 * 24 * 60 * 60\n  }, {\n    description: 'decades',\n    momentFormat: 'decades',\n    postgresFormat: 'decade',\n    seconds: 10 * 365.25 * 24 * 60 * 60\n  }, {\n    description: 'years',\n    momentFormat: 'years',\n    postgresFormat: 'year',\n    seconds: 365.25 * 24 * 60 * 60\n  }, {\n    description: 'quarters',\n    momentFormat: '',\n    postgresFormat: 'quarter',\n    seconds: 365.25 * 8 * 60 * 60\n  }, {\n    description: 'months',\n    momentFormat: 'months',\n    postgresFormat: 'month',\n    seconds: 30 * 24 * 60 * 60\n  }, {\n    description: 'weeks',\n    momentFormat: 'weeks',\n    postgresFormat: 'week',\n    seconds: 7 * 24 * 60 * 60\n  }, {\n    description: 'days',\n    momentFormat: 'days',\n    postgresFormat: 'day',\n    seconds: 24 * 60 * 60\n  }, {\n    description: 'hours',\n    momentFormat: 'hours',\n    postgresFormat: 'hour',\n    seconds: 60 * 60\n  }, {\n    description: 'minutes',\n    momentFormat: 'minutes',\n    postgresFormat: 'minute',\n    seconds: 60\n  }, {\n    description: 'seconds',\n    momentFormat: 'seconds',\n    postgresFormat: 'second',\n    seconds: 1\n  }, {\n    description: 'milliseconds',\n    momentFormat: 'milliseconds',\n    postgresFormat: 'milliseconds',\n    seconds: 0.001\n  }, {\n    description: 'microseconds',\n    momentFormat: 'microseconds',\n    postgresFormat: 'microseconds',\n    seconds: 0.000001\n  }\n]);\n\nvar TimeZone = AmpersandModel.extend({\n  props: {\n    /**\n     * The descriptive name of the time zone\n     * @memberof! TimeZone\n     * @type {string}\n     */\n    description: ['string'],\n    /**\n     * The time zone format\n     * @memberof! TimeZone\n     * @type {string}\n     */\n    format: ['string']\n  }\n});\n\nvar TimeZones = AmpersandColllection.extend({\n  indexes: ['description'],\n  model: TimeZone\n});\n\nvar timeZones = new TimeZones();\ntimeZones.add({\n  description: 'ISO8601',\n  format: 'ISO8601'\n});\n\nmoment.tz.names().forEach(function (tz) {\n  timeZones.add({\n    description: tz,\n    format: tz\n  });\n});\n\nmodule.exports = {\n  timeParts: timeParts,\n  timeZones: timeZones,\n  durationUnits: durationUnits,\n  getDatetimeResolution: getDatetimeResolution,\n  getDurationResolution: getDurationResolution,\n  getFormat: getFormat\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///d45b\n")},de3f:function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction crossfilter_null() {\n  return null;\n}\n\nmodule.exports = crossfilter_null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGUzZi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9udWxsLmpzPzcwYzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjcm9zc2ZpbHRlcl9udWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcm9zc2ZpbHRlcl9udWxsO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///de3f\n")},e59a:function(module,exports,__webpack_require__){eval("var Collection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\nvar Partition = __webpack_require__(/*! ../partition */ \"8191\");\n\nmodule.exports = Collection.extend({\n  model: Partition,\n  indexes: ['rank'],\n  comparator: 'rank',\n  initialize: function () {\n    this.on('add', function (newPartition) {\n      newPartition.reset();\n    });\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTU5YS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvcGFydGl0aW9uL2NvbGxlY3Rpb24uanM/YzRiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ2FtcGVyc2FuZC1jb2xsZWN0aW9uJyk7XG52YXIgUGFydGl0aW9uID0gcmVxdWlyZSgnLi4vcGFydGl0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbi5leHRlbmQoe1xuICBtb2RlbDogUGFydGl0aW9uLFxuICBpbmRleGVzOiBbJ3JhbmsnXSxcbiAgY29tcGFyYXRvcjogJ3JhbmsnLFxuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vbignYWRkJywgZnVuY3Rpb24gKG5ld1BhcnRpdGlvbikge1xuICAgICAgbmV3UGFydGl0aW9uLnJlc2V0KCk7XG4gICAgfSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///e59a\n")},e810:function(module,exports,__webpack_require__){eval("/**\n * ContinuousTransfrom defines a transformation on continuous (nummerical) data.\n * Currently linear interpolation between a set of control points is implemented.\n *\n * @class ContinuousTransform\n */\nvar AmpersandModel = __webpack_require__(/*! ampersand-model */ \"3bfc\");\n\nmodule.exports = AmpersandModel.extend({\n  props: {\n    transformedType: {\n      type: 'string',\n      required: true,\n      default: 'text',\n      values: ['text']\n    },\n    transformedMin: {\n      type: 'number',\n      required: true,\n      default: 0\n    },\n    transformedMax: {\n      type: 'number',\n      required: true,\n      default: 100\n    }\n  },\n  reset: function () {\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTgxMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvZmFjZXQvdGV4dC10cmFuc2Zvcm0uanM/MzQ1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnRpbnVvdXNUcmFuc2Zyb20gZGVmaW5lcyBhIHRyYW5zZm9ybWF0aW9uIG9uIGNvbnRpbnVvdXMgKG51bW1lcmljYWwpIGRhdGEuXG4gKiBDdXJyZW50bHkgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiBhIHNldCBvZiBjb250cm9sIHBvaW50cyBpcyBpbXBsZW1lbnRlZC5cbiAqXG4gKiBAY2xhc3MgQ29udGludW91c1RyYW5zZm9ybVxuICovXG52YXIgQW1wZXJzYW5kTW9kZWwgPSByZXF1aXJlKCdhbXBlcnNhbmQtbW9kZWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbXBlcnNhbmRNb2RlbC5leHRlbmQoe1xuICBwcm9wczoge1xuICAgIHRyYW5zZm9ybWVkVHlwZToge1xuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICd0ZXh0JyxcbiAgICAgIHZhbHVlczogWyd0ZXh0J11cbiAgICB9LFxuICAgIHRyYW5zZm9ybWVkTWluOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG4gICAgdHJhbnNmb3JtZWRNYXg6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBkZWZhdWx0OiAxMDBcbiAgICB9XG4gIH0sXG4gIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///e810\n")},e95e:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar crossfilter_identity = __webpack_require__(/*! ./identity */ "55a3");\nvar xFilterHeap = __webpack_require__(/*! ./heap */ "a74f");\n\nfunction heapselect_by(f) {\n  var heap = xFilterHeap.by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\n\nmodule.exports = heapselect_by(crossfilter_identity);\nmodule.exports.by = heapselect_by; // assign the raw function to the export as well\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTk1ZS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIyL3NyYy9oZWFwc2VsZWN0LmpzPzk2NGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3Jvc3NmaWx0ZXJfaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG52YXIgeEZpbHRlckhlYXAgPSByZXF1aXJlKCcuL2hlYXAnKTtcblxuZnVuY3Rpb24gaGVhcHNlbGVjdF9ieShmKSB7XG4gIHZhciBoZWFwID0geEZpbHRlckhlYXAuYnkoZik7XG5cbiAgLy8gUmV0dXJucyBhIG5ldyBhcnJheSBjb250YWluaW5nIHRoZSB0b3AgayBlbGVtZW50cyBpbiB0aGUgYXJyYXkgYVtsbzpoaV0uXG4gIC8vIFRoZSByZXR1cm5lZCBhcnJheSBpcyBub3Qgc29ydGVkLCBidXQgbWFpbnRhaW5zIHRoZSBoZWFwIHByb3BlcnR5LiBJZiBrIGlzXG4gIC8vIGdyZWF0ZXIgdGhhbiBoaSAtIGxvLCB0aGVuIGZld2VyIHRoYW4gayBlbGVtZW50cyB3aWxsIGJlIHJldHVybmVkLiBUaGVcbiAgLy8gb3JkZXIgb2YgZWxlbWVudHMgaW4gYSBpcyB1bmNoYW5nZWQgYnkgdGhpcyBvcGVyYXRpb24uXG4gIGZ1bmN0aW9uIGhlYXBzZWxlY3QoYSwgbG8sIGhpLCBrKSB7XG4gICAgdmFyIHF1ZXVlID0gbmV3IEFycmF5KGsgPSBNYXRoLm1pbihoaSAtIGxvLCBrKSksXG4gICAgICAgIG1pbixcbiAgICAgICAgaSxcbiAgICAgICAgZDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBrOyArK2kpIHF1ZXVlW2ldID0gYVtsbysrXTtcbiAgICBoZWFwKHF1ZXVlLCAwLCBrKTtcblxuICAgIGlmIChsbyA8IGhpKSB7XG4gICAgICBtaW4gPSBmKHF1ZXVlWzBdKTtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGYoZCA9IGFbbG9dKSA+IG1pbikge1xuICAgICAgICAgIHF1ZXVlWzBdID0gZDtcbiAgICAgICAgICBtaW4gPSBmKGhlYXAocXVldWUsIDAsIGspWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKytsbyA8IGhpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcXVldWU7XG4gIH1cblxuICByZXR1cm4gaGVhcHNlbGVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoZWFwc2VsZWN0X2J5KGNyb3NzZmlsdGVyX2lkZW50aXR5KTtcbm1vZHVsZS5leHBvcnRzLmJ5ID0gaGVhcHNlbGVjdF9ieTsgLy8gYXNzaWduIHRoZSByYXcgZnVuY3Rpb24gdG8gdGhlIGV4cG9ydCBhcyB3ZWxsXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///e95e\n')},ea82:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/\n\n/**\n * Module requirements\n */\n\nvar isArray = __webpack_require__(/*! isarray */ \"6176\");\nvar isBuf = __webpack_require__(/*! ./is-buffer */ \"419b\");\n\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\nexports.deconstructPacket = function(packet){\n  var buffers = [];\n  var packetData = packet.data;\n\n  function _deconstructPacket(data) {\n    if (!data) return data;\n\n    if (isBuf(data)) {\n      var placeholder = { _placeholder: true, num: buffers.length };\n      buffers.push(data);\n      return placeholder;\n    } else if (isArray(data)) {\n      var newData = new Array(data.length);\n      for (var i = 0; i < data.length; i++) {\n        newData[i] = _deconstructPacket(data[i]);\n      }\n      return newData;\n    } else if ('object' == typeof data && !(data instanceof Date)) {\n      var newData = {};\n      for (var key in data) {\n        newData[key] = _deconstructPacket(data[key]);\n      }\n      return newData;\n    }\n    return data;\n  }\n\n  var pack = packet;\n  pack.data = _deconstructPacket(packetData);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n  return {packet: pack, buffers: buffers};\n};\n\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\nexports.reconstructPacket = function(packet, buffers) {\n  var curPlaceHolder = 0;\n\n  function _reconstructPacket(data) {\n    if (data && data._placeholder) {\n      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\n      return buf;\n    } else if (isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        data[i] = _reconstructPacket(data[i]);\n      }\n      return data;\n    } else if (data && 'object' == typeof data) {\n      for (var key in data) {\n        data[key] = _reconstructPacket(data[key]);\n      }\n      return data;\n    }\n    return data;\n  }\n\n  packet.data = _reconstructPacket(packet.data);\n  packet.attachments = undefined; // no longer useful\n  return packet;\n};\n\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\nexports.removeBlobs = function(data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj;\n\n    // convert any blob\n    if ((global.Blob && obj instanceof Blob) ||\n        (global.File && obj instanceof File)) {\n      pendingBlobs++;\n\n      // async filereader\n      var fileReader = new FileReader();\n      fileReader.onload = function() { // this.result == arraybuffer\n        if (containingObject) {\n          containingObject[curKey] = this.result;\n        }\n        else {\n          bloblessData = this.result;\n        }\n\n        // if nothing pending its callback time\n        if(! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n    } else if (isArray(obj)) { // handle array\n      for (var i = 0; i < obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs = 0;\n  var bloblessData = data;\n  _removeBlobs(bloblessData);\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"698d\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWE4Mi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanM/ZGQwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBCbG9iLEZpbGUqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG5cbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcbiAqIGhlcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpe1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuXG4gIGZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICAgIGlmIChpc0J1ZihkYXRhKSkge1xuICAgICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIHZhciBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfSBlbHNlIGlmICgnb2JqZWN0JyA9PSB0eXBlb2YgZGF0YSAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgdmFyIG5ld0RhdGEgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHBhY2sgPSBwYWNrZXQ7XG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhKTtcbiAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgcmV0dXJuIHtwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnN9O1xufTtcblxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgdmFyIGN1clBsYWNlSG9sZGVyID0gMDtcblxuICBmdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSkge1xuICAgIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgICB2YXIgYnVmID0gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBlbHNlIGlmIChkYXRhICYmICdvYmplY3QnID09IHR5cGVvZiBkYXRhKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJlbW92ZXMgQmxvYnMgb3IgRmlsZXMgZnJvbSBkYXRhIHZpYVxuICogRmlsZVJlYWRlcidzIHJlYWRBc0FycmF5QnVmZmVyIG1ldGhvZC4gVXNlZCBiZWZvcmUgZW5jb2RpbmdcbiAqIGRhdGEgYXMgbXNncGFjay4gQ2FsbHMgY2FsbGJhY2sgd2l0aCB0aGUgYmxvYmxlc3MgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBfcmVtb3ZlQmxvYnMob2JqLCBjdXJLZXksIGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcblxuICAgIC8vIGNvbnZlcnQgYW55IGJsb2JcbiAgICBpZiAoKGdsb2JhbC5CbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgICAgIChnbG9iYWwuRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKSkge1xuICAgICAgcGVuZGluZ0Jsb2JzKys7XG5cbiAgICAgIC8vIGFzeW5jIGZpbGVyZWFkZXJcbiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7IC8vIHRoaXMucmVzdWx0ID09IGFycmF5YnVmZmVyXG4gICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0KSB7XG4gICAgICAgICAgY29udGFpbmluZ09iamVjdFtjdXJLZXldID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYmxvYmxlc3NEYXRhID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBub3RoaW5nIHBlbmRpbmcgaXRzIGNhbGxiYWNrIHRpbWVcbiAgICAgICAgaWYoISAtLXBlbmRpbmdCbG9icykge1xuICAgICAgICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIob2JqKTsgLy8gYmxvYiAtPiBhcnJheWJ1ZmZlclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7IC8vIGhhbmRsZSBhcnJheVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9iaiAmJiAnb2JqZWN0JyA9PSB0eXBlb2Ygb2JqICYmICFpc0J1ZihvYmopKSB7IC8vIGFuZCBvYmplY3RcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHBlbmRpbmdCbG9icyA9IDA7XG4gIHZhciBibG9ibGVzc0RhdGEgPSBkYXRhO1xuICBfcmVtb3ZlQmxvYnMoYmxvYmxlc3NEYXRhKTtcbiAgaWYgKCFwZW5kaW5nQmxvYnMpIHtcbiAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///ea82\n")},ef13:function(module,exports){eval("/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWYxMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanM/NTM3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBzbGljaW5nIGFuIGFycmF5YnVmZmVyIGV2ZW4gd2hlblxuICogQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlIGlzIG5vdCBzdXBwb3J0ZWRcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYXJyYXlidWZmZXIuYnl0ZUxlbmd0aDtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgfHwgYnl0ZXM7XG5cbiAgaWYgKGFycmF5YnVmZmVyLnNsaWNlKSB7IHJldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTsgfVxuXG4gIGlmIChzdGFydCA8IDApIHsgc3RhcnQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA8IDApIHsgZW5kICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPiBieXRlcykgeyBlbmQgPSBieXRlczsgfVxuXG4gIGlmIChzdGFydCA+PSBieXRlcyB8fCBzdGFydCA+PSBlbmQgfHwgYnl0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuICB9XG5cbiAgdmFyIGFidiA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGVuZCAtIHN0YXJ0KTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xuICAgIHJlc3VsdFtpaV0gPSBhYnZbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///ef13\n")},faaa:function(module,exports){eval("\n/**\n * Module exports.\n */\n\nmodule.exports = on;\n\n/**\n * Helper for subscriptions.\n *\n * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\n * @param {String} event name\n * @param {Function} callback\n * @api public\n */\n\nfunction on (obj, ev, fn) {\n  obj.on(ev, fn);\n  return {\n    destroy: function () {\n      obj.removeListener(ev, fn);\n    }\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFhYS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanM/MTBkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBvbjtcblxuLyoqXG4gKiBIZWxwZXIgZm9yIHN1YnNjcmlwdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8RXZlbnRFbWl0dGVyfSBvYmogd2l0aCBgRW1pdHRlcmAgbWl4aW4gb3IgYEV2ZW50RW1pdHRlcmBcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBvbiAob2JqLCBldiwgZm4pIHtcbiAgb2JqLm9uKGV2LCBmbik7XG4gIHJldHVybiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgb2JqLnJlbW92ZUxpc3RlbmVyKGV2LCBmbik7XG4gICAgfVxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///faaa\n")},fbef:function(module,exports,__webpack_require__){eval("var Collection = __webpack_require__(/*! ampersand-collection */ \"7bd3\");\nvar Aggregate = __webpack_require__(/*! ../aggregate */ \"9d63\");\n\nmodule.exports = Collection.extend({\n  model: Aggregate,\n  indexes: ['rank'],\n  comparator: 'rank'\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmJlZi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcG90LWZyYW1ld29yay9zcmMvYWdncmVnYXRlL2NvbGxlY3Rpb24uanM/YmJhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ2FtcGVyc2FuZC1jb2xsZWN0aW9uJyk7XG52YXIgQWdncmVnYXRlID0gcmVxdWlyZSgnLi4vYWdncmVnYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbi5leHRlbmQoe1xuICBtb2RlbDogQWdncmVnYXRlLFxuICBpbmRleGVzOiBbJ3JhbmsnXSxcbiAgY29tcGFyYXRvcjogJ3JhbmsnXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///fbef\n")}}]);