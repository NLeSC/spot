(window.webpackJsonp=window.webpackJsonp||[]).push([["npm.stream-transform"],{ae00:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.12.7\nvar Transformer, stream, util,\n  slice = [].slice;\n\nstream = __webpack_require__(/*! stream */ \"92a1\");\n\nutil = __webpack_require__(/*! util */ \"f895\");\n\nmodule.exports = function() {\n  var argument, callback, data, error, handler, i, j, k, len, options, result, transform, type, v;\n  options = {};\n  for (i = j = 0, len = arguments.length; j < len; i = ++j) {\n    argument = arguments[i];\n    type = typeof argument;\n    if (argument === null) {\n      type = 'null';\n    } else if (type === 'object' && Array.isArray(argument)) {\n      type = 'array';\n    }\n    if (i === 0) {\n      if (type === 'function') {\n        handler = argument;\n      } else if (type !== null) {\n        data = argument;\n      }\n      continue;\n    }\n    if (type === 'object') {\n      for (k in argument) {\n        v = argument[k];\n        options[k] = v;\n      }\n    } else if (type === 'function') {\n      if (handler && i === arguments.length - 1) {\n        callback = argument;\n      } else {\n        handler = argument;\n      }\n    } else if (type !== 'null') {\n      throw new Error('Invalid arguments');\n    }\n  }\n  transform = new Transformer(options, handler);\n  error = false;\n  if (data) {\n    process.nextTick(function() {\n      var len1, m, row;\n      for (m = 0, len1 = data.length; m < len1; m++) {\n        row = data[m];\n        if (error) {\n          break;\n        }\n        transform.write(row);\n      }\n      return transform.end();\n    });\n  }\n  if (callback || options.consume) {\n    result = [];\n    transform.on('readable', function() {\n      var r, results;\n      results = [];\n      while ((r = transform.read())) {\n        if (callback) {\n          results.push(result.push(r));\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    });\n    transform.on('error', function(err) {\n      error = true;\n      if (callback) {\n        return callback(err);\n      }\n    });\n    transform.on('end', function() {\n      if (callback && !error) {\n        return callback(null, result);\n      }\n    });\n  }\n  return transform;\n};\n\nTransformer = function(options1, transform1) {\n  var base;\n  this.options = options1 != null ? options1 : {};\n  this.transform = transform1;\n  this.options.objectMode = true;\n  if ((base = this.options).parallel == null) {\n    base.parallel = 100;\n  }\n  stream.Transform.call(this, this.options);\n  this.running = 0;\n  this.started = 0;\n  this.finished = 0;\n  return this;\n};\n\nutil.inherits(Transformer, stream.Transform);\n\nmodule.exports.Transformer = Transformer;\n\nTransformer.prototype._transform = function(chunk, encoding, cb) {\n  var callback, err, l;\n  this.started++;\n  this.running++;\n  if (this.running < this.options.parallel) {\n    cb();\n    cb = null;\n  }\n  try {\n    l = this.transform.length;\n    if (this.options.params != null) {\n      l--;\n    }\n    if (l === 1) {\n      this._done(null, [this.transform.call(null, chunk, this.options.params)], cb);\n    } else if (l === 2) {\n      callback = (function(_this) {\n        return function() {\n          var chunks, err;\n          err = arguments[0], chunks = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          return _this._done(err, chunks, cb);\n        };\n      })(this);\n      this.transform.call(null, chunk, callback, this.options.params);\n    } else {\n      throw Error(\"Invalid handler arguments\");\n    }\n    return false;\n  } catch (error1) {\n    err = error1;\n    return this._done(err);\n  }\n};\n\nTransformer.prototype._flush = function(cb) {\n  this._ending = function() {\n    if (this.running === 0) {\n      return cb();\n    }\n  };\n  return this._ending();\n};\n\nTransformer.prototype._done = function(err, chunks, cb) {\n  var chunk, j, len;\n  this.running--;\n  if (err) {\n    return this.emit('error', err);\n  }\n  this.finished++;\n  for (j = 0, len = chunks.length; j < len; j++) {\n    chunk = chunks[j];\n    if (typeof chunk === 'number') {\n      chunk = \"\" + chunk;\n    }\n    if (chunk != null) {\n      this.push(chunk);\n    }\n  }\n  if (cb) {\n    cb();\n  }\n  if (this._ending) {\n    return this._ending();\n  }\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"26d5\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWUwMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0tdHJhbnNmb3JtL2xpYi9pbmRleC5qcz85MGRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG52YXIgVHJhbnNmb3JtZXIsIHN0cmVhbSwgdXRpbCxcbiAgc2xpY2UgPSBbXS5zbGljZTtcblxuc3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbnV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhcmd1bWVudCwgY2FsbGJhY2ssIGRhdGEsIGVycm9yLCBoYW5kbGVyLCBpLCBqLCBrLCBsZW4sIG9wdGlvbnMsIHJlc3VsdCwgdHJhbnNmb3JtLCB0eXBlLCB2O1xuICBvcHRpb25zID0ge307XG4gIGZvciAoaSA9IGogPSAwLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgYXJndW1lbnQgPSBhcmd1bWVudHNbaV07XG4gICAgdHlwZSA9IHR5cGVvZiBhcmd1bWVudDtcbiAgICBpZiAoYXJndW1lbnQgPT09IG51bGwpIHtcbiAgICAgIHR5cGUgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KGFyZ3VtZW50KSkge1xuICAgICAgdHlwZSA9ICdhcnJheSc7XG4gICAgfVxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBoYW5kbGVyID0gYXJndW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgZGF0YSA9IGFyZ3VtZW50O1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yIChrIGluIGFyZ3VtZW50KSB7XG4gICAgICAgIHYgPSBhcmd1bWVudFtrXTtcbiAgICAgICAgb3B0aW9uc1trXSA9IHY7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoaGFuZGxlciAmJiBpID09PSBhcmd1bWVudHMubGVuZ3RoIC0gMSkge1xuICAgICAgICBjYWxsYmFjayA9IGFyZ3VtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlciA9IGFyZ3VtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gJ251bGwnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzJyk7XG4gICAgfVxuICB9XG4gIHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm1lcihvcHRpb25zLCBoYW5kbGVyKTtcbiAgZXJyb3IgPSBmYWxzZTtcbiAgaWYgKGRhdGEpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxlbjEsIG0sIHJvdztcbiAgICAgIGZvciAobSA9IDAsIGxlbjEgPSBkYXRhLmxlbmd0aDsgbSA8IGxlbjE7IG0rKykge1xuICAgICAgICByb3cgPSBkYXRhW21dO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2Zvcm0ud3JpdGUocm93KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cmFuc2Zvcm0uZW5kKCk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrIHx8IG9wdGlvbnMuY29uc3VtZSkge1xuICAgIHJlc3VsdCA9IFtdO1xuICAgIHRyYW5zZm9ybS5vbigncmVhZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByLCByZXN1bHRzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKChyID0gdHJhbnNmb3JtLnJlYWQoKSkpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdC5wdXNoKHIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSk7XG4gICAgdHJhbnNmb3JtLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRyYW5zZm9ybS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2FsbGJhY2sgJiYgIWVycm9yKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB0cmFuc2Zvcm07XG59O1xuXG5UcmFuc2Zvcm1lciA9IGZ1bmN0aW9uKG9wdGlvbnMxLCB0cmFuc2Zvcm0xKSB7XG4gIHZhciBiYXNlO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zMSAhPSBudWxsID8gb3B0aW9uczEgOiB7fTtcbiAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0xO1xuICB0aGlzLm9wdGlvbnMub2JqZWN0TW9kZSA9IHRydWU7XG4gIGlmICgoYmFzZSA9IHRoaXMub3B0aW9ucykucGFyYWxsZWwgPT0gbnVsbCkge1xuICAgIGJhc2UucGFyYWxsZWwgPSAxMDA7XG4gIH1cbiAgc3RyZWFtLlRyYW5zZm9ybS5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gIHRoaXMucnVubmluZyA9IDA7XG4gIHRoaXMuc3RhcnRlZCA9IDA7XG4gIHRoaXMuZmluaXNoZWQgPSAwO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtZXIsIHN0cmVhbS5UcmFuc2Zvcm0pO1xuXG5tb2R1bGUuZXhwb3J0cy5UcmFuc2Zvcm1lciA9IFRyYW5zZm9ybWVyO1xuXG5UcmFuc2Zvcm1lci5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIGNhbGxiYWNrLCBlcnIsIGw7XG4gIHRoaXMuc3RhcnRlZCsrO1xuICB0aGlzLnJ1bm5pbmcrKztcbiAgaWYgKHRoaXMucnVubmluZyA8IHRoaXMub3B0aW9ucy5wYXJhbGxlbCkge1xuICAgIGNiKCk7XG4gICAgY2IgPSBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgbCA9IHRoaXMudHJhbnNmb3JtLmxlbmd0aDtcbiAgICBpZiAodGhpcy5vcHRpb25zLnBhcmFtcyAhPSBudWxsKSB7XG4gICAgICBsLS07XG4gICAgfVxuICAgIGlmIChsID09PSAxKSB7XG4gICAgICB0aGlzLl9kb25lKG51bGwsIFt0aGlzLnRyYW5zZm9ybS5jYWxsKG51bGwsIGNodW5rLCB0aGlzLm9wdGlvbnMucGFyYW1zKV0sIGNiKTtcbiAgICB9IGVsc2UgaWYgKGwgPT09IDIpIHtcbiAgICAgIGNhbGxiYWNrID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY2h1bmtzLCBlcnI7XG4gICAgICAgICAgZXJyID0gYXJndW1lbnRzWzBdLCBjaHVua3MgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuX2RvbmUoZXJyLCBjaHVua3MsIGNiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgdGhpcy50cmFuc2Zvcm0uY2FsbChudWxsLCBjaHVuaywgY2FsbGJhY2ssIHRoaXMub3B0aW9ucy5wYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgaGFuZGxlciBhcmd1bWVudHNcIik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgZXJyID0gZXJyb3IxO1xuICAgIHJldHVybiB0aGlzLl9kb25lKGVycik7XG4gIH1cbn07XG5cblRyYW5zZm9ybWVyLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbihjYikge1xuICB0aGlzLl9lbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5ydW5uaW5nID09PSAwKSB7XG4gICAgICByZXR1cm4gY2IoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB0aGlzLl9lbmRpbmcoKTtcbn07XG5cblRyYW5zZm9ybWVyLnByb3RvdHlwZS5fZG9uZSA9IGZ1bmN0aW9uKGVyciwgY2h1bmtzLCBjYikge1xuICB2YXIgY2h1bmssIGosIGxlbjtcbiAgdGhpcy5ydW5uaW5nLS07XG4gIGlmIChlcnIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIH1cbiAgdGhpcy5maW5pc2hlZCsrO1xuICBmb3IgKGogPSAwLCBsZW4gPSBjaHVua3MubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICBjaHVuayA9IGNodW5rc1tqXTtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnbnVtYmVyJykge1xuICAgICAgY2h1bmsgPSBcIlwiICsgY2h1bms7XG4gICAgfVxuICAgIGlmIChjaHVuayAhPSBudWxsKSB7XG4gICAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgIH1cbiAgfVxuICBpZiAoY2IpIHtcbiAgICBjYigpO1xuICB9XG4gIGlmICh0aGlzLl9lbmRpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5fZW5kaW5nKCk7XG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///ae00\n")}}]);