(window.webpackJsonp=window.webpackJsonp||[]).push([["npm.ampersand-sync"],{b581:function(module,exports,__webpack_require__){eval("/*$AMPERSAND_VERSION*/\nvar result = __webpack_require__(/*! lodash/result */ \"80c9\");\nvar defaults = __webpack_require__(/*! lodash/defaults */ \"15e5\");\nvar includes = __webpack_require__(/*! lodash/includes */ \"e2c7\");\nvar assign = __webpack_require__(/*! lodash/assign */ \"5ad5\");\nvar qs = __webpack_require__(/*! qs */ \"a63b\");\nvar mediaType = __webpack_require__(/*! media-type */ \"0d05\");\n\n\nmodule.exports = function (xhr) {\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function () {\n      throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n      'create': 'POST',\n      'update': 'PUT',\n      'patch':  'PATCH',\n      'delete': 'DELETE',\n      'read':   'GET'\n  };\n\n  return function (method, model, optionsInput) {\n      //Copy the options object. It's using assign instead of clonedeep as an optimization.\n      //The only object we could expect in options is headers, which is safely transfered below.\n      var options = assign({},optionsInput);\n      var type = methodMap[method];\n      var headers = {};\n\n      // Default options, unless specified.\n      defaults(options || (options = {}), {\n          emulateHTTP: false,\n          emulateJSON: false,\n          // overrideable primarily to enable testing\n          xhrImplementation: xhr\n      });\n\n      // Default request options.\n      var params = {type: type};\n\n      var ajaxConfig = result(model, 'ajaxConfig', {});\n      var key;\n      // Combine generated headers with user's headers.\n      if (ajaxConfig.headers) {\n          for (key in ajaxConfig.headers) {\n              headers[key.toLowerCase()] = ajaxConfig.headers[key];\n          }\n      }\n      if (options.headers) {\n          for (key in options.headers) {\n              headers[key.toLowerCase()] = options.headers[key];\n          }\n          delete options.headers;\n      }\n      //ajaxConfig has to be merged into params before other options take effect, so it is in fact a 2lvl default\n      assign(params, ajaxConfig);\n      params.headers = headers;\n\n      // Ensure that we have a URL.\n      if (!options.url) {\n          options.url = result(model, 'url') || urlError();\n      }\n\n      // Ensure that we have the appropriate request data.\n      if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n          params.json = options.attrs || model.toJSON(options);\n      }\n\n      // If passed a data param, we add it to the URL or body depending on request type\n      if (options.data && type === 'GET') {\n          // make sure we've got a '?'\n          options.url += includes(options.url, '?') ? '&' : '?';\n          options.url += qs.stringify(options.data);\n          //delete `data` so `xhr` doesn't use it as a body\n          delete options.data;\n      }\n\n      // For older servers, emulate JSON by encoding the request into an HTML-form.\n      if (options.emulateJSON) {\n          params.headers['content-type'] = 'application/x-www-form-urlencoded';\n          params.body = params.json ? {model: params.json} : {};\n          delete params.json;\n      }\n\n      // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n      // And an `X-HTTP-Method-Override` header.\n      if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n          params.type = 'POST';\n          if (options.emulateJSON) params.body._method = type;\n          params.headers['x-http-method-override'] = type;\n      }\n\n      // When emulating JSON, we turn the body into a querystring.\n      // We do this later to let the emulateHTTP run its course.\n      if (options.emulateJSON) {\n          params.body = qs.stringify(params.body);\n      }\n\n      // Set raw XMLHttpRequest options.\n      if (ajaxConfig.xhrFields) {\n          var beforeSend = ajaxConfig.beforeSend;\n          params.beforeSend = function (req) {\n              assign(req, ajaxConfig.xhrFields);\n              if (beforeSend) return beforeSend.apply(this, arguments);\n          };\n          params.xhrFields = ajaxConfig.xhrFields;\n      }\n\n      // Turn a jQuery.ajax formatted request into xhr compatible\n      params.method = params.type;\n\n      var ajaxSettings = assign(params, options);\n\n      // Make the request. The callback executes functions that are compatible\n      // With jQuery.ajax's syntax.\n      var request = options.xhrImplementation(ajaxSettings, function (err, resp, body) {\n          if (err || resp.statusCode >= 400) {\n              if (options.error) {\n                  try {\n                      body = JSON.parse(body);\n                  } catch(e){}\n                  var message = (err? err.message : (body || \"HTTP\"+resp.statusCode));\n                  options.error(resp, 'error', message);\n              }\n          } else {\n              // Parse body as JSON\n              var accept = mediaType.fromString(params.headers.accept);\n              var parseJson = accept.isValid() && accept.type === 'application' && (accept.subtype === 'json' || accept.suffix === 'json');\n              if (typeof body === 'string' && body !== '' && (!params.headers.accept || parseJson)) {\n                  try {\n                      body = JSON.parse(body);\n                  } catch (err) {\n                      if (options.error) options.error(resp, 'error', err.message);\n                      if (options.always) options.always(err, resp, body);\n                      return;\n                  }\n              }\n              if (options.success) options.success(body, 'success', resp);\n          }\n          if (options.always) options.always(err, resp, body);\n      });\n      if (model) model.trigger('request', model, request, optionsInput, ajaxSettings);\n      request.ajaxSettings = ajaxSettings;\n      return request;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///b581\n")},bd2e:function(module,exports,__webpack_require__){eval('var xhr = __webpack_require__(/*! xhr */ "9eae");\nmodule.exports = __webpack_require__(/*! ./core */ "b581")(xhr);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmQyZS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbXBlcnNhbmQtc3luYy9hbXBlcnNhbmQtc3luYy1icm93c2VyLmpzPzRiMTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHhociA9IHJlcXVpcmUoJ3hocicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvcmUnKSh4aHIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///bd2e\n')}}]);